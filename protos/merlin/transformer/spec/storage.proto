syntax = "proto3";

package merlin.transformer;

option go_package = "github.com/caraml-dev/merlin/pkg/transformer/spec";

import "google/protobuf/duration.proto";

// ServingType indicate type of interaction to Feast
enum ServingType {
  FEAST_GRPC = 0; // Features are retrieved through GRPC web service
  DIRECT_STORAGE = 1; // Features are retrieved by fetching feast storage directly
}

message OnlineStorage {
  ServingType servingType = 1; // Type of interaction to feast
  oneof storage { // Storage configuration
    RedisStorage redis = 2;
    RedisClusterStorage redisCluster = 3;
    BigTableStorage bigtable = 4;
  }
}

message BigTableStorage {
  string feastServingUrl = 1; // Feast GRPC URL
  string project = 2; // GCP where the bigtable located
  string instance = 3; // Bigtable instance name
  string appProfile = 4; // ID of app profile
  BigTableOption option = 5; // Optional configuration for bigtable
}

message BigTableOption {
  int32 grpcConnectionPool = 1; // Number of grpc connection pool
  google.protobuf.Duration keepAliveInterval = 2; // Interval of keep alive pings server to check whether the connection still alive
  google.protobuf.Duration keepAliveTimeout = 3; // Duration of timeout, the connection will be closed if no activity is seen
  string credentialJson = 4; // Base64 Encoded credential that later will be used as authentication of bigtable
}

message RedisStorage {
  string feastServingUrl = 1; // Feast GRPC URL
  string redisAddress = 2; // Address of single redis
  RedisOption option = 3; // Redis option
}

message RedisClusterStorage {
  string feastServingUrl = 1; // Feast GRPC URL
  repeated string redisAddress = 2; // List of addresses of redis cluster
  RedisOption option = 3; // Redis option
}

// options to be passed to the goredis client
message RedisOption {
  int32 maxRetries = 1; // Number of maximum retry 
  google.protobuf.Duration minRetryBackoff = 2; // minimum duration of backoff between retry
  google.protobuf.Duration dialTimeout = 3; // dial timeout for establishing new connection
  google.protobuf.Duration readTimeout = 4; // read timeout duration for redis command
  google.protobuf.Duration writeTimeout = 5; // write timeout duration for redis command
  int32 poolSize = 6; // maximum number of connection created that later on will be reused
  google.protobuf.Duration maxConnAge = 7; // maximum age of redis connection
  google.protobuf.Duration poolTimeout = 8; // amount of time clients wait for connection if all connection are busy before returning error
  google.protobuf.Duration idleTimeout = 9; // amount of time after which client closes idle connections
  google.protobuf.Duration idleCheckFrequency = 10; // frequency of idle check
  int32 minIdleConnections = 11; // minimum number of idle connections
}