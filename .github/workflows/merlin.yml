name: Merlin CI Workflow
on:
  push:
    branches: 
    - main 
    - v1beta1  # TODO: remove v1beta1
  pull_request:
    branches: 
    - main 
    - v1beta1  # TODO: remove v1beta1

env:
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  create-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.create_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - id: create_version
        name: Create version string
        run: |
          # Strip git ref prefix from version
          VERSION=$(git describe --tags --always --first-parent)

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "::set-output name=version::${VERSION}"

  test-batch-predictor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
      - name: Install dependencies
        working-directory: ./python/batch-predictor
        run: |
          pip install pipenv
          make setup
      - name: Run batch-predictor test
        working-directory: ./python/batch-predictor
        run: make unit-test

  test-pyfunc-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7.9
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
      - name: Install dependencies
        working-directory: ./python/pyfunc-server
        run: |
          pip install pipenv
          make setup
      - name: Run pyfunc-server test
        working-directory: ./python/pyfunc-server
        run: make test

  test-python-sdk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
      - name: Install dependencies
        working-directory: ./python/sdk
        run: |
          pip install mypy==0.812 pipenv
          make setup
      - name: Unit test Python SDK
        env:
          E2E_USE_GOOGLE_OAUTH: false
        working-directory: ./python/sdk
        run: make unit-test

  test-api:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12.4
        env:
          POSTGRES_DB: merlin
          POSTGRES_USER: merlin
          POSTGRES_PASSWORD: merlin
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: |
          make setup
          make init-dep-api
      - name: Lint API files
        run: make lint-api
      - name: Test API files
        env:
          POSTGRES_HOST: localhost
          POSTGRES_DB: merlin
          POSTGRES_USER: merlin
          POSTGRES_PASSWORD: merlin
        run: make it-test-api-ci

  build-ui:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to the target branch
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache YARN
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: ui/node_modules
          key: |
            ${{ runner.os }}-modules-${{ hashFiles('ui/yarn.lock') }}
          restore-keys: ${{ runner.os }}-modules-
      - name: Install dependencies
        run: make init-dep-ui
      - name: Lint UI files
        run: make lint-ui
      - name: Test UI files
        run: make test-ui
      - name: Build UI static files
        run: make build-ui
      - name: Publish UI Artifact
        uses: actions/upload-artifact@v2
        with:
          name: merlin-ui-dist
          path: ui/build/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build-api:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12.4
        env:
          POSTGRES_DB: merlin
          POSTGRES_USER: merlin
          POSTGRES_PASSWORD: merlin
        ports:
          - 5432:5432
    needs:
    - build-ui
    - create-version
    steps:
      - uses: actions/checkout@v2
      - name: Download UI Dist
        uses: actions/download-artifact@v2
        with:
          name: merlin-ui-dist
          path: ui/build
      - name: Build API Docker
        run: docker build -t merlin:${{ needs.create-version.outputs.version }} -f Dockerfile .
      - name: Save API Docker
        run: docker image save --output merlin.${{ needs.create-version.outputs.version }}.tar merlin:${{ needs.create-version.outputs.version }}
      - name: Publish API Docker Artifact
        uses: actions/upload-artifact@v2
        with:
          name: merlin.${{ needs.create-version.outputs.version }}.tar
          path: merlin.${{ needs.create-version.outputs.version }}.tar
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build-batch-predictor:
    runs-on: ubuntu-latest
    needs:
      - create-version
    steps:
      - uses: actions/checkout@v2
      - name: Build Batch Predictor Docker
        run: docker build -t merlin-pyspark-base:${{ needs.create-version.outputs.version }} -f python/batch-predictor/docker/base.Dockerfile python
      - name: Save Batch Predictor Docker
        run: docker image save --output merlin-pyspark-base.${{ needs.create-version.outputs.version }}.tar merlin-pyspark-base:${{ needs.create-version.outputs.version }}
      - name: Publish Batch Predictor Docker Artifact
        uses: actions/upload-artifact@v2
        with:
          name: merlin-pyspark-base.${{ needs.create-version.outputs.version }}.tar
          path: merlin-pyspark-base.${{ needs.create-version.outputs.version }}.tar
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build-pyfunc-server:
    runs-on: ubuntu-latest
    needs:
      - create-version
    steps:
      - uses: actions/checkout@v2
      - name: Build Pyfunc Server Docker
        run: docker build -t merlin-pyfunc-base:${{ needs.create-version.outputs.version }} -f python/pyfunc-server/base.Dockerfile python
      - name: Save Pyfunc Server Docker
        run: docker image save --output merlin-pyfunc-base.${{ needs.create-version.outputs.version }}.tar merlin-pyfunc-base:${{ needs.create-version.outputs.version }}
      - name: Publish Pyfunc Server Docker Artifact
        uses: actions/upload-artifact@v2
        with:
          name: merlin-pyfunc-base.${{ needs.create-version.outputs.version }}.tar
          path: merlin-pyfunc-base.${{ needs.create-version.outputs.version }}.tar
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build-transformer:
    runs-on: ubuntu-latest
    needs:
      - create-version
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: make init-dep-api
      - name: Build Standard Transformer
        run: make build-transformer
      - name: Build Standard Transformer Docker
        run: docker build -t merlin-transformer:${{ needs.create-version.outputs.version }} -f transformer.Dockerfile .
      - name: Save Standard Transformer Docker
        run: docker image save --output merlin-transformer.${{ needs.create-version.outputs.version }}.tar merlin-transformer:${{ needs.create-version.outputs.version }}
      - name: Publish Standard Transformer Docker Artifact
        uses: actions/upload-artifact@v2
        with:
          name: merlin-transformer.${{ needs.create-version.outputs.version }}.tar
          path: merlin-transformer.${{ needs.create-version.outputs.version }}.tar
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  e2e-test:
    runs-on: ubuntu-latest
    needs: 
      - build-api
      - build-batch-predictor
      - build-pyfunc-server
      - build-transformer
      - create-version
    env:
      K3D_CLUSTER: merlin-cluster
      LOCAL_REGISTRY_PORT: 12345
      LOCAL_REGISTRY: "dev.localhost"
      INGRESS_HOST: "127.0.0.1.nip.io"
    steps:
      - uses: actions/checkout@v2
        with:
          path: merlin
      - uses: actions/checkout@master
        with:
          repository: gojek/mlp
          ref: main
          path: merlin/scripts/e2e/mlp
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
      - name: Download API Docker Artifact
        uses: actions/download-artifact@v2
        with:
          name: merlin.${{ needs.create-version.outputs.version }}.tar
      - name: Download Standard Transformer Docker Artifact
        uses: actions/download-artifact@v2
        with:
          name: merlin-transformer.${{ needs.create-version.outputs.version }}.tar
      - name: Download k3d
        run: |
            curl --silent --fail https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.4.1 bash
      - name: "Create Test Cluster"
        run: |
          k3d registry create $LOCAL_REGISTRY --port $LOCAL_REGISTRY_PORT
          k3d cluster create $K3D_CLUSTER --image rancher/k3s:v1.21.2-k3s1 --k3s-arg '--no-deploy=traefik,metrics-server@server:*' --port 80:80@loadbalancer
      - name: Publish images to k3d registry
        run: |
          # Merlin API
          docker image load --input merlin.${{ needs.create-version.outputs.version }}.tar
          docker tag merlin:${{ needs.create-version.outputs.version }} ${{ env.LOCAL_REGISTRY }}:${{ env.LOCAL_REGISTRY_PORT }}/merlin:${{ needs.create-version.outputs.version }}
          k3d image import ${{ env.LOCAL_REGISTRY }}:${{ env.LOCAL_REGISTRY_PORT }}/merlin:${{ needs.create-version.outputs.version }} -c merlin-cluster

          # Standard Transformer
          docker image load --input  merlin-transformer.${{ needs.create-version.outputs.version }}.tar
          docker tag merlin-transformer:${{ needs.create-version.outputs.version }} ${{ env.LOCAL_REGISTRY }}:${{ env.LOCAL_REGISTRY_PORT }}/merlin-transformer:${{ needs.create-version.outputs.version }}
          k3d image import ${{ env.LOCAL_REGISTRY }}:${{ env.LOCAL_REGISTRY_PORT }}/merlin-transformer:${{ needs.create-version.outputs.version }} -c merlin-cluster
      - name: Setup cluster
        working-directory: merlin/scripts/e2e
        run: ./setup-cluster.sh merlin-cluster ${{ env.INGRESS_HOST }}
      - name: Deploy merlin and mlp
        working-directory: merlin/scripts/e2e
        run: ./deploy-merlin.sh ${{ env.INGRESS_HOST }} ${{ env.LOCAL_REGISTRY }}:${{ env.LOCAL_REGISTRY_PORT }} ../../charts/merlin ${{ needs.create-version.outputs.version }} ${{ github.ref }}
      - name: Run E2E Test
        timeout-minutes: 30
        id: run-e2e-test
        working-directory: merlin/scripts/e2e
        run: ./run-e2e.sh ${{ env.INGRESS_HOST }}
      - name: "Debug"
        if: always()
        run: |
          echo "::group::Get deployment mlp namespace"
          kubectl get deployment -n mlp
          echo "::endgroup::"

          echo "::group::Get deployment  merlin-e2e namespace"
          kubectl get deployment -n merlin-e2e
          echo "::endgroup::"
          
          echo "::group::Describe deployment merlin-e2e namespace"
          kubectl describe deployment -n merlin-e2e
          echo "::endgroup::"

          echo "::group::Get Pod  merlin-e2e namespace"
          kubectl get pod -n merlin-e2e
          echo "::endgroup::"

          echo "::group::Describe Pod  merlin-e2e namespace"
          kubectl describe pod -n merlin-e2e
          echo "::endgroup::"

          echo "::group::Get Inference Service  merlin-e2e namespace"
          kubectl get isvc -n merlin-e2e
          echo "::endgroup::"
          
          echo "::group::Merlin log"
          kubectl logs deploy/merlin -n mlp -c merlin
          echo "::endgroup::"
          
          echo "::group::KServe log"
          kubectl logs statefulset/kserve-controller-manager -n kserve -c manager
          echo "::endgroup::"

          echo "::group::Knative log"
          kubectl logs deploy/controller -n knative-serving
          echo "::endgroup::"

          echo "::group::Get Event"
          kubectl get events -A
          echo "::endgroup::"

          echo "::group::Model log"
          kubectl logs -l component=predictor -c kserve-container -n merlin-e2e
          echo "::endgroup::"

          echo "::group::Transformer log"
          kubectl logs -l component=transformer -c kserve-container -n merlin-e2e
          echo "::endgroup::"
