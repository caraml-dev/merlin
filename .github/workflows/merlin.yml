name: Merlin CI Workflow
on:
  push:
    branches: 
    - main 
    - v1beta1  # TODO: remove v1beta1
  pull_request:
    branches: 
    - main 
    - v1beta1  # TODO: remove v1beta1

env:
  ARTIFACT_RETENTION_DAYS: 7

jobs:

  test-batch-predictor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
      - name: Install dependencies
        working-directory: ./python/batch-predictor
        run: |
          pip install pipenv
          make setup
      - name: Run batch-predictor test
        working-directory: ./python/batch-predictor
        run: make unit-test

  test-pyfunc-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7.9
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
      - name: Install dependencies
        working-directory: ./python/pyfunc-server
        run: |
          pip install pipenv
          make setup
      - name: Run pyfunc-server test
        working-directory: ./python/pyfunc-server
        run: make test

  test-python-sdk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
      - name: Install dependencies
        working-directory: ./python/sdk
        run: |
          pip install mypy==0.812 pipenv
          make setup
      - name: Unit test Python SDK
        env:
          E2E_USE_GOOGLE_OAUTH: false
        working-directory: ./python/sdk
        run: make unit-test

  test-api:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12.4
        env:
          POSTGRES_DB: merlin
          POSTGRES_USER: merlin
          POSTGRES_PASSWORD: merlin
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: |
          make setup
          make init-dep-api
      - name: Lint API files
        run: make lint-api
      - name: Test API files
        env:
          POSTGRES_HOST: localhost
          POSTGRES_DB: merlin
          POSTGRES_USER: merlin
          POSTGRES_PASSWORD: merlin
        run: make it-test-api-ci
      - name: Build API server
        run: make build-api

  build-ui:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to the target branch
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache YARN
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: ui/node_modules
          key: |
            ${{ runner.os }}-modules-${{ hashFiles('ui/yarn.lock') }}
          restore-keys: ${{ runner.os }}-modules-
      - name: Install dependencies
        run: make init-dep-ui
      - name: Lint UI files
        run: make lint-ui
      - name: Test UI files
        run: make test-ui
      - name: Build UI static files
        run: make build-ui
      - name: Publish UI Artifact
        uses: actions/upload-artifact@v2
        with:
          name: merlin-ui-dist
          path: ui/build/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build-api:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12.4
        env:
          POSTGRES_DB: merlin
          POSTGRES_USER: merlin
          POSTGRES_PASSWORD: merlin
        ports:
          - 5432:5432
    needs:
    - build-ui
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: |
          make setup
          make init-dep-api
      - name: Build API server
        run: make build-api
      - name: Download UI Dist
        uses: actions/download-artifact@v2
        with:
          name: merlin-ui-dist
          path: ui/build
      - name: Get branch name
        run: echo "branch_name=$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/*/}} | tr / -)" >> $GITHUB_ENV
      - name: Build API Docker
        run: docker build -t merlin-api:${branch_name} -f Dockerfile .
      - name: Save API Docker
        run: docker image save --output merlin-api.${branch_name}.tar merlin-api:${branch_name}
      - name: Publish API Docker Artifact
        uses: actions/upload-artifact@v2
        with:
          name: merlin-api.${branch_name}.tar
          path: merlin-api.${branch_name}.tar
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build-batch-predictor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get branch name
        run: echo "branch_name=$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/*/}} | tr / -)" >> $GITHUB_ENV
      - name: Build Batch Predictor Docker
        run: docker build -t merlin-pyspark-base:${branch_name} -f python/batch-predictor/docker/base.Dockerfile python
      - name: Save Batch Predictor Docker
        run: docker image save --output merlin-pyspark-base.${branch_name}.tar merlin-pyspark-base:${branch_name}
      - name: Publish Batch Predictor Docker Artifact
        uses: actions/upload-artifact@v2
        with:
          name: merlin-pyspark-base.${branch_name}.tar
          path: merlin-pyspark-base.${branch_name}.tar
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build-pyfunc-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get branch name
        run: echo "branch_name=$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/*/}} | tr / -)" >> $GITHUB_ENV
      - name: Build Pyfunc Server Docker
        run: docker build -t merlin-pyfunc-base:${branch_name} -f python/pyfunc-server/base.Dockerfile python
      - name: Save Pyfunc Server Docker
        run: docker image save --output merlin-pyfunc-base.${branch_name}.tar merlin-pyfunc-base:${branch_name}
      - name: Publish Pyfunc Server Docker Artifact
        uses: actions/upload-artifact@v2
        with:
          name: merlin-pyfunc-base.${branch_name}.tar
          path: merlin-pyfunc-base.${branch_name}.tar
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build-transformer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: make init-dep-api
      - name: Build Standard Transformer
        run: make build-transformer
      - name: Get branch name
        run: echo "branch_name=$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/*/}} | tr / -)" >> $GITHUB_ENV
      - name: Build Standard Transformer Docker
        run: docker build -t merlin-transformer:${branch_name} -f transformer.Dockerfile .
      - name: Save Standard Transformer Docker
        run: docker image save --output merlin-transformer.${branch_name}.tar merlin-transformer:${branch_name}
      - name: Publish Standard Transformer Docker Artifact
        uses: actions/upload-artifact@v2
        with:
          name: merlin-transformer.${branch_name}.tar
          path: merlin-transformer.${branch_name}.tar
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  e2e-test:
    runs-on: ubuntu-latest
    needs: 
    - build-api
    - build-batch-predictor
    - build-pyfunc-server
    - build-transformer
    env:
      LOCAL_REGISTRY: registry.localhost:5000
    steps:
      - uses: actions/checkout@v2
        with:
          path: merlin
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Get branch name
        run: echo "branch_name=$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/*/}} | tr / -)" >> $GITHUB_ENV
      - name: Download API Docker Artifact
        uses: actions/download-artifact@v2
        with:
          name: merlin-api.${{branch_name}}.tar
      - name: Download Batch Predictor Docker Artifact
        uses: actions/download-artifact@v2
        with:
          name: merlin-pyspark-base.${{branch_name}}.tar
      - name: Download Pyfunc Server Docker Artifact
        uses: actions/download-artifact@v2
        with:
          name: merlin-pyfunc-base.${{branch_name}}.tar
      - name: Download Standard Transformer Docker Artifact
        uses: actions/download-artifact@v2
        with:
          name: merlin-transformer.${{branch_name}}.tar
      - name: Publish images to local registry
        env:
          DOCKER_REPOSITORY: ${{ env.LOCAL_REGISTRY }}/${{ github.repository }}
        run: |
          # Merlin API
          docker image load --input merlin-api.${branch_name}.tar
          docker tag \
            merlin-api:${branch_name} \
            ${{ env.DOCKER_REPOSITORY }}/merlin-api:${branch_name}
          docker push ${{ env.DOCKER_REPOSITORY }}/merlin-api:${branch_name}

          # Batch Predictor
          docker image load --input merlin-pyspark-base.${branch_name}.tar
          docker tag \
             merlin-pyspark-base:${branch_name} \
            ${{ env.DOCKER_REPOSITORY }}/merlin-pyspark-base:${branch_name}
          docker push ${{ env.DOCKER_REPOSITORY }}/merlin-pyspark-base:${branch_name}
          
          # Pyfunc Server
          docker image load --input merlin-pyfunc-base.${branch_name}.tar
          docker tag \
            merlin-pyfunc-base:${branch_name} \
            ${{ env.DOCKER_REPOSITORY }}/merlin-pyfunc-base:${branch_name}
          docker push ${{ env.DOCKER_REPOSITORY }}/merlin-pyfunc-base:${branch_name}

          # Standard Transformer
          docker image load --input  merlin-transformer.${branch_name}.tar
          docker tag \
             merlin-transformer:${branch_name} \
            ${{ env.DOCKER_REPOSITORY }}/ merlin-transformer:${branch_name}
          docker push ${{ env.DOCKER_REPOSITORY }}/ merlin-transformer:${branch_name}
      - uses: AbsaOSS/k3d-action@v2
        name: "Create Test Cluster"
        with:
          cluster-name: "merlin-cluster"
          args: >-
            -p "8083:80@agent:0:direct"
            -p "8443:443@agent:0:direct"
            -p "5053:53/udp@agent:0:direct"
            --agents 3
            --no-lb
            --image rancher/k3s:v1.22.6-k3s1
            --k3s-arg "--no-deploy=traefik,metrics-server@server:*"
      - name: Setup cluster
        working-directory: merlin/scripts/e2e/
        run: ./setup-cluster.sh
      # - name: Setup mlp namespace
      #   run: |
      #     kubectl create namespace mlp
      #     kubectl create secret generic vault-secret --namespace=mlp --from-literal=address=http://vault.vault.svc.cluster.local --from-literal=token=root
      # - name: Deploy MLP
      #   run: |
      #     export INGRESS_HOST=127.0.0.1
      #     export HOST_IP=$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].status.hostIP}')
      #     helm install mlp ./mlp/chart --namespace=mlp --values=./mlp/chart/values-e2e.yaml \
      #     --set mlp.image.tag=main \
      #     --set mlp.apiHost=http://mlp.mlp.${INGRESS_HOST}.nip.io/v1 \
      #     --set mlp.oauthClientID=${OAUTH_CLIENT_ID} \
      #     --set mlp.mlflowTrackingUrl=http://${HOST_IP}:31100 \
      #     --set mlp.ingress.enabled=true \
      #     --set mlp.ingress.class=istio \
      #     --set mlp.ingress.host=mlp.mlp.${INGRESS_HOST}.nip.io \
      #     --set mlp.ingress.path="/*" \
      #     --wait --timeout=5m
      # - name: Deploy Merlin
      #   run: ./merlin/scripts/e2e/deploy-merlin.sh "merlin/charts/merlin"
      # - name: Run E2E test
      #   run: ./merlin/scripts/e2e/run-e2e.sh
