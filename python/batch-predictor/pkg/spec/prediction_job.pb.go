// Copyright 2020 The Merlin Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: spec/prediction_job.proto

package spec

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ResultType int32

const (
	ResultType_DOUBLE  ResultType = 0
	ResultType_FLOAT   ResultType = 1
	ResultType_INTEGER ResultType = 2
	ResultType_LONG    ResultType = 3
	ResultType_STRING  ResultType = 4
	ResultType_ARRAY   ResultType = 10
)

// Enum value maps for ResultType.
var (
	ResultType_name = map[int32]string{
		0:  "DOUBLE",
		1:  "FLOAT",
		2:  "INTEGER",
		3:  "LONG",
		4:  "STRING",
		10: "ARRAY",
	}
	ResultType_value = map[string]int32{
		"DOUBLE":  0,
		"FLOAT":   1,
		"INTEGER": 2,
		"LONG":    3,
		"STRING":  4,
		"ARRAY":   10,
	}
)

func (x ResultType) Enum() *ResultType {
	p := new(ResultType)
	*p = x
	return p
}

func (x ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_prediction_job_proto_enumTypes[0].Descriptor()
}

func (ResultType) Type() protoreflect.EnumType {
	return &file_spec_prediction_job_proto_enumTypes[0]
}

func (x ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultType.Descriptor instead.
func (ResultType) EnumDescriptor() ([]byte, []int) {
	return file_spec_prediction_job_proto_rawDescGZIP(), []int{0}
}

type ModelType int32

const (
	ModelType_INVALID_MODEL_TYPE ModelType = 0
	ModelType_XGBOOST            ModelType = 1
	ModelType_TENSORFLOW         ModelType = 2
	ModelType_SKLEARN            ModelType = 3
	ModelType_PYTORCH            ModelType = 4
	ModelType_ONNX               ModelType = 5
	ModelType_PYFUNC             ModelType = 6
	ModelType_PYFUNC_V2          ModelType = 7
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0: "INVALID_MODEL_TYPE",
		1: "XGBOOST",
		2: "TENSORFLOW",
		3: "SKLEARN",
		4: "PYTORCH",
		5: "ONNX",
		6: "PYFUNC",
		7: "PYFUNC_V2",
	}
	ModelType_value = map[string]int32{
		"INVALID_MODEL_TYPE": 0,
		"XGBOOST":            1,
		"TENSORFLOW":         2,
		"SKLEARN":            3,
		"PYTORCH":            4,
		"ONNX":               5,
		"PYFUNC":             6,
		"PYFUNC_V2":          7,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_prediction_job_proto_enumTypes[1].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_spec_prediction_job_proto_enumTypes[1]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_spec_prediction_job_proto_rawDescGZIP(), []int{1}
}

type FileFormat int32

const (
	FileFormat_INVALID_FILE_FORMAT FileFormat = 0
	FileFormat_CSV                 FileFormat = 1
	FileFormat_PARQUET             FileFormat = 2
	FileFormat_AVRO                FileFormat = 3
	FileFormat_JSON                FileFormat = 4
)

// Enum value maps for FileFormat.
var (
	FileFormat_name = map[int32]string{
		0: "INVALID_FILE_FORMAT",
		1: "CSV",
		2: "PARQUET",
		3: "AVRO",
		4: "JSON",
	}
	FileFormat_value = map[string]int32{
		"INVALID_FILE_FORMAT": 0,
		"CSV":                 1,
		"PARQUET":             2,
		"AVRO":                3,
		"JSON":                4,
	}
)

func (x FileFormat) Enum() *FileFormat {
	p := new(FileFormat)
	*p = x
	return p
}

func (x FileFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_prediction_job_proto_enumTypes[2].Descriptor()
}

func (FileFormat) Type() protoreflect.EnumType {
	return &file_spec_prediction_job_proto_enumTypes[2]
}

func (x FileFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileFormat.Descriptor instead.
func (FileFormat) EnumDescriptor() ([]byte, []int) {
	return file_spec_prediction_job_proto_rawDescGZIP(), []int{2}
}

type SaveMode int32

const (
	SaveMode_ERRORIFEXISTS SaveMode = 0
	SaveMode_OVERWRITE     SaveMode = 1
	SaveMode_APPEND        SaveMode = 2
	SaveMode_IGNORE        SaveMode = 3
	SaveMode_ERROR         SaveMode = 4
)

// Enum value maps for SaveMode.
var (
	SaveMode_name = map[int32]string{
		0: "ERRORIFEXISTS",
		1: "OVERWRITE",
		2: "APPEND",
		3: "IGNORE",
		4: "ERROR",
	}
	SaveMode_value = map[string]int32{
		"ERRORIFEXISTS": 0,
		"OVERWRITE":     1,
		"APPEND":        2,
		"IGNORE":        3,
		"ERROR":         4,
	}
)

func (x SaveMode) Enum() *SaveMode {
	p := new(SaveMode)
	*p = x
	return p
}

func (x SaveMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SaveMode) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_prediction_job_proto_enumTypes[3].Descriptor()
}

func (SaveMode) Type() protoreflect.EnumType {
	return &file_spec_prediction_job_proto_enumTypes[3]
}

func (x SaveMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SaveMode.Descriptor instead.
func (SaveMode) EnumDescriptor() ([]byte, []int) {
	return file_spec_prediction_job_proto_rawDescGZIP(), []int{3}
}

type PredictionJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Kind    string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Source:
	//	*PredictionJob_BigquerySource
	//	*PredictionJob_GcsSource
	Source isPredictionJob_Source `protobuf_oneof:"source"`
	Model  *Model                 `protobuf:"bytes,21,opt,name=model,proto3" json:"model,omitempty"`
	// Types that are assignable to Sink:
	//	*PredictionJob_BigquerySink
	//	*PredictionJob_GcsSink
	Sink isPredictionJob_Sink `protobuf_oneof:"sink"`
}

func (x *PredictionJob) Reset() {
	*x = PredictionJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_prediction_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionJob) ProtoMessage() {}

func (x *PredictionJob) ProtoReflect() protoreflect.Message {
	mi := &file_spec_prediction_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionJob.ProtoReflect.Descriptor instead.
func (*PredictionJob) Descriptor() ([]byte, []int) {
	return file_spec_prediction_job_proto_rawDescGZIP(), []int{0}
}

func (x *PredictionJob) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PredictionJob) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PredictionJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *PredictionJob) GetSource() isPredictionJob_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *PredictionJob) GetBigquerySource() *BigQuerySource {
	if x, ok := x.GetSource().(*PredictionJob_BigquerySource); ok {
		return x.BigquerySource
	}
	return nil
}

func (x *PredictionJob) GetGcsSource() *GcsSource {
	if x, ok := x.GetSource().(*PredictionJob_GcsSource); ok {
		return x.GcsSource
	}
	return nil
}

func (x *PredictionJob) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

func (m *PredictionJob) GetSink() isPredictionJob_Sink {
	if m != nil {
		return m.Sink
	}
	return nil
}

func (x *PredictionJob) GetBigquerySink() *BigQuerySink {
	if x, ok := x.GetSink().(*PredictionJob_BigquerySink); ok {
		return x.BigquerySink
	}
	return nil
}

func (x *PredictionJob) GetGcsSink() *GcsSink {
	if x, ok := x.GetSink().(*PredictionJob_GcsSink); ok {
		return x.GcsSink
	}
	return nil
}

type isPredictionJob_Source interface {
	isPredictionJob_Source()
}

type PredictionJob_BigquerySource struct {
	BigquerySource *BigQuerySource `protobuf:"bytes,11,opt,name=bigquery_source,json=bigquerySource,proto3,oneof"`
}

type PredictionJob_GcsSource struct {
	GcsSource *GcsSource `protobuf:"bytes,12,opt,name=gcs_source,json=gcsSource,proto3,oneof"`
}

func (*PredictionJob_BigquerySource) isPredictionJob_Source() {}

func (*PredictionJob_GcsSource) isPredictionJob_Source() {}

type isPredictionJob_Sink interface {
	isPredictionJob_Sink()
}

type PredictionJob_BigquerySink struct {
	BigquerySink *BigQuerySink `protobuf:"bytes,31,opt,name=bigquery_sink,json=bigquerySink,proto3,oneof"`
}

type PredictionJob_GcsSink struct {
	GcsSink *GcsSink `protobuf:"bytes,32,opt,name=gcs_sink,json=gcsSink,proto3,oneof"`
}

func (*PredictionJob_BigquerySink) isPredictionJob_Sink() {}

func (*PredictionJob_GcsSink) isPredictionJob_Sink() {}

type BigQuerySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table    string            `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Features []string          `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty"`
	Options  map[string]string `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BigQuerySource) Reset() {
	*x = BigQuerySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_prediction_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigQuerySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQuerySource) ProtoMessage() {}

func (x *BigQuerySource) ProtoReflect() protoreflect.Message {
	mi := &file_spec_prediction_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQuerySource.ProtoReflect.Descriptor instead.
func (*BigQuerySource) Descriptor() ([]byte, []int) {
	return file_spec_prediction_job_proto_rawDescGZIP(), []int{1}
}

func (x *BigQuerySource) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *BigQuerySource) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *BigQuerySource) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type GcsSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format   FileFormat        `protobuf:"varint,1,opt,name=format,proto3,enum=merlin.batch.spec.FileFormat" json:"format,omitempty"`
	Uri      string            `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Features []string          `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	Options  map[string]string `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GcsSource) Reset() {
	*x = GcsSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_prediction_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsSource) ProtoMessage() {}

func (x *GcsSource) ProtoReflect() protoreflect.Message {
	mi := &file_spec_prediction_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsSource.ProtoReflect.Descriptor instead.
func (*GcsSource) Descriptor() ([]byte, []int) {
	return file_spec_prediction_job_proto_rawDescGZIP(), []int{2}
}

func (x *GcsSource) GetFormat() FileFormat {
	if x != nil {
		return x.Format
	}
	return FileFormat_INVALID_FILE_FORMAT
}

func (x *GcsSource) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GcsSource) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *GcsSource) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ModelType          `protobuf:"varint,1,opt,name=type,proto3,enum=merlin.batch.spec.ModelType" json:"type,omitempty"`
	Uri     string             `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Result  *Model_ModelResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Options map[string]string  `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_prediction_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_spec_prediction_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_spec_prediction_job_proto_rawDescGZIP(), []int{3}
}

func (x *Model) GetType() ModelType {
	if x != nil {
		return x.Type
	}
	return ModelType_INVALID_MODEL_TYPE
}

func (x *Model) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Model) GetResult() *Model_ModelResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Model) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type BigQuerySink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table         string            `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	StagingBucket string            `protobuf:"bytes,2,opt,name=staging_bucket,json=stagingBucket,proto3" json:"staging_bucket,omitempty"`
	ResultColumn  string            `protobuf:"bytes,3,opt,name=result_column,json=resultColumn,proto3" json:"result_column,omitempty"`
	SaveMode      SaveMode          `protobuf:"varint,4,opt,name=save_mode,json=saveMode,proto3,enum=merlin.batch.spec.SaveMode" json:"save_mode,omitempty"`
	Options       map[string]string `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BigQuerySink) Reset() {
	*x = BigQuerySink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_prediction_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigQuerySink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQuerySink) ProtoMessage() {}

func (x *BigQuerySink) ProtoReflect() protoreflect.Message {
	mi := &file_spec_prediction_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQuerySink.ProtoReflect.Descriptor instead.
func (*BigQuerySink) Descriptor() ([]byte, []int) {
	return file_spec_prediction_job_proto_rawDescGZIP(), []int{4}
}

func (x *BigQuerySink) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *BigQuerySink) GetStagingBucket() string {
	if x != nil {
		return x.StagingBucket
	}
	return ""
}

func (x *BigQuerySink) GetResultColumn() string {
	if x != nil {
		return x.ResultColumn
	}
	return ""
}

func (x *BigQuerySink) GetSaveMode() SaveMode {
	if x != nil {
		return x.SaveMode
	}
	return SaveMode_ERRORIFEXISTS
}

func (x *BigQuerySink) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type GcsSink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format       FileFormat        `protobuf:"varint,1,opt,name=format,proto3,enum=merlin.batch.spec.FileFormat" json:"format,omitempty"`
	Uri          string            `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	ResultColumn string            `protobuf:"bytes,3,opt,name=result_column,json=resultColumn,proto3" json:"result_column,omitempty"`
	SaveMode     SaveMode          `protobuf:"varint,4,opt,name=save_mode,json=saveMode,proto3,enum=merlin.batch.spec.SaveMode" json:"save_mode,omitempty"`
	Options      map[string]string `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GcsSink) Reset() {
	*x = GcsSink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_prediction_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsSink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsSink) ProtoMessage() {}

func (x *GcsSink) ProtoReflect() protoreflect.Message {
	mi := &file_spec_prediction_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsSink.ProtoReflect.Descriptor instead.
func (*GcsSink) Descriptor() ([]byte, []int) {
	return file_spec_prediction_job_proto_rawDescGZIP(), []int{5}
}

func (x *GcsSink) GetFormat() FileFormat {
	if x != nil {
		return x.Format
	}
	return FileFormat_INVALID_FILE_FORMAT
}

func (x *GcsSink) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GcsSink) GetResultColumn() string {
	if x != nil {
		return x.ResultColumn
	}
	return ""
}

func (x *GcsSink) GetSaveMode() SaveMode {
	if x != nil {
		return x.SaveMode
	}
	return SaveMode_ERRORIFEXISTS
}

func (x *GcsSink) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type Model_ModelResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ResultType `protobuf:"varint,1,opt,name=type,proto3,enum=merlin.batch.spec.ResultType" json:"type,omitempty"`
	// only if type is array
	ItemType ResultType `protobuf:"varint,2,opt,name=item_type,json=itemType,proto3,enum=merlin.batch.spec.ResultType" json:"item_type,omitempty"`
}

func (x *Model_ModelResult) Reset() {
	*x = Model_ModelResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_prediction_job_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model_ModelResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model_ModelResult) ProtoMessage() {}

func (x *Model_ModelResult) ProtoReflect() protoreflect.Message {
	mi := &file_spec_prediction_job_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model_ModelResult.ProtoReflect.Descriptor instead.
func (*Model_ModelResult) Descriptor() ([]byte, []int) {
	return file_spec_prediction_job_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Model_ModelResult) GetType() ResultType {
	if x != nil {
		return x.Type
	}
	return ResultType_DOUBLE
}

func (x *Model_ModelResult) GetItemType() ResultType {
	if x != nil {
		return x.ItemType
	}
	return ResultType_DOUBLE
}

var File_spec_prediction_job_proto protoreflect.FileDescriptor

var file_spec_prediction_job_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x22, 0xa1,
	0x03, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x67, 0x63, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x46, 0x0a, 0x0d, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x6b,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x69, 0x6e, 0x6b, 0x48, 0x01, 0x52, 0x0c, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x63, 0x73, 0x5f, 0x73,
	0x69, 0x6e, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x47, 0x63,
	0x73, 0x53, 0x69, 0x6e, 0x6b, 0x48, 0x01, 0x52, 0x07, 0x67, 0x63, 0x73, 0x53, 0x69, 0x6e, 0x6b,
	0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x69,
	0x6e, 0x6b, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x69, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x01,
	0x0a, 0x09, 0x47, 0x63, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x84, 0x03, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a, 0x0b, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x0c, 0x42, 0x69, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x61, 0x76,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a,
	0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x02, 0x0a, 0x07, 0x47, 0x63,
	0x73, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x51, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f,
	0x55, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x0a, 0x2a,
	0x7f, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x58, 0x47, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x59, 0x54, 0x4f, 0x52, 0x43, 0x48, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4f,
	0x4e, 0x4e, 0x58, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x59, 0x46, 0x55, 0x4e, 0x43, 0x10,
	0x06, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x59, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x56, 0x32, 0x10, 0x07,
	0x2a, 0x4f, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x51, 0x55, 0x45, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x41, 0x56, 0x52, 0x4f, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10,
	0x04, 0x2a, 0x4f, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x49, 0x46, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x04, 0x42, 0x61, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6a, 0x65, 0x6b, 0x2e,
	0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65,
	0x63, 0x42, 0x12, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6a, 0x65, 0x6b, 0x2f, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x2d, 0x70, 0x79, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spec_prediction_job_proto_rawDescOnce sync.Once
	file_spec_prediction_job_proto_rawDescData = file_spec_prediction_job_proto_rawDesc
)

func file_spec_prediction_job_proto_rawDescGZIP() []byte {
	file_spec_prediction_job_proto_rawDescOnce.Do(func() {
		file_spec_prediction_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_spec_prediction_job_proto_rawDescData)
	})
	return file_spec_prediction_job_proto_rawDescData
}

var file_spec_prediction_job_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_spec_prediction_job_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_spec_prediction_job_proto_goTypes = []interface{}{
	(ResultType)(0),           // 0: merlin.batch.spec.ResultType
	(ModelType)(0),            // 1: merlin.batch.spec.ModelType
	(FileFormat)(0),           // 2: merlin.batch.spec.FileFormat
	(SaveMode)(0),             // 3: merlin.batch.spec.SaveMode
	(*PredictionJob)(nil),     // 4: merlin.batch.spec.PredictionJob
	(*BigQuerySource)(nil),    // 5: merlin.batch.spec.BigQuerySource
	(*GcsSource)(nil),         // 6: merlin.batch.spec.GcsSource
	(*Model)(nil),             // 7: merlin.batch.spec.Model
	(*BigQuerySink)(nil),      // 8: merlin.batch.spec.BigQuerySink
	(*GcsSink)(nil),           // 9: merlin.batch.spec.GcsSink
	nil,                       // 10: merlin.batch.spec.BigQuerySource.OptionsEntry
	nil,                       // 11: merlin.batch.spec.GcsSource.OptionsEntry
	nil,                       // 12: merlin.batch.spec.Model.OptionsEntry
	(*Model_ModelResult)(nil), // 13: merlin.batch.spec.Model.ModelResult
	nil,                       // 14: merlin.batch.spec.BigQuerySink.OptionsEntry
	nil,                       // 15: merlin.batch.spec.GcsSink.OptionsEntry
}
var file_spec_prediction_job_proto_depIdxs = []int32{
	5,  // 0: merlin.batch.spec.PredictionJob.bigquery_source:type_name -> merlin.batch.spec.BigQuerySource
	6,  // 1: merlin.batch.spec.PredictionJob.gcs_source:type_name -> merlin.batch.spec.GcsSource
	7,  // 2: merlin.batch.spec.PredictionJob.model:type_name -> merlin.batch.spec.Model
	8,  // 3: merlin.batch.spec.PredictionJob.bigquery_sink:type_name -> merlin.batch.spec.BigQuerySink
	9,  // 4: merlin.batch.spec.PredictionJob.gcs_sink:type_name -> merlin.batch.spec.GcsSink
	10, // 5: merlin.batch.spec.BigQuerySource.options:type_name -> merlin.batch.spec.BigQuerySource.OptionsEntry
	2,  // 6: merlin.batch.spec.GcsSource.format:type_name -> merlin.batch.spec.FileFormat
	11, // 7: merlin.batch.spec.GcsSource.options:type_name -> merlin.batch.spec.GcsSource.OptionsEntry
	1,  // 8: merlin.batch.spec.Model.type:type_name -> merlin.batch.spec.ModelType
	13, // 9: merlin.batch.spec.Model.result:type_name -> merlin.batch.spec.Model.ModelResult
	12, // 10: merlin.batch.spec.Model.options:type_name -> merlin.batch.spec.Model.OptionsEntry
	3,  // 11: merlin.batch.spec.BigQuerySink.save_mode:type_name -> merlin.batch.spec.SaveMode
	14, // 12: merlin.batch.spec.BigQuerySink.options:type_name -> merlin.batch.spec.BigQuerySink.OptionsEntry
	2,  // 13: merlin.batch.spec.GcsSink.format:type_name -> merlin.batch.spec.FileFormat
	3,  // 14: merlin.batch.spec.GcsSink.save_mode:type_name -> merlin.batch.spec.SaveMode
	15, // 15: merlin.batch.spec.GcsSink.options:type_name -> merlin.batch.spec.GcsSink.OptionsEntry
	0,  // 16: merlin.batch.spec.Model.ModelResult.type:type_name -> merlin.batch.spec.ResultType
	0,  // 17: merlin.batch.spec.Model.ModelResult.item_type:type_name -> merlin.batch.spec.ResultType
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_spec_prediction_job_proto_init() }
func file_spec_prediction_job_proto_init() {
	if File_spec_prediction_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spec_prediction_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_prediction_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigQuerySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_prediction_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_prediction_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_prediction_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigQuerySink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_prediction_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsSink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_prediction_job_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model_ModelResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spec_prediction_job_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PredictionJob_BigquerySource)(nil),
		(*PredictionJob_GcsSource)(nil),
		(*PredictionJob_BigquerySink)(nil),
		(*PredictionJob_GcsSink)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spec_prediction_job_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spec_prediction_job_proto_goTypes,
		DependencyIndexes: file_spec_prediction_job_proto_depIdxs,
		EnumInfos:         file_spec_prediction_job_proto_enumTypes,
		MessageInfos:      file_spec_prediction_job_proto_msgTypes,
	}.Build()
	File_spec_prediction_job_proto = out.File
	file_spec_prediction_job_proto_rawDesc = nil
	file_spec_prediction_job_proto_goTypes = nil
	file_spec_prediction_job_proto_depIdxs = nil
}
