# coding: utf-8

"""
    Merlin

    API Guide for accessing Merlin's model management, deployment, and serving functionalities  # noqa: E501

    OpenAPI spec version: 0.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GPU(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'values': 'list[str]',
        'display_name': 'str',
        'resource_type': 'str',
        'node_selector': 'dict(str, str)',
        'monthly_cost_per_gpu': 'float'
    }

    attribute_map = {
        'values': 'values',
        'display_name': 'display_name',
        'resource_type': 'resource_type',
        'node_selector': 'node_selector',
        'monthly_cost_per_gpu': 'monthly_cost_per_gpu'
    }

    def __init__(self, values=None, display_name=None, resource_type=None, node_selector=None, monthly_cost_per_gpu=None):  # noqa: E501
        """GPU - a model defined in Swagger"""  # noqa: E501
        self._values = None
        self._display_name = None
        self._resource_type = None
        self._node_selector = None
        self._monthly_cost_per_gpu = None
        self.discriminator = None
        if values is not None:
            self.values = values
        if display_name is not None:
            self.display_name = display_name
        if resource_type is not None:
            self.resource_type = resource_type
        if node_selector is not None:
            self.node_selector = node_selector
        if monthly_cost_per_gpu is not None:
            self.monthly_cost_per_gpu = monthly_cost_per_gpu

    @property
    def values(self):
        """Gets the values of this GPU.  # noqa: E501


        :return: The values of this GPU.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this GPU.


        :param values: The values of this GPU.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    @property
    def display_name(self):
        """Gets the display_name of this GPU.  # noqa: E501


        :return: The display_name of this GPU.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GPU.


        :param display_name: The display_name of this GPU.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def resource_type(self):
        """Gets the resource_type of this GPU.  # noqa: E501


        :return: The resource_type of this GPU.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this GPU.


        :param resource_type: The resource_type of this GPU.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def node_selector(self):
        """Gets the node_selector of this GPU.  # noqa: E501


        :return: The node_selector of this GPU.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this GPU.


        :param node_selector: The node_selector of this GPU.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def monthly_cost_per_gpu(self):
        """Gets the monthly_cost_per_gpu of this GPU.  # noqa: E501


        :return: The monthly_cost_per_gpu of this GPU.  # noqa: E501
        :rtype: float
        """
        return self._monthly_cost_per_gpu

    @monthly_cost_per_gpu.setter
    def monthly_cost_per_gpu(self, monthly_cost_per_gpu):
        """Sets the monthly_cost_per_gpu of this GPU.


        :param monthly_cost_per_gpu: The monthly_cost_per_gpu of this GPU.  # noqa: E501
        :type: float
        """

        self._monthly_cost_per_gpu = monthly_cost_per_gpu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GPU, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GPU):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
