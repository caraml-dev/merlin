# coding: utf-8

"""
    Merlin

    API Guide for accessing Merlin's model management, deployment, and serving functionalities  # noqa: E501

    OpenAPI spec version: 0.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GPUConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'values': 'list[str]',
        'resource_type': 'str',
        'node_selector': 'dict(str, str)',
        'tolerations': 'list[GPUToleration]',
        'min_monthly_cost_per_gpu': 'float',
        'max_monthly_cost_per_gpu': 'float'
    }

    attribute_map = {
        'name': 'name',
        'values': 'values',
        'resource_type': 'resource_type',
        'node_selector': 'node_selector',
        'tolerations': 'tolerations',
        'min_monthly_cost_per_gpu': 'min_monthly_cost_per_gpu',
        'max_monthly_cost_per_gpu': 'max_monthly_cost_per_gpu'
    }

    def __init__(self, name=None, values=None, resource_type=None, node_selector=None, tolerations=None, min_monthly_cost_per_gpu=None, max_monthly_cost_per_gpu=None):  # noqa: E501
        """GPUConfig - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._values = None
        self._resource_type = None
        self._node_selector = None
        self._tolerations = None
        self._min_monthly_cost_per_gpu = None
        self._max_monthly_cost_per_gpu = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if values is not None:
            self.values = values
        if resource_type is not None:
            self.resource_type = resource_type
        if node_selector is not None:
            self.node_selector = node_selector
        if tolerations is not None:
            self.tolerations = tolerations
        if min_monthly_cost_per_gpu is not None:
            self.min_monthly_cost_per_gpu = min_monthly_cost_per_gpu
        if max_monthly_cost_per_gpu is not None:
            self.max_monthly_cost_per_gpu = max_monthly_cost_per_gpu

    @property
    def name(self):
        """Gets the name of this GPUConfig.  # noqa: E501


        :return: The name of this GPUConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GPUConfig.


        :param name: The name of this GPUConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def values(self):
        """Gets the values of this GPUConfig.  # noqa: E501


        :return: The values of this GPUConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this GPUConfig.


        :param values: The values of this GPUConfig.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    @property
    def resource_type(self):
        """Gets the resource_type of this GPUConfig.  # noqa: E501


        :return: The resource_type of this GPUConfig.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this GPUConfig.


        :param resource_type: The resource_type of this GPUConfig.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def node_selector(self):
        """Gets the node_selector of this GPUConfig.  # noqa: E501


        :return: The node_selector of this GPUConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this GPUConfig.


        :param node_selector: The node_selector of this GPUConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def tolerations(self):
        """Gets the tolerations of this GPUConfig.  # noqa: E501


        :return: The tolerations of this GPUConfig.  # noqa: E501
        :rtype: list[GPUToleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this GPUConfig.


        :param tolerations: The tolerations of this GPUConfig.  # noqa: E501
        :type: list[GPUToleration]
        """

        self._tolerations = tolerations

    @property
    def min_monthly_cost_per_gpu(self):
        """Gets the min_monthly_cost_per_gpu of this GPUConfig.  # noqa: E501


        :return: The min_monthly_cost_per_gpu of this GPUConfig.  # noqa: E501
        :rtype: float
        """
        return self._min_monthly_cost_per_gpu

    @min_monthly_cost_per_gpu.setter
    def min_monthly_cost_per_gpu(self, min_monthly_cost_per_gpu):
        """Sets the min_monthly_cost_per_gpu of this GPUConfig.


        :param min_monthly_cost_per_gpu: The min_monthly_cost_per_gpu of this GPUConfig.  # noqa: E501
        :type: float
        """

        self._min_monthly_cost_per_gpu = min_monthly_cost_per_gpu

    @property
    def max_monthly_cost_per_gpu(self):
        """Gets the max_monthly_cost_per_gpu of this GPUConfig.  # noqa: E501


        :return: The max_monthly_cost_per_gpu of this GPUConfig.  # noqa: E501
        :rtype: float
        """
        return self._max_monthly_cost_per_gpu

    @max_monthly_cost_per_gpu.setter
    def max_monthly_cost_per_gpu(self, max_monthly_cost_per_gpu):
        """Sets the max_monthly_cost_per_gpu of this GPUConfig.


        :param max_monthly_cost_per_gpu: The max_monthly_cost_per_gpu of this GPUConfig.  # noqa: E501
        :type: float
        """

        self._max_monthly_cost_per_gpu = max_monthly_cost_per_gpu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GPUConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GPUConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
