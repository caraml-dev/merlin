# coding: utf-8

"""
    Merlin

    API Guide for accessing Merlin's model management, deployment, and serving functionalities  # noqa: E501

    OpenAPI spec version: 0.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PredictionLoggerConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'raw_features_table': 'str',
        'entities_table': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'raw_features_table': 'raw_features_table',
        'entities_table': 'entities_table'
    }

    def __init__(self, enabled=None, raw_features_table=None, entities_table=None):  # noqa: E501
        """PredictionLoggerConfig - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._raw_features_table = None
        self._entities_table = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if raw_features_table is not None:
            self.raw_features_table = raw_features_table
        if entities_table is not None:
            self.entities_table = entities_table

    @property
    def enabled(self):
        """Gets the enabled of this PredictionLoggerConfig.  # noqa: E501


        :return: The enabled of this PredictionLoggerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PredictionLoggerConfig.


        :param enabled: The enabled of this PredictionLoggerConfig.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def raw_features_table(self):
        """Gets the raw_features_table of this PredictionLoggerConfig.  # noqa: E501


        :return: The raw_features_table of this PredictionLoggerConfig.  # noqa: E501
        :rtype: str
        """
        return self._raw_features_table

    @raw_features_table.setter
    def raw_features_table(self, raw_features_table):
        """Sets the raw_features_table of this PredictionLoggerConfig.


        :param raw_features_table: The raw_features_table of this PredictionLoggerConfig.  # noqa: E501
        :type: str
        """

        self._raw_features_table = raw_features_table

    @property
    def entities_table(self):
        """Gets the entities_table of this PredictionLoggerConfig.  # noqa: E501


        :return: The entities_table of this PredictionLoggerConfig.  # noqa: E501
        :rtype: str
        """
        return self._entities_table

    @entities_table.setter
    def entities_table(self, entities_table):
        """Sets the entities_table of this PredictionLoggerConfig.


        :param entities_table: The entities_table of this PredictionLoggerConfig.  # noqa: E501
        :type: str
        """

        self._entities_table = entities_table

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PredictionLoggerConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredictionLoggerConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
