# coding: utf-8

"""
    Merlin

    API Guide for accessing Merlin's model management, deployment, and serving functionalities  # noqa: E501

    OpenAPI spec version: 0.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StandardTransformerSimulationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "payload": "FreeFormObject",
        "headers": "FreeFormObject",
        "config": "FreeFormObject",
        "model_prediction_config": "ModelPredictionConfig",
        "protocol": "Protocol",
    }

    attribute_map = {
        "payload": "payload",
        "headers": "headers",
        "config": "config",
        "model_prediction_config": "model_prediction_config",
        "protocol": "protocol",
    }

    def __init__(
        self,
        payload=None,
        headers=None,
        config=None,
        model_prediction_config=None,
        protocol=None,
    ):  # noqa: E501
        """StandardTransformerSimulationRequest - a model defined in Swagger"""  # noqa: E501
        self._payload = None
        self._headers = None
        self._config = None
        self._model_prediction_config = None
        self._protocol = None
        self.discriminator = None
        if payload is not None:
            self.payload = payload
        if headers is not None:
            self.headers = headers
        if config is not None:
            self.config = config
        if model_prediction_config is not None:
            self.model_prediction_config = model_prediction_config
        if protocol is not None:
            self.protocol = protocol

    @property
    def payload(self):
        """Gets the payload of this StandardTransformerSimulationRequest.  # noqa: E501


        :return: The payload of this StandardTransformerSimulationRequest.  # noqa: E501
        :rtype: FreeFormObject
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this StandardTransformerSimulationRequest.


        :param payload: The payload of this StandardTransformerSimulationRequest.  # noqa: E501
        :type: FreeFormObject
        """

        self._payload = payload

    @property
    def headers(self):
        """Gets the headers of this StandardTransformerSimulationRequest.  # noqa: E501


        :return: The headers of this StandardTransformerSimulationRequest.  # noqa: E501
        :rtype: FreeFormObject
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this StandardTransformerSimulationRequest.


        :param headers: The headers of this StandardTransformerSimulationRequest.  # noqa: E501
        :type: FreeFormObject
        """

        self._headers = headers

    @property
    def config(self):
        """Gets the config of this StandardTransformerSimulationRequest.  # noqa: E501


        :return: The config of this StandardTransformerSimulationRequest.  # noqa: E501
        :rtype: FreeFormObject
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this StandardTransformerSimulationRequest.


        :param config: The config of this StandardTransformerSimulationRequest.  # noqa: E501
        :type: FreeFormObject
        """

        self._config = config

    @property
    def model_prediction_config(self):
        """Gets the model_prediction_config of this StandardTransformerSimulationRequest.  # noqa: E501


        :return: The model_prediction_config of this StandardTransformerSimulationRequest.  # noqa: E501
        :rtype: ModelPredictionConfig
        """
        return self._model_prediction_config

    @model_prediction_config.setter
    def model_prediction_config(self, model_prediction_config):
        """Sets the model_prediction_config of this StandardTransformerSimulationRequest.


        :param model_prediction_config: The model_prediction_config of this StandardTransformerSimulationRequest.  # noqa: E501
        :type: ModelPredictionConfig
        """

        self._model_prediction_config = model_prediction_config

    @property
    def protocol(self):
        """Gets the protocol of this StandardTransformerSimulationRequest.  # noqa: E501


        :return: The protocol of this StandardTransformerSimulationRequest.  # noqa: E501
        :rtype: Protocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this StandardTransformerSimulationRequest.


        :param protocol: The protocol of this StandardTransformerSimulationRequest.  # noqa: E501
        :type: Protocol
        """

        self._protocol = protocol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(StandardTransformerSimulationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandardTransformerSimulationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
