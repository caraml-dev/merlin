"""
    Merlin

    API Guide for accessing Merlin's model management, deployment, and serving functionalities  # noqa: E501

    The version of the OpenAPI document: 0.14.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from client.api_client import ApiClient, Endpoint as _Endpoint
from client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from client.model.container import Container
from client.model.version_endpoint import VersionEndpoint


class EndpointApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __models_model_id_versions_version_id_endpoint_endpoint_id_containers_get(
            self,
            model_id,
            version_id,
            endpoint_id,
            **kwargs
        ):
            """Get all container belong to a version endpoint  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.models_model_id_versions_version_id_endpoint_endpoint_id_containers_get(model_id, version_id, endpoint_id, async_req=True)
            >>> result = thread.get()

            Args:
                model_id (int):
                version_id (int):
                endpoint_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Container
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_id'] = \
                model_id
            kwargs['version_id'] = \
                version_id
            kwargs['endpoint_id'] = \
                endpoint_id
            return self.call_with_http_info(**kwargs)

        self.models_model_id_versions_version_id_endpoint_endpoint_id_containers_get = _Endpoint(
            settings={
                'response_type': (Container,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/models/{model_id}/versions/{version_id}/endpoint/{endpoint_id}/containers',
                'operation_id': 'models_model_id_versions_version_id_endpoint_endpoint_id_containers_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_id',
                    'version_id',
                    'endpoint_id',
                ],
                'required': [
                    'model_id',
                    'version_id',
                    'endpoint_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_id':
                        (int,),
                    'version_id':
                        (int,),
                    'endpoint_id':
                        (str,),
                },
                'attribute_map': {
                    'model_id': 'model_id',
                    'version_id': 'version_id',
                    'endpoint_id': 'endpoint_id',
                },
                'location_map': {
                    'model_id': 'path',
                    'version_id': 'path',
                    'endpoint_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__models_model_id_versions_version_id_endpoint_endpoint_id_containers_get
        )

        def __models_model_id_versions_version_id_endpoint_endpoint_id_delete(
            self,
            model_id,
            version_id,
            endpoint_id,
            **kwargs
        ):
            """Undeploy the specified model version deployment  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.models_model_id_versions_version_id_endpoint_endpoint_id_delete(model_id, version_id, endpoint_id, async_req=True)
            >>> result = thread.get()

            Args:
                model_id (int):
                version_id (int):
                endpoint_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_id'] = \
                model_id
            kwargs['version_id'] = \
                version_id
            kwargs['endpoint_id'] = \
                endpoint_id
            return self.call_with_http_info(**kwargs)

        self.models_model_id_versions_version_id_endpoint_endpoint_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/models/{model_id}/versions/{version_id}/endpoint/{endpoint_id}',
                'operation_id': 'models_model_id_versions_version_id_endpoint_endpoint_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_id',
                    'version_id',
                    'endpoint_id',
                ],
                'required': [
                    'model_id',
                    'version_id',
                    'endpoint_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_id':
                        (int,),
                    'version_id':
                        (int,),
                    'endpoint_id':
                        (str,),
                },
                'attribute_map': {
                    'model_id': 'model_id',
                    'version_id': 'version_id',
                    'endpoint_id': 'endpoint_id',
                },
                'location_map': {
                    'model_id': 'path',
                    'version_id': 'path',
                    'endpoint_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__models_model_id_versions_version_id_endpoint_endpoint_id_delete
        )

        def __models_model_id_versions_version_id_endpoint_endpoint_id_get(
            self,
            model_id,
            version_id,
            endpoint_id,
            **kwargs
        ):
            """Get version endpoint resource  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.models_model_id_versions_version_id_endpoint_endpoint_id_get(model_id, version_id, endpoint_id, async_req=True)
            >>> result = thread.get()

            Args:
                model_id (int):
                version_id (int):
                endpoint_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionEndpoint
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_id'] = \
                model_id
            kwargs['version_id'] = \
                version_id
            kwargs['endpoint_id'] = \
                endpoint_id
            return self.call_with_http_info(**kwargs)

        self.models_model_id_versions_version_id_endpoint_endpoint_id_get = _Endpoint(
            settings={
                'response_type': (VersionEndpoint,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/models/{model_id}/versions/{version_id}/endpoint/{endpoint_id}',
                'operation_id': 'models_model_id_versions_version_id_endpoint_endpoint_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_id',
                    'version_id',
                    'endpoint_id',
                ],
                'required': [
                    'model_id',
                    'version_id',
                    'endpoint_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_id':
                        (int,),
                    'version_id':
                        (int,),
                    'endpoint_id':
                        (str,),
                },
                'attribute_map': {
                    'model_id': 'model_id',
                    'version_id': 'version_id',
                    'endpoint_id': 'endpoint_id',
                },
                'location_map': {
                    'model_id': 'path',
                    'version_id': 'path',
                    'endpoint_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__models_model_id_versions_version_id_endpoint_endpoint_id_get
        )

        def __models_model_id_versions_version_id_endpoint_endpoint_id_put(
            self,
            model_id,
            version_id,
            endpoint_id,
            **kwargs
        ):
            """Modify version endpoint, this API will redeploy the associated deployment  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.models_model_id_versions_version_id_endpoint_endpoint_id_put(model_id, version_id, endpoint_id, async_req=True)
            >>> result = thread.get()

            Args:
                model_id (int):
                version_id (int):
                endpoint_id (str):

            Keyword Args:
                body (VersionEndpoint): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionEndpoint
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_id'] = \
                model_id
            kwargs['version_id'] = \
                version_id
            kwargs['endpoint_id'] = \
                endpoint_id
            return self.call_with_http_info(**kwargs)

        self.models_model_id_versions_version_id_endpoint_endpoint_id_put = _Endpoint(
            settings={
                'response_type': (VersionEndpoint,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/models/{model_id}/versions/{version_id}/endpoint/{endpoint_id}',
                'operation_id': 'models_model_id_versions_version_id_endpoint_endpoint_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_id',
                    'version_id',
                    'endpoint_id',
                    'body',
                ],
                'required': [
                    'model_id',
                    'version_id',
                    'endpoint_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_id':
                        (int,),
                    'version_id':
                        (int,),
                    'endpoint_id':
                        (str,),
                    'body':
                        (VersionEndpoint,),
                },
                'attribute_map': {
                    'model_id': 'model_id',
                    'version_id': 'version_id',
                    'endpoint_id': 'endpoint_id',
                },
                'location_map': {
                    'model_id': 'path',
                    'version_id': 'path',
                    'endpoint_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__models_model_id_versions_version_id_endpoint_endpoint_id_put
        )

        def __models_model_id_versions_version_id_endpoint_get(
            self,
            model_id,
            version_id,
            **kwargs
        ):
            """List all endpoint of a model version  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.models_model_id_versions_version_id_endpoint_get(model_id, version_id, async_req=True)
            >>> result = thread.get()

            Args:
                model_id (int):
                version_id (int):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [VersionEndpoint]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_id'] = \
                model_id
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.models_model_id_versions_version_id_endpoint_get = _Endpoint(
            settings={
                'response_type': ([VersionEndpoint],),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/models/{model_id}/versions/{version_id}/endpoint',
                'operation_id': 'models_model_id_versions_version_id_endpoint_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_id',
                    'version_id',
                ],
                'required': [
                    'model_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_id':
                        (int,),
                    'version_id':
                        (int,),
                },
                'attribute_map': {
                    'model_id': 'model_id',
                    'version_id': 'version_id',
                },
                'location_map': {
                    'model_id': 'path',
                    'version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__models_model_id_versions_version_id_endpoint_get
        )

        def __models_model_id_versions_version_id_endpoint_post(
            self,
            model_id,
            version_id,
            **kwargs
        ):
            """Deploy specific version of the models  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.models_model_id_versions_version_id_endpoint_post(model_id, version_id, async_req=True)
            >>> result = thread.get()

            Args:
                model_id (int):
                version_id (int):

            Keyword Args:
                body (VersionEndpoint): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionEndpoint
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_id'] = \
                model_id
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.models_model_id_versions_version_id_endpoint_post = _Endpoint(
            settings={
                'response_type': (VersionEndpoint,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/models/{model_id}/versions/{version_id}/endpoint',
                'operation_id': 'models_model_id_versions_version_id_endpoint_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_id',
                    'version_id',
                    'body',
                ],
                'required': [
                    'model_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_id':
                        (int,),
                    'version_id':
                        (int,),
                    'body':
                        (VersionEndpoint,),
                },
                'attribute_map': {
                    'model_id': 'model_id',
                    'version_id': 'version_id',
                },
                'location_map': {
                    'model_id': 'path',
                    'version_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__models_model_id_versions_version_id_endpoint_post
        )
