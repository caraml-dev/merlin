"""
    Merlin

    API Guide for accessing Merlin's model management, deployment, and serving functionalities  # noqa: E501

    The version of the OpenAPI document: 0.14.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from client.api_client import ApiClient, Endpoint as _Endpoint
from client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from client.model.version import Version


class VersionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __models_model_id_versions_get(
            self,
            model_id,
            **kwargs
        ):
            """List versions of the models  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.models_model_id_versions_get(model_id, async_req=True)
            >>> result = thread.get()

            Args:
                model_id (int):

            Keyword Args:
                limit (int): [optional]
                cursor (str): [optional]
                search (str): Search query to filter the model versions. These searches are currently supported: - Search by \"mlflow_run_id\" e.g. `?search=cfca7716b45f4b149479630a98332a13` - Search by \"environment_name\" e.g `?search=environment_name:myenv` - Search by \"labels\" e.g. `?search=labels:app IN (nginx,postgres), country in (SG)` - Search by \"environment_name\" and \"labels\" e.g.   `?search=environment_name:myenv labels:app IN (nginx,postgres), country in (SG)` . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Version]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_id'] = \
                model_id
            return self.call_with_http_info(**kwargs)

        self.models_model_id_versions_get = _Endpoint(
            settings={
                'response_type': ([Version],),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/models/{model_id}/versions',
                'operation_id': 'models_model_id_versions_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_id',
                    'limit',
                    'cursor',
                    'search',
                ],
                'required': [
                    'model_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_id':
                        (int,),
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                    'search':
                        (str,),
                },
                'attribute_map': {
                    'model_id': 'model_id',
                    'limit': 'limit',
                    'cursor': 'cursor',
                    'search': 'search',
                },
                'location_map': {
                    'model_id': 'path',
                    'limit': 'query',
                    'cursor': 'query',
                    'search': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__models_model_id_versions_get
        )

        def __models_model_id_versions_post(
            self,
            model_id,
            **kwargs
        ):
            """Log a new version of the models  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.models_model_id_versions_post(model_id, async_req=True)
            >>> result = thread.get()

            Args:
                model_id (int):

            Keyword Args:
                body (Version): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Version
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_id'] = \
                model_id
            return self.call_with_http_info(**kwargs)

        self.models_model_id_versions_post = _Endpoint(
            settings={
                'response_type': (Version,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/models/{model_id}/versions',
                'operation_id': 'models_model_id_versions_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_id',
                    'body',
                ],
                'required': [
                    'model_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_id':
                        (int,),
                    'body':
                        (Version,),
                },
                'attribute_map': {
                    'model_id': 'model_id',
                },
                'location_map': {
                    'model_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__models_model_id_versions_post
        )

        def __models_model_id_versions_version_id_delete(
            self,
            model_id,
            version_id,
            **kwargs
        ):
            """Delete version by ID from model  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.models_model_id_versions_version_id_delete(model_id, version_id, async_req=True)
            >>> result = thread.get()

            Args:
                model_id (int):
                version_id (int):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                int
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_id'] = \
                model_id
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.models_model_id_versions_version_id_delete = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/models/{model_id}/versions/{version_id}',
                'operation_id': 'models_model_id_versions_version_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_id',
                    'version_id',
                ],
                'required': [
                    'model_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_id':
                        (int,),
                    'version_id':
                        (int,),
                },
                'attribute_map': {
                    'model_id': 'model_id',
                    'version_id': 'version_id',
                },
                'location_map': {
                    'model_id': 'path',
                    'version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__models_model_id_versions_version_id_delete
        )

        def __models_model_id_versions_version_id_get(
            self,
            model_id,
            version_id,
            **kwargs
        ):
            """Get version by ID from model  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.models_model_id_versions_version_id_get(model_id, version_id, async_req=True)
            >>> result = thread.get()

            Args:
                model_id (int):
                version_id (int):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Version
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_id'] = \
                model_id
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.models_model_id_versions_version_id_get = _Endpoint(
            settings={
                'response_type': (Version,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/models/{model_id}/versions/{version_id}',
                'operation_id': 'models_model_id_versions_version_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_id',
                    'version_id',
                ],
                'required': [
                    'model_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_id':
                        (int,),
                    'version_id':
                        (int,),
                },
                'attribute_map': {
                    'model_id': 'model_id',
                    'version_id': 'version_id',
                },
                'location_map': {
                    'model_id': 'path',
                    'version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__models_model_id_versions_version_id_get
        )

        def __models_model_id_versions_version_id_patch(
            self,
            model_id,
            version_id,
            **kwargs
        ):
            """Patch the version   # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.models_model_id_versions_version_id_patch(model_id, version_id, async_req=True)
            >>> result = thread.get()

            Args:
                model_id (int):
                version_id (int):

            Keyword Args:
                body (Version): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_id'] = \
                model_id
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.models_model_id_versions_version_id_patch = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/models/{model_id}/versions/{version_id}',
                'operation_id': 'models_model_id_versions_version_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_id',
                    'version_id',
                    'body',
                ],
                'required': [
                    'model_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_id':
                        (int,),
                    'version_id':
                        (int,),
                    'body':
                        (Version,),
                },
                'attribute_map': {
                    'model_id': 'model_id',
                    'version_id': 'version_id',
                },
                'location_map': {
                    'model_id': 'path',
                    'version_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__models_model_id_versions_version_id_patch
        )
