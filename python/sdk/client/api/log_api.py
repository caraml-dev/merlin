"""
    Merlin

    API Guide for accessing Merlin's model management, deployment, and serving functionalities  # noqa: E501

    The version of the OpenAPI document: 0.14.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from client.api_client import ApiClient, Endpoint as _Endpoint
from client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)


class LogApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __logs_get(
            self,
            cluster,
            namespace,
            component_type,
            **kwargs
        ):
            """Retrieve log from a container  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.logs_get(cluster, namespace, component_type, async_req=True)
            >>> result = thread.get()

            Args:
                cluster (str):
                namespace (str):
                component_type (str):

            Keyword Args:
                project_name (str): [optional]
                model_id (str): [optional]
                model_name (str): [optional]
                version_id (str): [optional]
                prediction_job_id (str): [optional]
                container_name (str): [optional]
                prefix (str): [optional]
                follow (str): [optional]
                previous (str): [optional]
                since_seconds (str): [optional]
                since_time (str): [optional]
                timestamps (str): [optional]
                tail_lines (str): [optional]
                limit_bytes (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['cluster'] = \
                cluster
            kwargs['namespace'] = \
                namespace
            kwargs['component_type'] = \
                component_type
            return self.call_with_http_info(**kwargs)

        self.logs_get = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/logs',
                'operation_id': 'logs_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster',
                    'namespace',
                    'component_type',
                    'project_name',
                    'model_id',
                    'model_name',
                    'version_id',
                    'prediction_job_id',
                    'container_name',
                    'prefix',
                    'follow',
                    'previous',
                    'since_seconds',
                    'since_time',
                    'timestamps',
                    'tail_lines',
                    'limit_bytes',
                ],
                'required': [
                    'cluster',
                    'namespace',
                    'component_type',
                ],
                'nullable': [
                ],
                'enum': [
                    'component_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('component_type',): {

                        "IMAGE_BUILDER": "image_builder",
                        "MODEL": "model",
                        "TRANSFORMER": "transformer",
                        "BATCH_JOB_DRIVER": "batch_job_driver",
                        "BATCH_JOB_EXECUTOR": "batch_job_executor"
                    },
                },
                'openapi_types': {
                    'cluster':
                        (str,),
                    'namespace':
                        (str,),
                    'component_type':
                        (str,),
                    'project_name':
                        (str,),
                    'model_id':
                        (str,),
                    'model_name':
                        (str,),
                    'version_id':
                        (str,),
                    'prediction_job_id':
                        (str,),
                    'container_name':
                        (str,),
                    'prefix':
                        (str,),
                    'follow':
                        (str,),
                    'previous':
                        (str,),
                    'since_seconds':
                        (str,),
                    'since_time':
                        (str,),
                    'timestamps':
                        (str,),
                    'tail_lines':
                        (str,),
                    'limit_bytes':
                        (str,),
                },
                'attribute_map': {
                    'cluster': 'cluster',
                    'namespace': 'namespace',
                    'component_type': 'component_type',
                    'project_name': 'project_name',
                    'model_id': 'model_id',
                    'model_name': 'model_name',
                    'version_id': 'version_id',
                    'prediction_job_id': 'prediction_job_id',
                    'container_name': 'container_name',
                    'prefix': 'prefix',
                    'follow': 'follow',
                    'previous': 'previous',
                    'since_seconds': 'since_seconds',
                    'since_time': 'since_time',
                    'timestamps': 'timestamps',
                    'tail_lines': 'tail_lines',
                    'limit_bytes': 'limit_bytes',
                },
                'location_map': {
                    'cluster': 'query',
                    'namespace': 'query',
                    'component_type': 'query',
                    'project_name': 'query',
                    'model_id': 'query',
                    'model_name': 'query',
                    'version_id': 'query',
                    'prediction_job_id': 'query',
                    'container_name': 'query',
                    'prefix': 'query',
                    'follow': 'query',
                    'previous': 'query',
                    'since_seconds': 'query',
                    'since_time': 'query',
                    'timestamps': 'query',
                    'tail_lines': 'query',
                    'limit_bytes': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__logs_get
        )
