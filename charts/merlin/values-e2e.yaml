merlin:
  environment: dev
  loggerDestinationURL: "http://message-dumper.mlp.svc.cluster.local"
  image:
    repository: merlin
  replicaCount: 1

  podLabels:
    environment: e2e

  resources:
    requests:
      cpu: 25m
      memory: 64Mi
    limits:
      memory: 256Mi
  service:
    externalPort: 8080
    internalPort: 8080
  mlpApi:
    encryptionKey: password
    apiHost: http://mlp.mlp.svc.cluster.local:8080/v1
  sentry:
    enabled: false
  newrelic:
    enabled: false
  authorization:
    enabled: false

  environmentConfigs:
    - name: dev
      is_default: true
      cluster: merlin-cluster
      region: id
      gcp_project: gcp-project
      deployment_timeout: 10m
      namespace_timeout: 2m
      max_cpu: 250m
      max_memory: 256Mi
      queue_resource_percentage: 20
      is_prediction_job_enabled: true
      is_default_prediction_job: true
      default_prediction_job_config:
        executor_replica: 1
        driver_cpu_request: 25m
        driver_memory_request: 128Mi
        executor_cpu_request: 25m
        executor_memory_request: 128Mi
      default_deployment_config:
        min_replica: 0
        max_replica: 1
        cpu_request: "25m"
        memory_request: "128Mi"
      default_transformer_config:
        min_replica: 0
        max_replica: 1
        cpu_request: "25m"
        memory_request: "64Mi"

  imageBuilder:
    clusterName: merlin-cluster
    namespace: "mlp"
    timeout: "10m"
    kanikoImage: "gcr.io/kaniko-project/executor:v1.6.0"
    baseImage: ""
    dockerfilePath: "./Dockerfile"
    predictionJobDockerfilePath: "docker/app.Dockerfile"
    contextSubPath: "python/pyfunc-server"
    predictionJobContextSubPath: "python/batch-predictor"
    buildContextURI: "git://github.com/gojek/merlin.git#refs/tags/v0.19.0"
    predictionJobBuildContextURI: "git://github.com/gojek/merlin.git#refs/tags/v0.19.0"
    predictionJobBaseImage: "ghcr.io/gojek/merlin-pyspark-base:v0.4.1"
    nodeSelectors: {}
    tolerations: []

  transformer:
    feast:
      defaultServingURL: online-serving-redis.feast.dev
      servingURLs:
        [
          {
            host: "online-serving-redis.feast.dev",
            label: "Online Serving with Redis",
            icon: "redis",
          },
          {
            host: "online-serving-bigtable.feast.dev",
            label: "Online Serving with BigTable",
            icon: "bigtable",
          },
        ]
      coreURL: core.feast.dev
    image: merlin-transformer:1.0.0

  mlflow:
    # This should be the actual DNS registered
    trackingURL: "http://merlin-mlflow"
  ingress:
    enabled: true
    class: istio
    path: /

merlin-postgresql:
  enabled: true
  persistence:
    enabled: false
  postgresqlUsername: merlin
  postgresqlDatabase: merlin
  postgresqlPassword: merlin
  resources:
    requests:
      cpu: 25m
      memory: 64Mi

mlflow:
  name: mlflow
  artifactRoot: s3://mlflow
  extraEnvs:
    AWS_ACCESS_KEY_ID: YOURACCESSKEY
    AWS_SECRET_ACCESS_KEY: YOURSECRETKEY
    AWS_DEFAULT_REGION: ap-southeast-2
    MLFLOW_S3_ENDPOINT_URL: http://minio.minio.svc.cluster.local:9000
  resources:
    requests:
      cpu: 25m
      memory: 64Mi

  podLabels:
    environment: e2e

  ingress:
    enabled: true
    class: istio
    path: /

mlflow-postgresql:
  enabled: true
  persistence:
    enabled: false
  postgresqlUsername: mlflow
  postgresqlDatabase: mlflow
  postgresqlPassword: mlflow
  resources:
    requests:
      cpu: 25m
      memory: 64Mi

swagger:
  enabled: false
