merlin:
  image:
    pullPolicy: IfNotPresent
    registry: ghcr.io
    repository: gojek/merlin
    tag: 0.7.0
  replicaCount: "2"
  resources:
    requests:
      cpu: "500m"
      memory: 1Gi
    limits:
      cpu: "1"
      memory: 1Gi
  service:
    externalPort: 8080
    internalPort: 3000
  ingress:
    enabled: false

  environment: dev
  homepage: /merlin
  apiHost: http://merlin.mlp/v1
  docsURL: ""

  mlpApi:
    apiHost: http://mlp.mlp:8080/v1
    # encryptionKey must be specified using --set flag.
    # encryptionKey:

  imageBuilder:
    clusterName: "dev"
    buildContextURI: "git://TOKEN@github.com/gojek/merlin.git#refs/tags/v0.1"
    baseImage: ""
    dockerfilePath: "./Dockerfile"
    predictionJobBuildContextURI: "git://TOKEN@github.com/gojek/merlin.git#refs/tags/v0.1"
    predictionJobBaseImage: "gojek/mlp/merlin-pyspark:v0.4.1"
    predictionJobDockerfilePath: "docker/app.Dockerfile"
    namespace: "mlp"
    dockerRegistry: "gojek"
    timeout: "30m"
    contextSubPath: "python/pyfunc-server"
    predictionJobContextSubPath: "python/batch-predictor"

  vault:
    secretName: "vault-secret" # Must be bootstraped first.

  gitlab:
    baseURL: https://gitlab.com/
    # GitLab token must be specified using --set flag.
    # token:
    dashboardRepository: data-science/slo-specs
    dashboardBranch: master
    alertRepository: lens/artillery/datascience
    alertBranch: master

  alert:
    enabled: false

  monitoring:
    enabled: false

  warden:
    apiHost: ""

  # Google service account used to access GCP's resources.
  #
  # gcpServiceAccount:
  #   secretName: merlin-secret
  #   secretKey: service-account.json

  environmentConfigs:
    - name: "id-dev"
      is_default: true
      cluster: "dev"
      region: "id"
      gcp_project: "gcp-project"
      deployment_timeout: "10m"
      namespace_timeout: "2m"
      min_replica: 0
      max_replica: 1
      max_cpu: "8"
      max_memory: "8Gi"
      cpu_request: "100m"
      memory_request: "200Mi"
      cpu_limit: "400m"
      memory_limit: "500Mi"
      queue_resource_percentage: "20"
      is_prediction_job_enabled: true
      is_default_prediction_job: true
      prediction_job_config:
        executor_replica: 3
        driver_cpu_request: "2"
        driver_memory_request: "2Gi"
        executor_cpu_request: "2"
        executor_memory_request: "2Gi"

  sentry:
    enabled: false
    dsn: ""

  newrelic:
    enabled: false
    appname: "merlin-api-dev"
    licenseSecretName: "newrelic-license-secret"

  authorization:
    enabled: true
    serverUrl: http://mlp-authorization-keto

  encryption:
    key: "password"


mlflow:
  image:
    registry: ghcr.io
    repository: gojek/mlflow
    tag: 1.3.0
  artifactRoot: gs://bucket-name/mlflow
  postgresql:
    enabled: false
    postgresqlDatabase: mlflow
    postgresqlUsername: mlflow


postgresql:
  resources:
    requests:
      memory: 2Gi
      cpu: 500m
  persistence:
    size: 100Gi
  postgresqlUsername: merlin
  postgresqlDatabase: merlin
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  replication:
    enabled: true
    user: repl_user
    password: repl_password
    slaveReplicas: 2
    ## Set synchronous commit mode: on, off, remote_apply, remote_write and local
    ## ref: https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-WAL-LEVEL
    synchronousCommit: "on"
    ## From the number of `slaveReplicas` defined above, set the number of those that will have synchronous replication
    ## NOTE: It cannot be > slaveReplicas
    numSynchronousReplicas: 2
    ## Replication Cluster application name. Useful for defining multiple replication policies
    applicationName: merlin


swagger:
  enabled: true
  image:
    tag: v3.23.5
  apiHost: "merlin.dev"
  basePath: "/api/merlin/v1"
  service:
    internalPort: 8080
    externalPort: 8080
