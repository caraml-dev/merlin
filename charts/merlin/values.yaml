merlin:
  image:
    pullPolicy: IfNotPresent
    registry: ghcr.io
    repository: gojek/merlin
    tag: 0.7.0

  replicaCount: "2"

  resources:
    requests:
      cpu: "500m"
      memory: 1Gi
    limits:
      cpu: "1"
      memory: 1Gi

  service:
    externalPort: 8080
    internalPort: 8080

  ingress:
    enabled: false

  environment: dev

  homepage: /merlin

  apiHost: http://merlin.mlp/v1

  docsURL: ""

  # Comma-separated value of Docker registries that can be chosen in deployment page
  dockerRegistries: ghcr.io/gojek,ghcr.io/your-company

  loggerDestinationURL: "http://yourDestinationLogger"

  queue:
    numOfWorkers: 1

  mlpApi:
    apiHost: http://mlp.mlp:8080/v1
    # encryptionKey must be specified using --set flag.
    encryptionKey: secret-encyrption

  feastCoreApi:
    apiHost: http://feast-core.mlp:8080/v1

  imageBuilder:
    clusterName: "dev"
    buildContextURI: "git://github.com/gojek/merlin.git#refs/tags/v0.1"
    baseImage: ""
    dockerfilePath: "./Dockerfile"
    predictionJobBuildContextURI: "git://github.com/gojek/merlin.git#refs/tags/v0.1"
    predictionJobBaseImage: "gojek/mlp/merlin-pyspark:v0.4.1"
    predictionJobDockerfilePath: "docker/app.Dockerfile"
    namespace: "mlp"
    dockerRegistry: "gojek"
    timeout: "30m"
    contextSubPath: "python/pyfunc-server"
    predictionJobContextSubPath: "python/batch-predictor"

  vault:
    secretName: "vault-secret" # Must be bootstraped first.

  gitlab:
    baseURL: https://gitlab.com/
    # GitLab token must be specified using --set flag.
    # token:
    dashboardRepository: data-science/slo-specs
    dashboardBranch: master
    alertRepository: lens/artillery/datascience
    alertBranch: master

  alert:
    enabled: false

  monitoring:
    enabled: false
    # baseURL: ""
    # jobBaseURL: ""

  warden:
    apiHost: ""

  transformer:
    feast:
      servingURL: serving.feast.dev
      coreURL: core.feast.dev
      coreAuthAudience: core.feast.dev
      authEnabled: false
    image: merlin-transformer:1.0.0

  # Google service account used to access GCP's resources.
  #
  # gcpServiceAccount:
  #   secretName: merlin-secret
  #   secretKey: service-account.json

  environmentConfigs:
    - name: "id-dev"
      is_default: true
      cluster: "dev"
      region: "id"
      gcp_project: "gcp-project"
      deployment_timeout: "10m"
      namespace_timeout: "2m"
      max_cpu: "8"
      max_memory: "8Gi"
      queue_resource_percentage: "20"
      is_prediction_job_enabled: true
      is_default_prediction_job: true
      default_prediction_job_config:
        executor_replica: 3
        driver_cpu_request: "2"
        driver_memory_request: "2Gi"
        executor_cpu_request: "2"
        executor_memory_request: "2Gi"
      default_deployment_config:
        min_replica: 0
        max_replica: 1
        cpu_request: "500m"
        memory_request: "500Mi"
      default_transformer_config:
        min_replica: 0
        max_replica: 1
        cpu_request: "500m"
        memory_request: "500Mi"

  sentry:
    enabled: false
    dsn: ""

  newrelic:
    enabled: false
    appname: "merlin-api-dev"
    licenseSecretName: "newrelic-license-secret"

  authorization:
    enabled: true
    serverUrl: http://mlp-authorization-keto

  encryption:
    key: "password"

  mlflow:
    # This should be the actual DNS registered
    trackingURL: "http://www.example.com"

postgresql:
  enabled: true

merlin-postgresql:
  enabled: true

  ## To use an external PostgreSQL instance uncomment the line below:
  # postgresqlHost: ""
  postgresqlUsername: merlin
  postgresqlDatabase: merlin
  # The password secret will be created using this password
  postgresqlPassword: merlin

  resources:
    requests:
      memory: 2Gi
      cpu: 500m

  persistence:
    size: 100Gi

  # metrics:
  #   enabled: true
  #   serviceMonitor:
  #     enabled: false
  # replication:
  #   enabled: false
  #   user: repl_user
  #   password: repl_password
  #   slaveReplicas: 2
  #   Set synchronous commit mode: on, off, remote_apply, remote_write and local
  #   ref: https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-WAL-LEVEL
  #   synchronousCommit: "on"
  #   From the number of `slaveReplicas` defined above, set the number of those that will have synchronous replication
  #   NOTE: It cannot be > slaveReplicas
  #   numSynchronousReplicas: 2
  #   Replication Cluster application name. Useful for defining multiple replication policies
  #   applicationName: merlin

mlflow:
  ## mlflow container name
  ##
  name: mlflow

  image:
    registry: ghcr.io
    repository: gojek/mlflow
    tag: 1.3.0
    pullPolicy: Always
  
  replicaCount: 1

  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30

  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"
    limits:
      memory: "2048Mi"

  ## The backend store is where MLflow server stores experiment
  ## and run metadata as well as params, metrics, and tags for runs.
  ## MLflow supports two types of backend stores: file store and database-backed store.
  #
  backendStoreUri: "/data/mlruns"

  ## Local or GCS URI to store artifacts in, for
  ## newly created experiments. Note that this flag
  ## does not impact already-created experiments.
  #
  artifactRoot: "/data/artifacts"

  ## Use this field to add environment variables relevant to MLflow server.
  ## These fields will be passed on to MLflow container(s) when Chart is deployed.
  #
  # extraEnvs:
  #   FOO: bar

  ## The network address to listen on (default:
  ## 127.0.0.1). Use 0.0.0.0 to bind to all
  ## addresses if you want to access the tracking
  ## server from other machines.
  #
  host: "0.0.0.0"

  ## Update strategy, can be set to RollingUpdate or onDelete by default.
  ## https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#updating-statefulsets
  #
  statefulset:
    updateStrategy: RollingUpdate

  service:
    type: ClusterIP
    externalPort: 80
    internalPort: 5000

  ingress:
    enabled: false
    class: "nginx"
    # host:
  
  # These labels help us to account for the usage and cost of each deployment used in all environments and also the teams using them.
  # For the `app` label, there will be problems relabelling them since the replication controller uses the old values.
  # Feel free to put other podLabels as you deem fit.
  #
  # podLabels:
    # environment: unknown
    # team: unknown
    # stream: unknown
    # orchestrator: unknown

mlflow-postgresql:
  enabled: true
  ## To use an external PostgreSQL instance uncomment the line below:
  ## postgresqlHost: ""
  postgresqlUsername: username
  postgresqlPassword: password
  postgresqlDatabase: mlflow
  ## Set this to your mlflow postgresql Password
  # The password secret will be created using this password
  # postgresqlPassword: ""

  replicaCount: 1

  resources:
    requests:
      cpu: 500m
      memory: 512Mi

  persistence:
    enabled: true
    size: 100Gi

swagger:
  enabled: true
  image:
    tag: v3.23.5
  apiHost: "merlin.dev"
  basePath: "/api/merlin/v1"
  service:
    internalPort: 8080
    externalPort: 8080
