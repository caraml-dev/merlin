// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// NamespaceCreator is an autogenerated mock type for the NamespaceCreator type
type NamespaceCreator struct {
	mock.Mock
}

type NamespaceCreator_CreateNamespace struct {
	*mock.Call
}

func (_m NamespaceCreator_CreateNamespace) Return(_a0 *v1.Namespace, _a1 error) *NamespaceCreator_CreateNamespace {
	return &NamespaceCreator_CreateNamespace{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *NamespaceCreator) OnCreateNamespace(ctx context.Context, namespace string) *NamespaceCreator_CreateNamespace {
	c := _m.On("CreateNamespace", ctx, namespace)
	return &NamespaceCreator_CreateNamespace{Call: c}
}

func (_m *NamespaceCreator) OnCreateNamespaceMatch(matchers ...interface{}) *NamespaceCreator_CreateNamespace {
	c := _m.On("CreateNamespace", matchers...)
	return &NamespaceCreator_CreateNamespace{Call: c}
}

// CreateNamespace provides a mock function with given fields: ctx, namespace
func (_m *NamespaceCreator) CreateNamespace(ctx context.Context, namespace string) (*v1.Namespace, error) {
	ret := _m.Called(ctx, namespace)

	var r0 *v1.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.Namespace); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
