// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	batchv1 "k8s.io/api/batch/v1"

	corev1 "k8s.io/api/core/v1"

	io "io"

	mock "github.com/stretchr/testify/mock"

	models "github.com/gojek/merlin/models"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// Delete provides a mock function with given fields: modelService
func (_m *Controller) Delete(modelService *models.Service) (*models.Service, error) {
	ret := _m.Called(modelService)

	var r0 *models.Service
	if rf, ok := ret.Get(0).(func(*models.Service) *models.Service); ok {
		r0 = rf(modelService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Service) error); ok {
		r1 = rf(modelService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJob provides a mock function with given fields: namespace, jobName, options
func (_m *Controller) DeleteJob(namespace string, jobName string, options *v1.DeleteOptions) error {
	ret := _m.Called(namespace, jobName, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *v1.DeleteOptions) error); ok {
		r0 = rf(namespace, jobName, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJobs provides a mock function with given fields: namespace, options, listOptions
func (_m *Controller) DeleteJobs(namespace string, options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	ret := _m.Called(namespace, options, listOptions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *v1.DeleteOptions, v1.ListOptions) error); ok {
		r0 = rf(namespace, options, listOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deploy provides a mock function with given fields: modelService
func (_m *Controller) Deploy(modelService *models.Service) (*models.Service, error) {
	ret := _m.Called(modelService)

	var r0 *models.Service
	if rf, ok := ret.Get(0).(func(*models.Service) *models.Service); ok {
		r0 = rf(modelService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Service) error); ok {
		r1 = rf(modelService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainers provides a mock function with given fields: namespace, labelSelector
func (_m *Controller) GetContainers(namespace string, labelSelector string) ([]*models.Container, error) {
	ret := _m.Called(namespace, labelSelector)

	var r0 []*models.Container
	if rf, ok := ret.Get(0).(func(string, string) []*models.Container); ok {
		r0 = rf(namespace, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: namespace, labelSelector
func (_m *Controller) ListJobs(namespace string, labelSelector string) (*batchv1.JobList, error) {
	ret := _m.Called(namespace, labelSelector)

	var r0 *batchv1.JobList
	if rf, ok := ret.Get(0).(func(string, string) *batchv1.JobList); ok {
		r0 = rf(namespace, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batchv1.JobList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPods provides a mock function with given fields: namespace, labelSelector
func (_m *Controller) ListPods(namespace string, labelSelector string) (*corev1.PodList, error) {
	ret := _m.Called(namespace, labelSelector)

	var r0 *corev1.PodList
	if rf, ok := ret.Get(0).(func(string, string) *corev1.PodList); ok {
		r0 = rf(namespace, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.PodList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamPodLogs provides a mock function with given fields: namespace, podName, opts
func (_m *Controller) StreamPodLogs(namespace string, podName string, opts *corev1.PodLogOptions) (io.ReadCloser, error) {
	ret := _m.Called(namespace, podName, opts)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, string, *corev1.PodLogOptions) io.ReadCloser); ok {
		r0 = rf(namespace, podName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *corev1.PodLogOptions) error); ok {
		r1 = rf(namespace, podName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
