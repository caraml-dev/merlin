// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	batchv1 "k8s.io/api/batch/v1"

	context "context"

	corev1 "k8s.io/api/core/v1"

	io "io"

	mock "github.com/stretchr/testify/mock"

	models "github.com/caraml-dev/merlin/models"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

type Controller_Delete struct {
	*mock.Call
}

func (_m Controller_Delete) Return(_a0 *models.Service, _a1 error) *Controller_Delete {
	return &Controller_Delete{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Controller) OnDelete(ctx context.Context, modelService *models.Service) *Controller_Delete {
	c := _m.On("Delete", ctx, modelService)
	return &Controller_Delete{Call: c}
}

func (_m *Controller) OnDeleteMatch(matchers ...interface{}) *Controller_Delete {
	c := _m.On("Delete", matchers...)
	return &Controller_Delete{Call: c}
}

// Delete provides a mock function with given fields: ctx, modelService
func (_m *Controller) Delete(ctx context.Context, modelService *models.Service) (*models.Service, error) {
	ret := _m.Called(ctx, modelService)

	var r0 *models.Service
	if rf, ok := ret.Get(0).(func(context.Context, *models.Service) *models.Service); ok {
		r0 = rf(ctx, modelService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Service) error); ok {
		r1 = rf(ctx, modelService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Controller_DeleteJob struct {
	*mock.Call
}

func (_m Controller_DeleteJob) Return(_a0 error) *Controller_DeleteJob {
	return &Controller_DeleteJob{Call: _m.Call.Return(_a0)}
}

func (_m *Controller) OnDeleteJob(ctx context.Context, namespace string, jobName string, deleteOptions v1.DeleteOptions) *Controller_DeleteJob {
	c := _m.On("DeleteJob", ctx, namespace, jobName, deleteOptions)
	return &Controller_DeleteJob{Call: c}
}

func (_m *Controller) OnDeleteJobMatch(matchers ...interface{}) *Controller_DeleteJob {
	c := _m.On("DeleteJob", matchers...)
	return &Controller_DeleteJob{Call: c}
}

// DeleteJob provides a mock function with given fields: ctx, namespace, jobName, deleteOptions
func (_m *Controller) DeleteJob(ctx context.Context, namespace string, jobName string, deleteOptions v1.DeleteOptions) error {
	ret := _m.Called(ctx, namespace, jobName, deleteOptions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, v1.DeleteOptions) error); ok {
		r0 = rf(ctx, namespace, jobName, deleteOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Controller_DeleteJobs struct {
	*mock.Call
}

func (_m Controller_DeleteJobs) Return(_a0 error) *Controller_DeleteJobs {
	return &Controller_DeleteJobs{Call: _m.Call.Return(_a0)}
}

func (_m *Controller) OnDeleteJobs(ctx context.Context, namespace string, deleteOptions v1.DeleteOptions, listOptions v1.ListOptions) *Controller_DeleteJobs {
	c := _m.On("DeleteJobs", ctx, namespace, deleteOptions, listOptions)
	return &Controller_DeleteJobs{Call: c}
}

func (_m *Controller) OnDeleteJobsMatch(matchers ...interface{}) *Controller_DeleteJobs {
	c := _m.On("DeleteJobs", matchers...)
	return &Controller_DeleteJobs{Call: c}
}

// DeleteJobs provides a mock function with given fields: ctx, namespace, deleteOptions, listOptions
func (_m *Controller) DeleteJobs(ctx context.Context, namespace string, deleteOptions v1.DeleteOptions, listOptions v1.ListOptions) error {
	ret := _m.Called(ctx, namespace, deleteOptions, listOptions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.DeleteOptions, v1.ListOptions) error); ok {
		r0 = rf(ctx, namespace, deleteOptions, listOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Controller_Deploy struct {
	*mock.Call
}

func (_m Controller_Deploy) Return(_a0 *models.Service, _a1 error) *Controller_Deploy {
	return &Controller_Deploy{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Controller) OnDeploy(ctx context.Context, modelService *models.Service) *Controller_Deploy {
	c := _m.On("Deploy", ctx, modelService)
	return &Controller_Deploy{Call: c}
}

func (_m *Controller) OnDeployMatch(matchers ...interface{}) *Controller_Deploy {
	c := _m.On("Deploy", matchers...)
	return &Controller_Deploy{Call: c}
}

// Deploy provides a mock function with given fields: ctx, modelService
func (_m *Controller) Deploy(ctx context.Context, modelService *models.Service) (*models.Service, error) {
	ret := _m.Called(ctx, modelService)

	var r0 *models.Service
	if rf, ok := ret.Get(0).(func(context.Context, *models.Service) *models.Service); ok {
		r0 = rf(ctx, modelService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Service) error); ok {
		r1 = rf(ctx, modelService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Controller_GetContainers struct {
	*mock.Call
}

func (_m Controller_GetContainers) Return(_a0 []*models.Container, _a1 error) *Controller_GetContainers {
	return &Controller_GetContainers{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Controller) OnGetContainers(ctx context.Context, namespace string, labelSelector string) *Controller_GetContainers {
	c := _m.On("GetContainers", ctx, namespace, labelSelector)
	return &Controller_GetContainers{Call: c}
}

func (_m *Controller) OnGetContainersMatch(matchers ...interface{}) *Controller_GetContainers {
	c := _m.On("GetContainers", matchers...)
	return &Controller_GetContainers{Call: c}
}

// GetContainers provides a mock function with given fields: ctx, namespace, labelSelector
func (_m *Controller) GetContainers(ctx context.Context, namespace string, labelSelector string) ([]*models.Container, error) {
	ret := _m.Called(ctx, namespace, labelSelector)

	var r0 []*models.Container
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*models.Container); ok {
		r0 = rf(ctx, namespace, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Controller_ListJobs struct {
	*mock.Call
}

func (_m Controller_ListJobs) Return(_a0 *batchv1.JobList, _a1 error) *Controller_ListJobs {
	return &Controller_ListJobs{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Controller) OnListJobs(ctx context.Context, namespace string, labelSelector string) *Controller_ListJobs {
	c := _m.On("ListJobs", ctx, namespace, labelSelector)
	return &Controller_ListJobs{Call: c}
}

func (_m *Controller) OnListJobsMatch(matchers ...interface{}) *Controller_ListJobs {
	c := _m.On("ListJobs", matchers...)
	return &Controller_ListJobs{Call: c}
}

// ListJobs provides a mock function with given fields: ctx, namespace, labelSelector
func (_m *Controller) ListJobs(ctx context.Context, namespace string, labelSelector string) (*batchv1.JobList, error) {
	ret := _m.Called(ctx, namespace, labelSelector)

	var r0 *batchv1.JobList
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *batchv1.JobList); ok {
		r0 = rf(ctx, namespace, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batchv1.JobList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Controller_ListPods struct {
	*mock.Call
}

func (_m Controller_ListPods) Return(_a0 *corev1.PodList, _a1 error) *Controller_ListPods {
	return &Controller_ListPods{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Controller) OnListPods(ctx context.Context, namespace string, labelSelector string) *Controller_ListPods {
	c := _m.On("ListPods", ctx, namespace, labelSelector)
	return &Controller_ListPods{Call: c}
}

func (_m *Controller) OnListPodsMatch(matchers ...interface{}) *Controller_ListPods {
	c := _m.On("ListPods", matchers...)
	return &Controller_ListPods{Call: c}
}

// ListPods provides a mock function with given fields: ctx, namespace, labelSelector
func (_m *Controller) ListPods(ctx context.Context, namespace string, labelSelector string) (*corev1.PodList, error) {
	ret := _m.Called(ctx, namespace, labelSelector)

	var r0 *corev1.PodList
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *corev1.PodList); ok {
		r0 = rf(ctx, namespace, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.PodList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Controller_StreamPodLogs struct {
	*mock.Call
}

func (_m Controller_StreamPodLogs) Return(_a0 io.ReadCloser, _a1 error) *Controller_StreamPodLogs {
	return &Controller_StreamPodLogs{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Controller) OnStreamPodLogs(ctx context.Context, namespace string, podName string, opts *corev1.PodLogOptions) *Controller_StreamPodLogs {
	c := _m.On("StreamPodLogs", ctx, namespace, podName, opts)
	return &Controller_StreamPodLogs{Call: c}
}

func (_m *Controller) OnStreamPodLogsMatch(matchers ...interface{}) *Controller_StreamPodLogs {
	c := _m.On("StreamPodLogs", matchers...)
	return &Controller_StreamPodLogs{Call: c}
}

// StreamPodLogs provides a mock function with given fields: ctx, namespace, podName, opts
func (_m *Controller) StreamPodLogs(ctx context.Context, namespace string, podName string, opts *corev1.PodLogOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, namespace, podName, opts)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *corev1.PodLogOptions) io.ReadCloser); ok {
		r0 = rf(ctx, namespace, podName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *corev1.PodLogOptions) error); ok {
		r1 = rf(ctx, namespace, podName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
