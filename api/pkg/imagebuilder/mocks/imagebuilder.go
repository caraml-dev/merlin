// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mlp "github.com/gojek/merlin/mlp"

	mock "github.com/stretchr/testify/mock"

	models "github.com/gojek/merlin/models"
)

// ImageBuilder is an autogenerated mock type for the ImageBuilder type
type ImageBuilder struct {
	mock.Mock
}

type ImageBuilder_BuildImage struct {
	*mock.Call
}

func (_m ImageBuilder_BuildImage) Return(_a0 string, _a1 error) *ImageBuilder_BuildImage {
	return &ImageBuilder_BuildImage{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ImageBuilder) OnBuildImage(ctx context.Context, project mlp.Project, model *models.Model, version *models.Version) *ImageBuilder_BuildImage {
	c := _m.On("BuildImage", ctx, project, model, version)
	return &ImageBuilder_BuildImage{Call: c}
}

func (_m *ImageBuilder) OnBuildImageMatch(matchers ...interface{}) *ImageBuilder_BuildImage {
	c := _m.On("BuildImage", matchers...)
	return &ImageBuilder_BuildImage{Call: c}
}

// BuildImage provides a mock function with given fields: ctx, project, model, version
func (_m *ImageBuilder) BuildImage(ctx context.Context, project mlp.Project, model *models.Model, version *models.Version) (string, error) {
	ret := _m.Called(ctx, project, model, version)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, mlp.Project, *models.Model, *models.Version) string); ok {
		r0 = rf(ctx, project, model, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mlp.Project, *models.Model, *models.Version) error); ok {
		r1 = rf(ctx, project, model, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ImageBuilder_GetContainers struct {
	*mock.Call
}

func (_m ImageBuilder_GetContainers) Return(_a0 []*models.Container, _a1 error) *ImageBuilder_GetContainers {
	return &ImageBuilder_GetContainers{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ImageBuilder) OnGetContainers(ctx context.Context, project mlp.Project, model *models.Model, version *models.Version) *ImageBuilder_GetContainers {
	c := _m.On("GetContainers", ctx, project, model, version)
	return &ImageBuilder_GetContainers{Call: c}
}

func (_m *ImageBuilder) OnGetContainersMatch(matchers ...interface{}) *ImageBuilder_GetContainers {
	c := _m.On("GetContainers", matchers...)
	return &ImageBuilder_GetContainers{Call: c}
}

// GetContainers provides a mock function with given fields: ctx, project, model, version
func (_m *ImageBuilder) GetContainers(ctx context.Context, project mlp.Project, model *models.Model, version *models.Version) ([]*models.Container, error) {
	ret := _m.Called(ctx, project, model, version)

	var r0 []*models.Container
	if rf, ok := ret.Get(0).(func(context.Context, mlp.Project, *models.Model, *models.Version) []*models.Container); ok {
		r0 = rf(ctx, project, model, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mlp.Project, *models.Model, *models.Version) error); ok {
		r1 = rf(ctx, project, model, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
