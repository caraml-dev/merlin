// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gsutil "github.com/caraml-dev/merlin/pkg/gsutil"
	mock "github.com/stretchr/testify/mock"
)

// GSUtil is an autogenerated mock type for the GSUtil type
type GSUtil struct {
	mock.Mock
}

// ListFiles provides a mock function with given fields: ctx, url
func (_m *GSUtil) ListFiles(ctx context.Context, url string) ([]string, error) {
	ret := _m.Called(ctx, url)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseURL provides a mock function with given fields: url
func (_m *GSUtil) ParseURL(url string) (*gsutil.URL, error) {
	ret := _m.Called(url)

	var r0 *gsutil.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gsutil.URL, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *gsutil.URL); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gsutil.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFile provides a mock function with given fields: ctx, url
func (_m *GSUtil) ReadFile(ctx context.Context, url string) ([]byte, error) {
	ret := _m.Called(ctx, url)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteFile provides a mock function with given fields: ctx, url, content
func (_m *GSUtil) WriteFile(ctx context.Context, url string, content string) error {
	ret := _m.Called(ctx, url, content)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, url, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGSUtil interface {
	mock.TestingT
	Cleanup(func())
}

// NewGSUtil creates a new instance of GSUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGSUtil(t mockConstructorTestingTNewGSUtil) *GSUtil {
	mock := &GSUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
