// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	models "github.com/caraml-dev/merlin/models"
	mock "github.com/stretchr/testify/mock"
)

// EventProducer is an autogenerated mock type for the EventProducer type
type EventProducer struct {
	mock.Mock
}

// ModelEndpointChangeEvent provides a mock function with given fields: modelEndpoint, model
func (_m *EventProducer) ModelEndpointChangeEvent(modelEndpoint *models.ModelEndpoint, model *models.Model) error {
	ret := _m.Called(modelEndpoint, model)

	if len(ret) == 0 {
		panic("no return value specified for ModelEndpointChangeEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ModelEndpoint, *models.Model) error); ok {
		r0 = rf(modelEndpoint, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VersionEndpointChangeEvent provides a mock function with given fields: versionEndpoint, model
func (_m *EventProducer) VersionEndpointChangeEvent(versionEndpoint *models.VersionEndpoint, model *models.Model) error {
	ret := _m.Called(versionEndpoint, model)

	if len(ret) == 0 {
		panic("no return value specified for VersionEndpointChangeEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.VersionEndpoint, *models.Model) error); ok {
		r0 = rf(versionEndpoint, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEventProducer creates a new instance of EventProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventProducer {
	mock := &EventProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
