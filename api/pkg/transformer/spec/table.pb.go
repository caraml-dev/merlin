// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: transformer/spec/table.proto

package spec

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SortOrder int32

const (
	SortOrder_ASC  SortOrder = 0
	SortOrder_DESC SortOrder = 1
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	SortOrder_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_transformer_spec_table_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_transformer_spec_table_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{0}
}

type JoinMethod int32

const (
	JoinMethod_INVALID_JOIN JoinMethod = 0
	JoinMethod_LEFT         JoinMethod = 1
	JoinMethod_RIGHT        JoinMethod = 2
	JoinMethod_INNER        JoinMethod = 3
	JoinMethod_OUTER        JoinMethod = 4
	JoinMethod_CROSS        JoinMethod = 5
	JoinMethod_CONCAT       JoinMethod = 6
)

// Enum value maps for JoinMethod.
var (
	JoinMethod_name = map[int32]string{
		0: "INVALID_JOIN",
		1: "LEFT",
		2: "RIGHT",
		3: "INNER",
		4: "OUTER",
		5: "CROSS",
		6: "CONCAT",
	}
	JoinMethod_value = map[string]int32{
		"INVALID_JOIN": 0,
		"LEFT":         1,
		"RIGHT":        2,
		"INNER":        3,
		"OUTER":        4,
		"CROSS":        5,
		"CONCAT":       6,
	}
)

func (x JoinMethod) Enum() *JoinMethod {
	p := new(JoinMethod)
	*p = x
	return p
}

func (x JoinMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_transformer_spec_table_proto_enumTypes[1].Descriptor()
}

func (JoinMethod) Type() protoreflect.EnumType {
	return &file_transformer_spec_table_proto_enumTypes[1]
}

func (x JoinMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinMethod.Descriptor instead.
func (JoinMethod) EnumDescriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{1}
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BaseTable *BaseTable `protobuf:"bytes,2,opt,name=baseTable,proto3" json:"baseTable,omitempty"`
	Columns   []*Column  `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{0}
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Table) GetBaseTable() *BaseTable {
	if x != nil {
		return x.BaseTable
	}
	return nil
}

func (x *Table) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type BaseTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BaseTable:
	//	*BaseTable_FromJson
	//	*BaseTable_FromTable
	BaseTable isBaseTable_BaseTable `protobuf_oneof:"baseTable"`
}

func (x *BaseTable) Reset() {
	*x = BaseTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseTable) ProtoMessage() {}

func (x *BaseTable) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseTable.ProtoReflect.Descriptor instead.
func (*BaseTable) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{1}
}

func (m *BaseTable) GetBaseTable() isBaseTable_BaseTable {
	if m != nil {
		return m.BaseTable
	}
	return nil
}

func (x *BaseTable) GetFromJson() *FromJson {
	if x, ok := x.GetBaseTable().(*BaseTable_FromJson); ok {
		return x.FromJson
	}
	return nil
}

func (x *BaseTable) GetFromTable() *FromTable {
	if x, ok := x.GetBaseTable().(*BaseTable_FromTable); ok {
		return x.FromTable
	}
	return nil
}

type isBaseTable_BaseTable interface {
	isBaseTable_BaseTable()
}

type BaseTable_FromJson struct {
	FromJson *FromJson `protobuf:"bytes,1,opt,name=fromJson,proto3,oneof"`
}

type BaseTable_FromTable struct {
	FromTable *FromTable `protobuf:"bytes,2,opt,name=fromTable,proto3,oneof"`
}

func (*BaseTable_FromJson) isBaseTable_BaseTable() {}

func (*BaseTable_FromTable) isBaseTable_BaseTable() {}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to ColumnValue:
	//	*Column_FromJson
	//	*Column_Expression
	ColumnValue isColumn_ColumnValue `protobuf_oneof:"columnValue"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{2}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Column) GetColumnValue() isColumn_ColumnValue {
	if m != nil {
		return m.ColumnValue
	}
	return nil
}

func (x *Column) GetFromJson() *FromJson {
	if x, ok := x.GetColumnValue().(*Column_FromJson); ok {
		return x.FromJson
	}
	return nil
}

func (x *Column) GetExpression() string {
	if x, ok := x.GetColumnValue().(*Column_Expression); ok {
		return x.Expression
	}
	return ""
}

type isColumn_ColumnValue interface {
	isColumn_ColumnValue()
}

type Column_FromJson struct {
	FromJson *FromJson `protobuf:"bytes,2,opt,name=fromJson,proto3,oneof"`
}

type Column_Expression struct {
	Expression string `protobuf:"bytes,3,opt,name=expression,proto3,oneof"`
}

func (*Column_FromJson) isColumn_ColumnValue() {}

func (*Column_Expression) isColumn_ColumnValue() {}

type TableTransformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputTable  string                `protobuf:"bytes,1,opt,name=inputTable,proto3" json:"inputTable,omitempty"`
	OutputTable string                `protobuf:"bytes,2,opt,name=outputTable,proto3" json:"outputTable,omitempty"`
	Steps       []*TransformationStep `protobuf:"bytes,3,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *TableTransformation) Reset() {
	*x = TableTransformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableTransformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableTransformation) ProtoMessage() {}

func (x *TableTransformation) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableTransformation.ProtoReflect.Descriptor instead.
func (*TableTransformation) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{3}
}

func (x *TableTransformation) GetInputTable() string {
	if x != nil {
		return x.InputTable
	}
	return ""
}

func (x *TableTransformation) GetOutputTable() string {
	if x != nil {
		return x.OutputTable
	}
	return ""
}

func (x *TableTransformation) GetSteps() []*TransformationStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

type TransformationStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropColumns   []string          `protobuf:"bytes,1,rep,name=dropColumns,proto3" json:"dropColumns,omitempty"`
	SelectColumns []string          `protobuf:"bytes,2,rep,name=selectColumns,proto3" json:"selectColumns,omitempty"`
	Sort          []*SortColumnRule `protobuf:"bytes,3,rep,name=sort,proto3" json:"sort,omitempty"`
	RenameColumns map[string]string `protobuf:"bytes,4,rep,name=renameColumns,proto3" json:"renameColumns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UpdateColumns []*UpdateColumn   `protobuf:"bytes,5,rep,name=updateColumns,proto3" json:"updateColumns,omitempty"`
	ScaleColumns  []*ScaleColumn    `protobuf:"bytes,6,rep,name=scaleColumns,proto3" json:"scaleColumns,omitempty"`
	EncodeColumns []*EncodeColumn   `protobuf:"bytes,7,rep,name=encodeColumns,proto3" json:"encodeColumns,omitempty"`
	FilterRow     *FilterRow        `protobuf:"bytes,8,opt,name=filterRow,proto3" json:"filterRow,omitempty"`
	SliceRow      *SliceRow         `protobuf:"bytes,9,opt,name=sliceRow,proto3" json:"sliceRow,omitempty"`
}

func (x *TransformationStep) Reset() {
	*x = TransformationStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformationStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformationStep) ProtoMessage() {}

func (x *TransformationStep) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformationStep.ProtoReflect.Descriptor instead.
func (*TransformationStep) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{4}
}

func (x *TransformationStep) GetDropColumns() []string {
	if x != nil {
		return x.DropColumns
	}
	return nil
}

func (x *TransformationStep) GetSelectColumns() []string {
	if x != nil {
		return x.SelectColumns
	}
	return nil
}

func (x *TransformationStep) GetSort() []*SortColumnRule {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *TransformationStep) GetRenameColumns() map[string]string {
	if x != nil {
		return x.RenameColumns
	}
	return nil
}

func (x *TransformationStep) GetUpdateColumns() []*UpdateColumn {
	if x != nil {
		return x.UpdateColumns
	}
	return nil
}

func (x *TransformationStep) GetScaleColumns() []*ScaleColumn {
	if x != nil {
		return x.ScaleColumns
	}
	return nil
}

func (x *TransformationStep) GetEncodeColumns() []*EncodeColumn {
	if x != nil {
		return x.EncodeColumns
	}
	return nil
}

func (x *TransformationStep) GetFilterRow() *FilterRow {
	if x != nil {
		return x.FilterRow
	}
	return nil
}

func (x *TransformationStep) GetSliceRow() *SliceRow {
	if x != nil {
		return x.SliceRow
	}
	return nil
}

type FilterRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *FilterRow) Reset() {
	*x = FilterRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRow) ProtoMessage() {}

func (x *FilterRow) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRow.ProtoReflect.Descriptor instead.
func (*FilterRow) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{5}
}

func (x *FilterRow) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

type SliceRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *SliceRow) Reset() {
	*x = SliceRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceRow) ProtoMessage() {}

func (x *SliceRow) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceRow.ProtoReflect.Descriptor instead.
func (*SliceRow) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{6}
}

func (x *SliceRow) GetStart() *wrapperspb.Int32Value {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *SliceRow) GetEnd() *wrapperspb.Int32Value {
	if x != nil {
		return x.End
	}
	return nil
}

type SortColumnRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string    `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Order  SortOrder `protobuf:"varint,2,opt,name=order,proto3,enum=merlin.transformer.SortOrder" json:"order,omitempty"`
}

func (x *SortColumnRule) Reset() {
	*x = SortColumnRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortColumnRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortColumnRule) ProtoMessage() {}

func (x *SortColumnRule) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortColumnRule.ProtoReflect.Descriptor instead.
func (*SortColumnRule) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{7}
}

func (x *SortColumnRule) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *SortColumnRule) GetOrder() SortOrder {
	if x != nil {
		return x.Order
	}
	return SortOrder_ASC
}

type UpdateColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column     string             `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Expression string             `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	Conditions []*ColumnCondition `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *UpdateColumn) Reset() {
	*x = UpdateColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateColumn) ProtoMessage() {}

func (x *UpdateColumn) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateColumn.ProtoReflect.Descriptor instead.
func (*UpdateColumn) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateColumn) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *UpdateColumn) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *UpdateColumn) GetConditions() []*ColumnCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type ColumnCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowSelector string              `protobuf:"bytes,1,opt,name=rowSelector,proto3" json:"rowSelector,omitempty"`
	Expression  string              `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	Default     *DefaultColumnValue `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *ColumnCondition) Reset() {
	*x = ColumnCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnCondition) ProtoMessage() {}

func (x *ColumnCondition) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnCondition.ProtoReflect.Descriptor instead.
func (*ColumnCondition) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{9}
}

func (x *ColumnCondition) GetRowSelector() string {
	if x != nil {
		return x.RowSelector
	}
	return ""
}

func (x *ColumnCondition) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *ColumnCondition) GetDefault() *DefaultColumnValue {
	if x != nil {
		return x.Default
	}
	return nil
}

type DefaultColumnValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *DefaultColumnValue) Reset() {
	*x = DefaultColumnValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultColumnValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultColumnValue) ProtoMessage() {}

func (x *DefaultColumnValue) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultColumnValue.ProtoReflect.Descriptor instead.
func (*DefaultColumnValue) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{10}
}

func (x *DefaultColumnValue) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type TableJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftTable   string     `protobuf:"bytes,1,opt,name=leftTable,proto3" json:"leftTable,omitempty"`
	RightTable  string     `protobuf:"bytes,2,opt,name=rightTable,proto3" json:"rightTable,omitempty"`
	OutputTable string     `protobuf:"bytes,3,opt,name=outputTable,proto3" json:"outputTable,omitempty"`
	How         JoinMethod `protobuf:"varint,4,opt,name=how,proto3,enum=merlin.transformer.JoinMethod" json:"how,omitempty"`
	OnColumn    string     `protobuf:"bytes,5,opt,name=onColumn,proto3" json:"onColumn,omitempty"`
	OnColumns   []string   `protobuf:"bytes,6,rep,name=onColumns,proto3" json:"onColumns,omitempty"`
}

func (x *TableJoin) Reset() {
	*x = TableJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableJoin) ProtoMessage() {}

func (x *TableJoin) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableJoin.ProtoReflect.Descriptor instead.
func (*TableJoin) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{11}
}

func (x *TableJoin) GetLeftTable() string {
	if x != nil {
		return x.LeftTable
	}
	return ""
}

func (x *TableJoin) GetRightTable() string {
	if x != nil {
		return x.RightTable
	}
	return ""
}

func (x *TableJoin) GetOutputTable() string {
	if x != nil {
		return x.OutputTable
	}
	return ""
}

func (x *TableJoin) GetHow() JoinMethod {
	if x != nil {
		return x.How
	}
	return JoinMethod_INVALID_JOIN
}

func (x *TableJoin) GetOnColumn() string {
	if x != nil {
		return x.OnColumn
	}
	return ""
}

func (x *TableJoin) GetOnColumns() []string {
	if x != nil {
		return x.OnColumns
	}
	return nil
}

type ScaleColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	// Types that are assignable to ScalerConfig:
	//	*ScaleColumn_StandardScalerConfig
	//	*ScaleColumn_MinMaxScalerConfig
	ScalerConfig isScaleColumn_ScalerConfig `protobuf_oneof:"scalerConfig"`
}

func (x *ScaleColumn) Reset() {
	*x = ScaleColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleColumn) ProtoMessage() {}

func (x *ScaleColumn) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleColumn.ProtoReflect.Descriptor instead.
func (*ScaleColumn) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{12}
}

func (x *ScaleColumn) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (m *ScaleColumn) GetScalerConfig() isScaleColumn_ScalerConfig {
	if m != nil {
		return m.ScalerConfig
	}
	return nil
}

func (x *ScaleColumn) GetStandardScalerConfig() *StandardScalerConfig {
	if x, ok := x.GetScalerConfig().(*ScaleColumn_StandardScalerConfig); ok {
		return x.StandardScalerConfig
	}
	return nil
}

func (x *ScaleColumn) GetMinMaxScalerConfig() *MinMaxScalerConfig {
	if x, ok := x.GetScalerConfig().(*ScaleColumn_MinMaxScalerConfig); ok {
		return x.MinMaxScalerConfig
	}
	return nil
}

type isScaleColumn_ScalerConfig interface {
	isScaleColumn_ScalerConfig()
}

type ScaleColumn_StandardScalerConfig struct {
	StandardScalerConfig *StandardScalerConfig `protobuf:"bytes,2,opt,name=standardScalerConfig,proto3,oneof"`
}

type ScaleColumn_MinMaxScalerConfig struct {
	MinMaxScalerConfig *MinMaxScalerConfig `protobuf:"bytes,3,opt,name=minMaxScalerConfig,proto3,oneof"`
}

func (*ScaleColumn_StandardScalerConfig) isScaleColumn_ScalerConfig() {}

func (*ScaleColumn_MinMaxScalerConfig) isScaleColumn_ScalerConfig() {}

type EncodeColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Encoder string   `protobuf:"bytes,2,opt,name=encoder,proto3" json:"encoder,omitempty"`
}

func (x *EncodeColumn) Reset() {
	*x = EncodeColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transformer_spec_table_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeColumn) ProtoMessage() {}

func (x *EncodeColumn) ProtoReflect() protoreflect.Message {
	mi := &file_transformer_spec_table_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeColumn.ProtoReflect.Descriptor instead.
func (*EncodeColumn) Descriptor() ([]byte, []int) {
	return file_transformer_spec_table_proto_rawDescGZIP(), []int{13}
}

func (x *EncodeColumn) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *EncodeColumn) GetEncoder() string {
	if x != nil {
		return x.Encoder
	}
	return ""
}

var File_transformer_spec_table_proto protoreflect.FileDescriptor

var file_transformer_spec_table_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2f, 0x73, 0x70,
	0x65, 0x63, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x1a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2f,
	0x73, 0x70, 0x65, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2f, 0x73,
	0x70, 0x65, 0x63, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8e, 0x01, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4a, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x46, 0x72,
	0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x83, 0x05, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x5f, 0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65,
	0x70, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x46, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x6f,
	0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x77, 0x1a,
	0x40, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x29, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x08,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x5d, 0x0a, 0x0e, 0x53, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x6f, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x6f, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22,
	0x34, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4a,
	0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x68, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x03, 0x68, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22,
	0xef, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x5e, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x14, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x4d, 0x61,
	0x78, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x6d,
	0x69, 0x6e, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x42, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x2a, 0x1e, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x60, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e,
	0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4f, 0x4e, 0x43, 0x41, 0x54, 0x10, 0x06, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6a, 0x65, 0x6b, 0x2f, 0x6d, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transformer_spec_table_proto_rawDescOnce sync.Once
	file_transformer_spec_table_proto_rawDescData = file_transformer_spec_table_proto_rawDesc
)

func file_transformer_spec_table_proto_rawDescGZIP() []byte {
	file_transformer_spec_table_proto_rawDescOnce.Do(func() {
		file_transformer_spec_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_transformer_spec_table_proto_rawDescData)
	})
	return file_transformer_spec_table_proto_rawDescData
}

var file_transformer_spec_table_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_transformer_spec_table_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_transformer_spec_table_proto_goTypes = []interface{}{
	(SortOrder)(0),                // 0: merlin.transformer.SortOrder
	(JoinMethod)(0),               // 1: merlin.transformer.JoinMethod
	(*Table)(nil),                 // 2: merlin.transformer.Table
	(*BaseTable)(nil),             // 3: merlin.transformer.BaseTable
	(*Column)(nil),                // 4: merlin.transformer.Column
	(*TableTransformation)(nil),   // 5: merlin.transformer.TableTransformation
	(*TransformationStep)(nil),    // 6: merlin.transformer.TransformationStep
	(*FilterRow)(nil),             // 7: merlin.transformer.FilterRow
	(*SliceRow)(nil),              // 8: merlin.transformer.SliceRow
	(*SortColumnRule)(nil),        // 9: merlin.transformer.SortColumnRule
	(*UpdateColumn)(nil),          // 10: merlin.transformer.UpdateColumn
	(*ColumnCondition)(nil),       // 11: merlin.transformer.ColumnCondition
	(*DefaultColumnValue)(nil),    // 12: merlin.transformer.DefaultColumnValue
	(*TableJoin)(nil),             // 13: merlin.transformer.TableJoin
	(*ScaleColumn)(nil),           // 14: merlin.transformer.ScaleColumn
	(*EncodeColumn)(nil),          // 15: merlin.transformer.EncodeColumn
	nil,                           // 16: merlin.transformer.TransformationStep.RenameColumnsEntry
	(*FromJson)(nil),              // 17: merlin.transformer.FromJson
	(*FromTable)(nil),             // 18: merlin.transformer.FromTable
	(*wrapperspb.Int32Value)(nil), // 19: google.protobuf.Int32Value
	(*StandardScalerConfig)(nil),  // 20: merlin.transformer.StandardScalerConfig
	(*MinMaxScalerConfig)(nil),    // 21: merlin.transformer.MinMaxScalerConfig
}
var file_transformer_spec_table_proto_depIdxs = []int32{
	3,  // 0: merlin.transformer.Table.baseTable:type_name -> merlin.transformer.BaseTable
	4,  // 1: merlin.transformer.Table.columns:type_name -> merlin.transformer.Column
	17, // 2: merlin.transformer.BaseTable.fromJson:type_name -> merlin.transformer.FromJson
	18, // 3: merlin.transformer.BaseTable.fromTable:type_name -> merlin.transformer.FromTable
	17, // 4: merlin.transformer.Column.fromJson:type_name -> merlin.transformer.FromJson
	6,  // 5: merlin.transformer.TableTransformation.steps:type_name -> merlin.transformer.TransformationStep
	9,  // 6: merlin.transformer.TransformationStep.sort:type_name -> merlin.transformer.SortColumnRule
	16, // 7: merlin.transformer.TransformationStep.renameColumns:type_name -> merlin.transformer.TransformationStep.RenameColumnsEntry
	10, // 8: merlin.transformer.TransformationStep.updateColumns:type_name -> merlin.transformer.UpdateColumn
	14, // 9: merlin.transformer.TransformationStep.scaleColumns:type_name -> merlin.transformer.ScaleColumn
	15, // 10: merlin.transformer.TransformationStep.encodeColumns:type_name -> merlin.transformer.EncodeColumn
	7,  // 11: merlin.transformer.TransformationStep.filterRow:type_name -> merlin.transformer.FilterRow
	8,  // 12: merlin.transformer.TransformationStep.sliceRow:type_name -> merlin.transformer.SliceRow
	19, // 13: merlin.transformer.SliceRow.start:type_name -> google.protobuf.Int32Value
	19, // 14: merlin.transformer.SliceRow.end:type_name -> google.protobuf.Int32Value
	0,  // 15: merlin.transformer.SortColumnRule.order:type_name -> merlin.transformer.SortOrder
	11, // 16: merlin.transformer.UpdateColumn.conditions:type_name -> merlin.transformer.ColumnCondition
	12, // 17: merlin.transformer.ColumnCondition.default:type_name -> merlin.transformer.DefaultColumnValue
	1,  // 18: merlin.transformer.TableJoin.how:type_name -> merlin.transformer.JoinMethod
	20, // 19: merlin.transformer.ScaleColumn.standardScalerConfig:type_name -> merlin.transformer.StandardScalerConfig
	21, // 20: merlin.transformer.ScaleColumn.minMaxScalerConfig:type_name -> merlin.transformer.MinMaxScalerConfig
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_transformer_spec_table_proto_init() }
func file_transformer_spec_table_proto_init() {
	if File_transformer_spec_table_proto != nil {
		return
	}
	file_transformer_spec_common_proto_init()
	file_transformer_spec_scaler_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_transformer_spec_table_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableTransformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformationStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortColumnRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultColumnValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transformer_spec_table_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transformer_spec_table_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*BaseTable_FromJson)(nil),
		(*BaseTable_FromTable)(nil),
	}
	file_transformer_spec_table_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Column_FromJson)(nil),
		(*Column_Expression)(nil),
	}
	file_transformer_spec_table_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ScaleColumn_StandardScalerConfig)(nil),
		(*ScaleColumn_MinMaxScalerConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transformer_spec_table_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transformer_spec_table_proto_goTypes,
		DependencyIndexes: file_transformer_spec_table_proto_depIdxs,
		EnumInfos:         file_transformer_spec_table_proto_enumTypes,
		MessageInfos:      file_transformer_spec_table_proto_msgTypes,
	}.Build()
	File_transformer_spec_table_proto = out.File
	file_transformer_spec_table_proto_rawDesc = nil
	file_transformer_spec_table_proto_goTypes = nil
	file_transformer_spec_table_proto_depIdxs = nil
}
