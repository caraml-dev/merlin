// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	symbol "github.com/caraml-dev/merlin/pkg/transformer/symbol"
	mock "github.com/stretchr/testify/mock"

	types "github.com/caraml-dev/merlin/pkg/transformer/types"
)

// FeatureRetriever is an autogenerated mock type for the FeatureRetriever type
type FeatureRetriever struct {
	mock.Mock
}

// RetrieveFeatureUsingRequest provides a mock function with given fields: ctx, requestJson
func (_m *FeatureRetriever) RetrieveFeatureOfEntityInRequest(ctx context.Context, requestJson types.JSONObject) ([]*types.FeatureTable, error) {
	ret := _m.Called(ctx, requestJson)

	var r0 []*types.FeatureTable
	if rf, ok := ret.Get(0).(func(context.Context, types.JSONObject) []*types.FeatureTable); ok {
		r0 = rf(ctx, requestJson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.FeatureTable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.JSONObject) error); ok {
		r1 = rf(ctx, requestJson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveFeatureUsingSymbolRegistry provides a mock function with given fields: ctx, symbolRegistry
func (_m *FeatureRetriever) RetrieveFeatureOfEntityInSymbolRegistry(ctx context.Context, symbolRegistry symbol.Registry) ([]*types.FeatureTable, error) {
	ret := _m.Called(ctx, symbolRegistry)

	var r0 []*types.FeatureTable
	if rf, ok := ret.Get(0).(func(context.Context, symbol.Registry) []*types.FeatureTable); ok {
		r0 = rf(ctx, symbolRegistry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.FeatureTable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, symbol.Registry) error); ok {
		r1 = rf(ctx, symbolRegistry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
