// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import core "github.com/feast-dev/feast/sdk/go/protos/feast/core"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"

// CoreServiceClient is an autogenerated mock type for the CoreServiceClient type
type CoreServiceClient struct {
	mock.Mock
}

// ApplyEntity provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) ApplyEntity(ctx context.Context, in *core.ApplyEntityRequest, opts ...grpc.CallOption) (*core.ApplyEntityResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.ApplyEntityResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ApplyEntityRequest, ...grpc.CallOption) *core.ApplyEntityResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ApplyEntityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ApplyEntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyFeatureTable provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) ApplyFeatureTable(ctx context.Context, in *core.ApplyFeatureTableRequest, opts ...grpc.CallOption) (*core.ApplyFeatureTableResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.ApplyFeatureTableResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ApplyFeatureTableRequest, ...grpc.CallOption) *core.ApplyFeatureTableResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ApplyFeatureTableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ApplyFeatureTableRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArchiveProject provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) ArchiveProject(ctx context.Context, in *core.ArchiveProjectRequest, opts ...grpc.CallOption) (*core.ArchiveProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.ArchiveProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ArchiveProjectRequest, ...grpc.CallOption) *core.ArchiveProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ArchiveProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ArchiveProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) CreateProject(ctx context.Context, in *core.CreateProjectRequest, opts ...grpc.CallOption) (*core.CreateProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.CreateProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.CreateProjectRequest, ...grpc.CallOption) *core.CreateProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CreateProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.CreateProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFeatureTable provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) DeleteFeatureTable(ctx context.Context, in *core.DeleteFeatureTableRequest, opts ...grpc.CallOption) (*core.DeleteFeatureTableResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.DeleteFeatureTableResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.DeleteFeatureTableRequest, ...grpc.CallOption) *core.DeleteFeatureTableResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.DeleteFeatureTableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.DeleteFeatureTableRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntity provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) GetEntity(ctx context.Context, in *core.GetEntityRequest, opts ...grpc.CallOption) (*core.GetEntityResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.GetEntityResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.GetEntityRequest, ...grpc.CallOption) *core.GetEntityResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GetEntityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.GetEntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeastCoreVersion provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) GetFeastCoreVersion(ctx context.Context, in *core.GetFeastCoreVersionRequest, opts ...grpc.CallOption) (*core.GetFeastCoreVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.GetFeastCoreVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.GetFeastCoreVersionRequest, ...grpc.CallOption) *core.GetFeastCoreVersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GetFeastCoreVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.GetFeastCoreVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeatureTable provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) GetFeatureTable(ctx context.Context, in *core.GetFeatureTableRequest, opts ...grpc.CallOption) (*core.GetFeatureTableResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.GetFeatureTableResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.GetFeatureTableRequest, ...grpc.CallOption) *core.GetFeatureTableResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GetFeatureTableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.GetFeatureTableRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEntities provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) ListEntities(ctx context.Context, in *core.ListEntitiesRequest, opts ...grpc.CallOption) (*core.ListEntitiesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.ListEntitiesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListEntitiesRequest, ...grpc.CallOption) *core.ListEntitiesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ListEntitiesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ListEntitiesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFeatureTables provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) ListFeatureTables(ctx context.Context, in *core.ListFeatureTablesRequest, opts ...grpc.CallOption) (*core.ListFeatureTablesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.ListFeatureTablesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListFeatureTablesRequest, ...grpc.CallOption) *core.ListFeatureTablesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ListFeatureTablesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ListFeatureTablesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFeatures provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) ListFeatures(ctx context.Context, in *core.ListFeaturesRequest, opts ...grpc.CallOption) (*core.ListFeaturesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.ListFeaturesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListFeaturesRequest, ...grpc.CallOption) *core.ListFeaturesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ListFeaturesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ListFeaturesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) ListProjects(ctx context.Context, in *core.ListProjectsRequest, opts ...grpc.CallOption) (*core.ListProjectsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.ListProjectsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListProjectsRequest, ...grpc.CallOption) *core.ListProjectsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ListProjectsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ListProjectsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStores provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) ListStores(ctx context.Context, in *core.ListStoresRequest, opts ...grpc.CallOption) (*core.ListStoresResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.ListStoresResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListStoresRequest, ...grpc.CallOption) *core.ListStoresResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ListStoresResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ListStoresRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStore provides a mock function with given fields: ctx, in, opts
func (_m *CoreServiceClient) UpdateStore(ctx context.Context, in *core.UpdateStoreRequest, opts ...grpc.CallOption) (*core.UpdateStoreResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *core.UpdateStoreResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.UpdateStoreRequest, ...grpc.CallOption) *core.UpdateStoreResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.UpdateStoreResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.UpdateStoreRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
