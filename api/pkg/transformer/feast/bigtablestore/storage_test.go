package bigtablestore

import (
	"context"

	"cloud.google.com/go/bigtable"
	"github.com/stretchr/testify/mock"
)

// storageMock is an autogenerated mock type for the storage type
type storageMock struct {
	mock.Mock
}

// readRow provides a mock function with given fields: ctx, row
func (_m *storageMock) readRow(ctx context.Context, row string) (bigtable.Row, error) {
	ret := _m.Called(ctx, row)

	var r0 bigtable.Row
	if rf, ok := ret.Get(0).(func(context.Context, string) bigtable.Row); ok {
		r0 = rf(ctx, row)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bigtable.Row)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, row)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// readRows provides a mock function with given fields: ctx, rowList, filter
func (_m *storageMock) readRows(ctx context.Context, rowList *bigtable.RowList, filter bigtable.Filter) ([]bigtable.Row, error) {
	ret := _m.Called(ctx, rowList, filter)

	var r0 []bigtable.Row
	if rf, ok := ret.Get(0).(func(context.Context, *bigtable.RowList, bigtable.Filter) []bigtable.Row); ok {
		r0 = rf(ctx, rowList, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bigtable.Row)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bigtable.RowList, bigtable.Filter) error); ok {
		r1 = rf(ctx, rowList, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
