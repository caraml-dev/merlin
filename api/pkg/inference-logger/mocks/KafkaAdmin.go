// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	kafka "github.com/confluentinc/confluent-kafka-go/v2/kafka"

	mock "github.com/stretchr/testify/mock"
)

// KafkaAdmin is an autogenerated mock type for the KafkaAdmin type
type KafkaAdmin struct {
	mock.Mock
}

// CreateTopics provides a mock function with given fields: _a0, _a1, _a2
func (_m *KafkaAdmin) CreateTopics(_a0 context.Context, _a1 []kafka.TopicSpecification, _a2 ...kafka.CreateTopicsAdminOption) ([]kafka.TopicResult, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []kafka.TopicResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []kafka.TopicSpecification, ...kafka.CreateTopicsAdminOption) ([]kafka.TopicResult, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []kafka.TopicSpecification, ...kafka.CreateTopicsAdminOption) []kafka.TopicResult); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []kafka.TopicSpecification, ...kafka.CreateTopicsAdminOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKafkaAdmin creates a new instance of KafkaAdmin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaAdmin(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaAdmin {
	mock := &KafkaAdmin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
