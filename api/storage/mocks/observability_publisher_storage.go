// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/caraml-dev/merlin/models"
	mock "github.com/stretchr/testify/mock"
)

// ObservabilityPublisherStorage is an autogenerated mock type for the ObservabilityPublisherStorage type
type ObservabilityPublisherStorage struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, publisher
func (_m *ObservabilityPublisherStorage) Create(ctx context.Context, publisher *models.ObservabilityPublisher) (*models.ObservabilityPublisher, error) {
	ret := _m.Called(ctx, publisher)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.ObservabilityPublisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ObservabilityPublisher) (*models.ObservabilityPublisher, error)); ok {
		return rf(ctx, publisher)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.ObservabilityPublisher) *models.ObservabilityPublisher); ok {
		r0 = rf(ctx, publisher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ObservabilityPublisher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.ObservabilityPublisher) error); ok {
		r1 = rf(ctx, publisher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, publisherID
func (_m *ObservabilityPublisherStorage) Get(ctx context.Context, publisherID models.ID) (*models.ObservabilityPublisher, error) {
	ret := _m.Called(ctx, publisherID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.ObservabilityPublisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) (*models.ObservabilityPublisher, error)); ok {
		return rf(ctx, publisherID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) *models.ObservabilityPublisher); ok {
		r0 = rf(ctx, publisherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ObservabilityPublisher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ID) error); ok {
		r1 = rf(ctx, publisherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByModelID provides a mock function with given fields: ctx, modelID
func (_m *ObservabilityPublisherStorage) GetByModelID(ctx context.Context, modelID models.ID) (*models.ObservabilityPublisher, error) {
	ret := _m.Called(ctx, modelID)

	if len(ret) == 0 {
		panic("no return value specified for GetByModelID")
	}

	var r0 *models.ObservabilityPublisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) (*models.ObservabilityPublisher, error)); ok {
		return rf(ctx, modelID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) *models.ObservabilityPublisher); ok {
		r0 = rf(ctx, modelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ObservabilityPublisher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ID) error); ok {
		r1 = rf(ctx, modelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, publisher, increseRevision
func (_m *ObservabilityPublisherStorage) Update(ctx context.Context, publisher *models.ObservabilityPublisher, increseRevision bool) (*models.ObservabilityPublisher, error) {
	ret := _m.Called(ctx, publisher, increseRevision)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.ObservabilityPublisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ObservabilityPublisher, bool) (*models.ObservabilityPublisher, error)); ok {
		return rf(ctx, publisher, increseRevision)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.ObservabilityPublisher, bool) *models.ObservabilityPublisher); ok {
		r0 = rf(ctx, publisher, increseRevision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ObservabilityPublisher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.ObservabilityPublisher, bool) error); ok {
		r1 = rf(ctx, publisher, increseRevision)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewObservabilityPublisherStorage creates a new instance of ObservabilityPublisherStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObservabilityPublisherStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObservabilityPublisherStorage {
	mock := &ObservabilityPublisherStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
