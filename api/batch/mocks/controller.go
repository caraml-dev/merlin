// Code generated by mockery v2.0.4. DO NOT EDIT.

package mocks

import (
	models "github.com/caraml-dev/merlin/models"
	mock "github.com/stretchr/testify/mock"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// GetContainers provides a mock function with given fields: namespace, labelSelector
func (_m *Controller) GetContainers(namespace string, labelSelector string) ([]*models.Container, error) {
	ret := _m.Called(namespace, labelSelector)

	var r0 []*models.Container
	if rf, ok := ret.Get(0).(func(string, string) []*models.Container); ok {
		r0 = rf(namespace, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Run provides a mock function with given fields: stopCh
func (_m *Controller) Run(stopCh <-chan struct{}) {
	_m.Called(stopCh)
}

// Stop provides a mock function with given fields: predictionJob, namespace
func (_m *Controller) Stop(predictionJob *models.PredictionJob, namespace string) error {
	ret := _m.Called(predictionJob, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.PredictionJob, string) error); ok {
		r0 = rf(predictionJob, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Submit provides a mock function with given fields: predictionJob, namespace
func (_m *Controller) Submit(predictionJob *models.PredictionJob, namespace string) error {
	ret := _m.Called(predictionJob, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.PredictionJob, string) error); ok {
		r0 = rf(predictionJob, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
