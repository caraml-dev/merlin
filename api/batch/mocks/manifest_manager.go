// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	spec "github.com/caraml-dev/merlin-pyspark-app/pkg/spec"
	mock "github.com/stretchr/testify/mock"
)

// ManifestManager is an autogenerated mock type for the ManifestManager type
type ManifestManager struct {
	mock.Mock
}

// CreateDriverAuthorization provides a mock function with given fields: ctx, namespace
func (_m *ManifestManager) CreateDriverAuthorization(ctx context.Context, namespace string) (string, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for CreateDriverAuthorization")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, namespace)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobSpec provides a mock function with given fields: ctx, predictionJobName, namespace, _a3
func (_m *ManifestManager) CreateJobSpec(ctx context.Context, predictionJobName string, namespace string, _a3 *spec.PredictionJob) (string, error) {
	ret := _m.Called(ctx, predictionJobName, namespace, _a3)

	if len(ret) == 0 {
		panic("no return value specified for CreateJobSpec")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *spec.PredictionJob) (string, error)); ok {
		return rf(ctx, predictionJobName, namespace, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *spec.PredictionJob) string); ok {
		r0 = rf(ctx, predictionJobName, namespace, _a3)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *spec.PredictionJob) error); ok {
		r1 = rf(ctx, predictionJobName, namespace, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecret provides a mock function with given fields: ctx, predictionJobName, namespace, secretMap
func (_m *ManifestManager) CreateK8sSecret(ctx context.Context, predictionJobName string, namespace string, secretMap map[string]string) (string, error) {
	ret := _m.Called(ctx, predictionJobName, namespace, secretMap)

	if len(ret) == 0 {
		panic("no return value specified for CreateK8sSecret")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) (string, error)); ok {
		return rf(ctx, predictionJobName, namespace, secretMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) string); ok {
		r0 = rf(ctx, predictionJobName, namespace, secretMap)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string) error); ok {
		r1 = rf(ctx, predictionJobName, namespace, secretMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDriverAuthorization provides a mock function with given fields: ctx, namespace
func (_m *ManifestManager) DeleteDriverAuthorization(ctx context.Context, namespace string) error {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDriverAuthorization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJobSpec provides a mock function with given fields: ctx, predictionJobName, namespace
func (_m *ManifestManager) DeleteJobSpec(ctx context.Context, predictionJobName string, namespace string) error {
	ret := _m.Called(ctx, predictionJobName, namespace)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobSpec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, predictionJobName, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSecret provides a mock function with given fields: ctx, predictionJobName, namespace
func (_m *ManifestManager) DeleteK8sSecret(ctx context.Context, predictionJobName string, namespace string) error {
	ret := _m.Called(ctx, predictionJobName, namespace)

	if len(ret) == 0 {
		panic("no return value specified for DeleteK8sSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, predictionJobName, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewManifestManager creates a new instance of ManifestManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManifestManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManifestManager {
	mock := &ManifestManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
