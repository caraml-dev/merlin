// Code generated by mockery v2.0.4. DO NOT EDIT.

package mocks

import (
	spec "github.com/caraml-dev/merlin-pyspark-app/pkg/spec"
	mock "github.com/stretchr/testify/mock"
)

// ManifestManager is an autogenerated mock type for the ManifestManager type
type ManifestManager struct {
	mock.Mock
}

// CreateDriverAuthorization provides a mock function with given fields: namespace
func (_m *ManifestManager) CreateDriverAuthorization(namespace string) (string, error) {
	ret := _m.Called(namespace)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobSpec provides a mock function with given fields: predictionJobName, namespace, _a2
func (_m *ManifestManager) CreateJobSpec(predictionJobName string, namespace string, _a2 *spec.PredictionJob) (string, error) {
	ret := _m.Called(predictionJobName, namespace, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, *spec.PredictionJob) string); ok {
		r0 = rf(predictionJobName, namespace, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *spec.PredictionJob) error); ok {
		r1 = rf(predictionJobName, namespace, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecret provides a mock function with given fields: predictionJobName, namespace, data
func (_m *ManifestManager) CreateSecret(predictionJobName string, namespace string, data string) (string, error) {
	ret := _m.Called(predictionJobName, namespace, data)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(predictionJobName, namespace, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(predictionJobName, namespace, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDriverAuthorization provides a mock function with given fields: namespace
func (_m *ManifestManager) DeleteDriverAuthorization(namespace string) error {
	ret := _m.Called(namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJobSpec provides a mock function with given fields: predictionJobName, namespace
func (_m *ManifestManager) DeleteJobSpec(predictionJobName string, namespace string) error {
	ret := _m.Called(predictionJobName, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(predictionJobName, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSecret provides a mock function with given fields: predictionJobName, namespace
func (_m *ManifestManager) DeleteSecret(predictionJobName string, namespace string) error {
	ret := _m.Called(predictionJobName, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(predictionJobName, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
