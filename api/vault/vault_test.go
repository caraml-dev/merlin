// Copyright 2020 The Merlin Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vault

import (
	"fmt"
	"testing"

	"github.com/hashicorp/vault/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// secretReader is an autogenerated mock type for the secretReader type
type mockSecretReader struct {
	mock.Mock
}

// Read provides a mock function with given fields: path
func (_m *mockSecretReader) Read(path string) (*api.Secret, error) {
	ret := _m.Called(path)

	var r0 *api.Secret
	if rf, ok := ret.Get(0).(func(string) *api.Secret); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func TestReadClusterSecret(t *testing.T) {
	tests := []struct {
		name        string
		wantError   bool
		clusterName string
		secret      *api.Secret
	}{
		{
			"sucessful get cluster secret",
			false,
			"my-cluster",
			&api.Secret{
				Data: map[string]interface{}{
					masterIPKey:   "http://localhost",
					clientKeyKey:  "12345",
					clientCertKey: "23456",
					caCertKey:     "34556",
				},
			},
		},
		{
			"failed get cluster secret: master ip is nil",
			true,
			"my-cluster",
			&api.Secret{
				Data: map[string]interface{}{
					clientKeyKey:  "12345",
					clientCertKey: "23456",
					caCertKey:     "34556",
				},
			},
		},
		{
			"failed get cluster secret: client cert is nil",
			true,
			"my-cluster",
			&api.Secret{
				Data: map[string]interface{}{
					masterIPKey:  "http://localhost",
					clientKeyKey: "12345",
					caCertKey:    "34556",
				},
			},
		},
		{
			"failed get cluster secret: client key is nil",
			true,
			"my-cluster",
			&api.Secret{
				Data: map[string]interface{}{
					masterIPKey:   "http://localhost",
					clientCertKey: "23456",
					caCertKey:     "34556",
				},
			},
		},
		{
			"failed get cluster secret: ca cert is nil",
			true,
			"my-cluster",
			&api.Secret{
				Data: map[string]interface{}{
					masterIPKey:   "http://localhost",
					clientKeyKey:  "12345",
					clientCertKey: "23456",
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &mockSecretReader{}
			m.On("Read", fmt.Sprintf("secret/%s", tt.clusterName)).Return(tt.secret, nil)

			v, _ := newVaultClient(m)
			clusterSecret, err := v.GetClusterSecret(tt.clusterName)
			defer m.AssertExpectations(t)
			if tt.wantError {
				if err == nil {
					t.Fail()
				}
				return
			}

			assert.Equal(t, tt.secret.Data[masterIPKey].(string), clusterSecret.Endpoint)
			assert.Equal(t, tt.secret.Data[clientCertKey].(string), clusterSecret.ClientCert)
			assert.Equal(t, tt.secret.Data[clientKeyKey].(string), clusterSecret.ClientKey)
			assert.Equal(t, tt.secret.Data[caCertKey].(string), clusterSecret.CaCert)

		})
	}
}
