// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/caraml-dev/merlin/models"

	webhooks "github.com/caraml-dev/mlp/api/pkg/webhooks"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// TriggerModelEndpointEvent provides a mock function with given fields: ctx, event, modelEndpoint
func (_m *Client) TriggerModelEndpointEvent(ctx context.Context, event webhooks.EventType, modelEndpoint *models.ModelEndpoint) error {
	ret := _m.Called(ctx, event, modelEndpoint)

	if len(ret) == 0 {
		panic("no return value specified for TriggerModelEndpointEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webhooks.EventType, *models.ModelEndpoint) error); ok {
		r0 = rf(ctx, event, modelEndpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerModelEvent provides a mock function with given fields: ctx, event, model
func (_m *Client) TriggerModelEvent(ctx context.Context, event webhooks.EventType, model *models.Model) error {
	ret := _m.Called(ctx, event, model)

	if len(ret) == 0 {
		panic("no return value specified for TriggerModelEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webhooks.EventType, *models.Model) error); ok {
		r0 = rf(ctx, event, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerModelVersionEvent provides a mock function with given fields: ctx, event, version
func (_m *Client) TriggerModelVersionEvent(ctx context.Context, event webhooks.EventType, version *models.Version) error {
	ret := _m.Called(ctx, event, version)

	if len(ret) == 0 {
		panic("no return value specified for TriggerModelVersionEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webhooks.EventType, *models.Version) error); ok {
		r0 = rf(ctx, event, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerVersionEndpointEvent provides a mock function with given fields: ctx, event, versionEndpoint
func (_m *Client) TriggerVersionEndpointEvent(ctx context.Context, event webhooks.EventType, versionEndpoint *models.VersionEndpoint) error {
	ret := _m.Called(ctx, event, versionEndpoint)

	if len(ret) == 0 {
		panic("no return value specified for TriggerVersionEndpointEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webhooks.EventType, *models.VersionEndpoint) error); ok {
		r0 = rf(ctx, event, versionEndpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
