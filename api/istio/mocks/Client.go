// Code generated by mockery v2.0.0-alpha.14. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	"istio.io/client-go/pkg/apis/networking/v1alpha3"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateVirtualService provides a mock function with given fields: ctx, namespace, vs
func (_m *Client) CreateVirtualService(ctx context.Context, namespace string, vs *v1alpha3.VirtualService) (*v1alpha3.VirtualService, error) {
	ret := _m.Called(ctx, namespace, vs)

	var r0 *v1alpha3.VirtualService
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1alpha3.VirtualService) *v1alpha3.VirtualService); ok {
		r0 = rf(ctx, namespace, vs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha3.VirtualService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *v1alpha3.VirtualService) error); ok {
		r1 = rf(ctx, namespace, vs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVirtualService provides a mock function with given fields: ctx, namespace, name
func (_m *Client) DeleteVirtualService(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PatchVirtualService provides a mock function with given fields: ctx, namespace, vs
func (_m *Client) PatchVirtualService(ctx context.Context, namespace string, vs *v1alpha3.VirtualService) (*v1alpha3.VirtualService, error) {
	ret := _m.Called(ctx, namespace, vs)

	var r0 *v1alpha3.VirtualService
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1alpha3.VirtualService) *v1alpha3.VirtualService); ok {
		r0 = rf(ctx, namespace, vs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha3.VirtualService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *v1alpha3.VirtualService) error); ok {
		r1 = rf(ctx, namespace, vs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
