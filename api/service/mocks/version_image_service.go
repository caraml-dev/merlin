// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/caraml-dev/merlin/models"
	mock "github.com/stretchr/testify/mock"
)

// VersionImageService is an autogenerated mock type for the VersionImageService type
type VersionImageService struct {
	mock.Mock
}

// BuildImage provides a mock function with given fields: ctx, model, version, options
func (_m *VersionImageService) BuildImage(ctx context.Context, model *models.Model, version *models.Version, options *models.BuildImageOptions) (string, error) {
	ret := _m.Called(ctx, model, version, options)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.Version, *models.BuildImageOptions) (string, error)); ok {
		return rf(ctx, model, version, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.Version, *models.BuildImageOptions) string); ok {
		r0 = rf(ctx, model, version, options)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Model, *models.Version, *models.BuildImageOptions) error); ok {
		r1 = rf(ctx, model, version, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: ctx, model, version
func (_m *VersionImageService) GetImage(ctx context.Context, model *models.Model, version *models.Version) (models.VersionImage, error) {
	ret := _m.Called(ctx, model, version)

	var r0 models.VersionImage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.Version) (models.VersionImage, error)); ok {
		return rf(ctx, model, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.Version) models.VersionImage); ok {
		r0 = rf(ctx, model, version)
	} else {
		r0 = ret.Get(0).(models.VersionImage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Model, *models.Version) error); ok {
		r1 = rf(ctx, model, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewVersionImageService interface {
	mock.TestingT
	Cleanup(func())
}

// NewVersionImageService creates a new instance of VersionImageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVersionImageService(t mockConstructorTestingTNewVersionImageService) *VersionImageService {
	mock := &VersionImageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
