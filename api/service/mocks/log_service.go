// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/gojek/merlin/service"
	mock "github.com/stretchr/testify/mock"
)

// LogService is an autogenerated mock type for the LogService type
type LogService struct {
	mock.Mock
}

type LogService_StreamLogs struct {
	*mock.Call
}

func (_m LogService_StreamLogs) Return(_a0 error) *LogService_StreamLogs {
	return &LogService_StreamLogs{Call: _m.Call.Return(_a0)}
}

func (_m *LogService) OnStreamLogs(ctx context.Context, logLineCh chan string, stopCh chan struct{}, options *service.LogQuery) *LogService_StreamLogs {
	c := _m.On("StreamLogs", ctx, logLineCh, stopCh, options)
	return &LogService_StreamLogs{Call: c}
}

func (_m *LogService) OnStreamLogsMatch(matchers ...interface{}) *LogService_StreamLogs {
	c := _m.On("StreamLogs", matchers...)
	return &LogService_StreamLogs{Call: c}
}

// StreamLogs provides a mock function with given fields: ctx, logLineCh, stopCh, options
func (_m *LogService) StreamLogs(ctx context.Context, logLineCh chan string, stopCh chan struct{}, options *service.LogQuery) error {
	ret := _m.Called(ctx, logLineCh, stopCh, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan string, chan struct{}, *service.LogQuery) error); ok {
		r0 = rf(ctx, logLineCh, stopCh, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
