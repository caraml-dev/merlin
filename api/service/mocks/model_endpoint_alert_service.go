// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	models "github.com/gojek/merlin/models"
	mock "github.com/stretchr/testify/mock"
)

// ModelEndpointAlertService is an autogenerated mock type for the ModelEndpointAlertService type
type ModelEndpointAlertService struct {
	mock.Mock
}

type ModelEndpointAlertService_CreateModelEndpointAlert struct {
	*mock.Call
}

func (_m ModelEndpointAlertService_CreateModelEndpointAlert) Return(_a0 *models.ModelEndpointAlert, _a1 error) *ModelEndpointAlertService_CreateModelEndpointAlert {
	return &ModelEndpointAlertService_CreateModelEndpointAlert{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ModelEndpointAlertService) OnCreateModelEndpointAlert(user string, alert *models.ModelEndpointAlert) *ModelEndpointAlertService_CreateModelEndpointAlert {
	c := _m.On("CreateModelEndpointAlert", user, alert)
	return &ModelEndpointAlertService_CreateModelEndpointAlert{Call: c}
}

func (_m *ModelEndpointAlertService) OnCreateModelEndpointAlertMatch(matchers ...interface{}) *ModelEndpointAlertService_CreateModelEndpointAlert {
	c := _m.On("CreateModelEndpointAlert", matchers...)
	return &ModelEndpointAlertService_CreateModelEndpointAlert{Call: c}
}

// CreateModelEndpointAlert provides a mock function with given fields: user, alert
func (_m *ModelEndpointAlertService) CreateModelEndpointAlert(user string, alert *models.ModelEndpointAlert) (*models.ModelEndpointAlert, error) {
	ret := _m.Called(user, alert)

	var r0 *models.ModelEndpointAlert
	if rf, ok := ret.Get(0).(func(string, *models.ModelEndpointAlert) *models.ModelEndpointAlert); ok {
		r0 = rf(user, alert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ModelEndpointAlert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *models.ModelEndpointAlert) error); ok {
		r1 = rf(user, alert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ModelEndpointAlertService_GetModelEndpointAlert struct {
	*mock.Call
}

func (_m ModelEndpointAlertService_GetModelEndpointAlert) Return(_a0 *models.ModelEndpointAlert, _a1 error) *ModelEndpointAlertService_GetModelEndpointAlert {
	return &ModelEndpointAlertService_GetModelEndpointAlert{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ModelEndpointAlertService) OnGetModelEndpointAlert(modelID models.ID, modelEndpointID models.ID) *ModelEndpointAlertService_GetModelEndpointAlert {
	c := _m.On("GetModelEndpointAlert", modelID, modelEndpointID)
	return &ModelEndpointAlertService_GetModelEndpointAlert{Call: c}
}

func (_m *ModelEndpointAlertService) OnGetModelEndpointAlertMatch(matchers ...interface{}) *ModelEndpointAlertService_GetModelEndpointAlert {
	c := _m.On("GetModelEndpointAlert", matchers...)
	return &ModelEndpointAlertService_GetModelEndpointAlert{Call: c}
}

// GetModelEndpointAlert provides a mock function with given fields: modelID, modelEndpointID
func (_m *ModelEndpointAlertService) GetModelEndpointAlert(modelID models.ID, modelEndpointID models.ID) (*models.ModelEndpointAlert, error) {
	ret := _m.Called(modelID, modelEndpointID)

	var r0 *models.ModelEndpointAlert
	if rf, ok := ret.Get(0).(func(models.ID, models.ID) *models.ModelEndpointAlert); ok {
		r0 = rf(modelID, modelEndpointID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ModelEndpointAlert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID, models.ID) error); ok {
		r1 = rf(modelID, modelEndpointID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ModelEndpointAlertService_ListModelAlerts struct {
	*mock.Call
}

func (_m ModelEndpointAlertService_ListModelAlerts) Return(_a0 []*models.ModelEndpointAlert, _a1 error) *ModelEndpointAlertService_ListModelAlerts {
	return &ModelEndpointAlertService_ListModelAlerts{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ModelEndpointAlertService) OnListModelAlerts(modelID models.ID) *ModelEndpointAlertService_ListModelAlerts {
	c := _m.On("ListModelAlerts", modelID)
	return &ModelEndpointAlertService_ListModelAlerts{Call: c}
}

func (_m *ModelEndpointAlertService) OnListModelAlertsMatch(matchers ...interface{}) *ModelEndpointAlertService_ListModelAlerts {
	c := _m.On("ListModelAlerts", matchers...)
	return &ModelEndpointAlertService_ListModelAlerts{Call: c}
}

// ListModelAlerts provides a mock function with given fields: modelID
func (_m *ModelEndpointAlertService) ListModelAlerts(modelID models.ID) ([]*models.ModelEndpointAlert, error) {
	ret := _m.Called(modelID)

	var r0 []*models.ModelEndpointAlert
	if rf, ok := ret.Get(0).(func(models.ID) []*models.ModelEndpointAlert); ok {
		r0 = rf(modelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ModelEndpointAlert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID) error); ok {
		r1 = rf(modelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ModelEndpointAlertService_ListTeams struct {
	*mock.Call
}

func (_m ModelEndpointAlertService_ListTeams) Return(_a0 []string, _a1 error) *ModelEndpointAlertService_ListTeams {
	return &ModelEndpointAlertService_ListTeams{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ModelEndpointAlertService) OnListTeams() *ModelEndpointAlertService_ListTeams {
	c := _m.On("ListTeams")
	return &ModelEndpointAlertService_ListTeams{Call: c}
}

func (_m *ModelEndpointAlertService) OnListTeamsMatch(matchers ...interface{}) *ModelEndpointAlertService_ListTeams {
	c := _m.On("ListTeams", matchers...)
	return &ModelEndpointAlertService_ListTeams{Call: c}
}

// ListTeams provides a mock function with given fields:
func (_m *ModelEndpointAlertService) ListTeams() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ModelEndpointAlertService_UpdateModelEndpointAlert struct {
	*mock.Call
}

func (_m ModelEndpointAlertService_UpdateModelEndpointAlert) Return(_a0 *models.ModelEndpointAlert, _a1 error) *ModelEndpointAlertService_UpdateModelEndpointAlert {
	return &ModelEndpointAlertService_UpdateModelEndpointAlert{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ModelEndpointAlertService) OnUpdateModelEndpointAlert(user string, alert *models.ModelEndpointAlert) *ModelEndpointAlertService_UpdateModelEndpointAlert {
	c := _m.On("UpdateModelEndpointAlert", user, alert)
	return &ModelEndpointAlertService_UpdateModelEndpointAlert{Call: c}
}

func (_m *ModelEndpointAlertService) OnUpdateModelEndpointAlertMatch(matchers ...interface{}) *ModelEndpointAlertService_UpdateModelEndpointAlert {
	c := _m.On("UpdateModelEndpointAlert", matchers...)
	return &ModelEndpointAlertService_UpdateModelEndpointAlert{Call: c}
}

// UpdateModelEndpointAlert provides a mock function with given fields: user, alert
func (_m *ModelEndpointAlertService) UpdateModelEndpointAlert(user string, alert *models.ModelEndpointAlert) (*models.ModelEndpointAlert, error) {
	ret := _m.Called(user, alert)

	var r0 *models.ModelEndpointAlert
	if rf, ok := ret.Get(0).(func(string, *models.ModelEndpointAlert) *models.ModelEndpointAlert); ok {
		r0 = rf(user, alert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ModelEndpointAlert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *models.ModelEndpointAlert) error); ok {
		r1 = rf(user, alert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
