// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/gojek/merlin/config"
	models "github.com/gojek/merlin/models"
	service "github.com/gojek/merlin/service"
	mock "github.com/stretchr/testify/mock"
)

// VersionsService is an autogenerated mock type for the VersionsService type
type VersionsService struct {
	mock.Mock
}

type VersionsService_FindByID struct {
	*mock.Call
}

func (_m VersionsService_FindByID) Return(_a0 *models.Version, _a1 error) *VersionsService_FindByID {
	return &VersionsService_FindByID{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *VersionsService) OnFindByID(ctx context.Context, modelID models.ID, versionID models.ID, monitoringConfig config.MonitoringConfig) *VersionsService_FindByID {
	c := _m.On("FindByID", ctx, modelID, versionID, monitoringConfig)
	return &VersionsService_FindByID{Call: c}
}

func (_m *VersionsService) OnFindByIDMatch(matchers ...interface{}) *VersionsService_FindByID {
	c := _m.On("FindByID", matchers...)
	return &VersionsService_FindByID{Call: c}
}

// FindByID provides a mock function with given fields: ctx, modelID, versionID, monitoringConfig
func (_m *VersionsService) FindByID(ctx context.Context, modelID models.ID, versionID models.ID, monitoringConfig config.MonitoringConfig) (*models.Version, error) {
	ret := _m.Called(ctx, modelID, versionID, monitoringConfig)

	var r0 *models.Version
	if rf, ok := ret.Get(0).(func(context.Context, models.ID, models.ID, config.MonitoringConfig) *models.Version); ok {
		r0 = rf(ctx, modelID, versionID, monitoringConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.ID, models.ID, config.MonitoringConfig) error); ok {
		r1 = rf(ctx, modelID, versionID, monitoringConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type VersionsService_ListVersions struct {
	*mock.Call
}

func (_m VersionsService_ListVersions) Return(_a0 []*models.Version, _a1 string, _a2 error) *VersionsService_ListVersions {
	return &VersionsService_ListVersions{Call: _m.Call.Return(_a0, _a1, _a2)}
}

func (_m *VersionsService) OnListVersions(ctx context.Context, modelID models.ID, monitoringConfig config.MonitoringConfig, query service.VersionQuery) *VersionsService_ListVersions {
	c := _m.On("ListVersions", ctx, modelID, monitoringConfig, query)
	return &VersionsService_ListVersions{Call: c}
}

func (_m *VersionsService) OnListVersionsMatch(matchers ...interface{}) *VersionsService_ListVersions {
	c := _m.On("ListVersions", matchers...)
	return &VersionsService_ListVersions{Call: c}
}

// ListVersions provides a mock function with given fields: ctx, modelID, monitoringConfig, query
func (_m *VersionsService) ListVersions(ctx context.Context, modelID models.ID, monitoringConfig config.MonitoringConfig, query service.VersionQuery) ([]*models.Version, string, error) {
	ret := _m.Called(ctx, modelID, monitoringConfig, query)

	var r0 []*models.Version
	if rf, ok := ret.Get(0).(func(context.Context, models.ID, config.MonitoringConfig, service.VersionQuery) []*models.Version); ok {
		r0 = rf(ctx, modelID, monitoringConfig, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Version)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, models.ID, config.MonitoringConfig, service.VersionQuery) string); ok {
		r1 = rf(ctx, modelID, monitoringConfig, query)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, models.ID, config.MonitoringConfig, service.VersionQuery) error); ok {
		r2 = rf(ctx, modelID, monitoringConfig, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type VersionsService_Save struct {
	*mock.Call
}

func (_m VersionsService_Save) Return(_a0 *models.Version, _a1 error) *VersionsService_Save {
	return &VersionsService_Save{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *VersionsService) OnSave(ctx context.Context, version *models.Version, monitoringConfig config.MonitoringConfig) *VersionsService_Save {
	c := _m.On("Save", ctx, version, monitoringConfig)
	return &VersionsService_Save{Call: c}
}

func (_m *VersionsService) OnSaveMatch(matchers ...interface{}) *VersionsService_Save {
	c := _m.On("Save", matchers...)
	return &VersionsService_Save{Call: c}
}

// Save provides a mock function with given fields: ctx, version, monitoringConfig
func (_m *VersionsService) Save(ctx context.Context, version *models.Version, monitoringConfig config.MonitoringConfig) (*models.Version, error) {
	ret := _m.Called(ctx, version, monitoringConfig)

	var r0 *models.Version
	if rf, ok := ret.Get(0).(func(context.Context, *models.Version, config.MonitoringConfig) *models.Version); ok {
		r0 = rf(ctx, version, monitoringConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Version, config.MonitoringConfig) error); ok {
		r1 = rf(ctx, version, monitoringConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
