// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/gojek/merlin/models"
	mock "github.com/stretchr/testify/mock"
)

// ModelsService is an autogenerated mock type for the ModelsService type
type ModelsService struct {
	mock.Mock
}

type ModelsService_FindByID struct {
	*mock.Call
}

func (_m ModelsService_FindByID) Return(_a0 *models.Model, _a1 error) *ModelsService_FindByID {
	return &ModelsService_FindByID{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ModelsService) OnFindByID(ctx context.Context, modelID models.ID) *ModelsService_FindByID {
	c := _m.On("FindByID", ctx, modelID)
	return &ModelsService_FindByID{Call: c}
}

func (_m *ModelsService) OnFindByIDMatch(matchers ...interface{}) *ModelsService_FindByID {
	c := _m.On("FindByID", matchers...)
	return &ModelsService_FindByID{Call: c}
}

// FindByID provides a mock function with given fields: ctx, modelID
func (_m *ModelsService) FindByID(ctx context.Context, modelID models.ID) (*models.Model, error) {
	ret := _m.Called(ctx, modelID)

	var r0 *models.Model
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) *models.Model); ok {
		r0 = rf(ctx, modelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.ID) error); ok {
		r1 = rf(ctx, modelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ModelsService_ListModels struct {
	*mock.Call
}

func (_m ModelsService_ListModels) Return(_a0 []*models.Model, _a1 error) *ModelsService_ListModels {
	return &ModelsService_ListModels{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ModelsService) OnListModels(ctx context.Context, projectID models.ID, name string) *ModelsService_ListModels {
	c := _m.On("ListModels", ctx, projectID, name)
	return &ModelsService_ListModels{Call: c}
}

func (_m *ModelsService) OnListModelsMatch(matchers ...interface{}) *ModelsService_ListModels {
	c := _m.On("ListModels", matchers...)
	return &ModelsService_ListModels{Call: c}
}

// ListModels provides a mock function with given fields: ctx, projectID, name
func (_m *ModelsService) ListModels(ctx context.Context, projectID models.ID, name string) ([]*models.Model, error) {
	ret := _m.Called(ctx, projectID, name)

	var r0 []*models.Model
	if rf, ok := ret.Get(0).(func(context.Context, models.ID, string) []*models.Model); ok {
		r0 = rf(ctx, projectID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.ID, string) error); ok {
		r1 = rf(ctx, projectID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ModelsService_Save struct {
	*mock.Call
}

func (_m ModelsService_Save) Return(_a0 *models.Model, _a1 error) *ModelsService_Save {
	return &ModelsService_Save{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ModelsService) OnSave(ctx context.Context, model *models.Model) *ModelsService_Save {
	c := _m.On("Save", ctx, model)
	return &ModelsService_Save{Call: c}
}

func (_m *ModelsService) OnSaveMatch(matchers ...interface{}) *ModelsService_Save {
	c := _m.On("Save", matchers...)
	return &ModelsService_Save{Call: c}
}

// Save provides a mock function with given fields: ctx, model
func (_m *ModelsService) Save(ctx context.Context, model *models.Model) (*models.Model, error) {
	ret := _m.Called(ctx, model)

	var r0 *models.Model
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model) *models.Model); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Model) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ModelsService_Update struct {
	*mock.Call
}

func (_m ModelsService_Update) Return(_a0 *models.Model, _a1 error) *ModelsService_Update {
	return &ModelsService_Update{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ModelsService) OnUpdate(ctx context.Context, model *models.Model) *ModelsService_Update {
	c := _m.On("Update", ctx, model)
	return &ModelsService_Update{Call: c}
}

func (_m *ModelsService) OnUpdateMatch(matchers ...interface{}) *ModelsService_Update {
	c := _m.On("Update", matchers...)
	return &ModelsService_Update{Call: c}
}

// Update provides a mock function with given fields: ctx, model
func (_m *ModelsService) Update(ctx context.Context, model *models.Model) (*models.Model, error) {
	ret := _m.Called(ctx, model)

	var r0 *models.Model
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model) *models.Model); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Model) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
