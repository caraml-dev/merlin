// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/caraml-dev/merlin/models"
	mock "github.com/stretchr/testify/mock"
)

// ModelEndpointsService is an autogenerated mock type for the ModelEndpointsService type
type ModelEndpointsService struct {
	mock.Mock
}

// DeleteModelEndpoint provides a mock function with given fields: endpoint
func (_m *ModelEndpointsService) DeleteModelEndpoint(endpoint *models.ModelEndpoint) error {
	ret := _m.Called(endpoint)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ModelEndpoint) error); ok {
		r0 = rf(endpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeployEndpoint provides a mock function with given fields: ctx, model, endpoint
func (_m *ModelEndpointsService) DeployEndpoint(ctx context.Context, model *models.Model, endpoint *models.ModelEndpoint) (*models.ModelEndpoint, error) {
	ret := _m.Called(ctx, model, endpoint)

	var r0 *models.ModelEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.ModelEndpoint) (*models.ModelEndpoint, error)); ok {
		return rf(ctx, model, endpoint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.ModelEndpoint) *models.ModelEndpoint); ok {
		r0 = rf(ctx, model, endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ModelEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Model, *models.ModelEndpoint) error); ok {
		r1 = rf(ctx, model, endpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ModelEndpointsService) FindByID(ctx context.Context, id models.ID) (*models.ModelEndpoint, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.ModelEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) (*models.ModelEndpoint, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) *models.ModelEndpoint); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ModelEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelEndpoints provides a mock function with given fields: ctx, modelID
func (_m *ModelEndpointsService) ListModelEndpoints(ctx context.Context, modelID models.ID) ([]*models.ModelEndpoint, error) {
	ret := _m.Called(ctx, modelID)

	var r0 []*models.ModelEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) ([]*models.ModelEndpoint, error)); ok {
		return rf(ctx, modelID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) []*models.ModelEndpoint); ok {
		r0 = rf(ctx, modelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ModelEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ID) error); ok {
		r1 = rf(ctx, modelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelEndpointsInProject provides a mock function with given fields: ctx, projectID, region
func (_m *ModelEndpointsService) ListModelEndpointsInProject(ctx context.Context, projectID models.ID, region string) ([]*models.ModelEndpoint, error) {
	ret := _m.Called(ctx, projectID, region)

	var r0 []*models.ModelEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ID, string) ([]*models.ModelEndpoint, error)); ok {
		return rf(ctx, projectID, region)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ID, string) []*models.ModelEndpoint); ok {
		r0 = rf(ctx, projectID, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ModelEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ID, string) error); ok {
		r1 = rf(ctx, projectID, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UndeployEndpoint provides a mock function with given fields: ctx, model, endpoint
func (_m *ModelEndpointsService) UndeployEndpoint(ctx context.Context, model *models.Model, endpoint *models.ModelEndpoint) (*models.ModelEndpoint, error) {
	ret := _m.Called(ctx, model, endpoint)

	var r0 *models.ModelEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.ModelEndpoint) (*models.ModelEndpoint, error)); ok {
		return rf(ctx, model, endpoint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.ModelEndpoint) *models.ModelEndpoint); ok {
		r0 = rf(ctx, model, endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ModelEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Model, *models.ModelEndpoint) error); ok {
		r1 = rf(ctx, model, endpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEndpoint provides a mock function with given fields: ctx, model, oldEndpoint, newEndpoint
func (_m *ModelEndpointsService) UpdateEndpoint(ctx context.Context, model *models.Model, oldEndpoint *models.ModelEndpoint, newEndpoint *models.ModelEndpoint) (*models.ModelEndpoint, error) {
	ret := _m.Called(ctx, model, oldEndpoint, newEndpoint)

	var r0 *models.ModelEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.ModelEndpoint, *models.ModelEndpoint) (*models.ModelEndpoint, error)); ok {
		return rf(ctx, model, oldEndpoint, newEndpoint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.ModelEndpoint, *models.ModelEndpoint) *models.ModelEndpoint); ok {
		r0 = rf(ctx, model, oldEndpoint, newEndpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ModelEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Model, *models.ModelEndpoint, *models.ModelEndpoint) error); ok {
		r1 = rf(ctx, model, oldEndpoint, newEndpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewModelEndpointsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewModelEndpointsService creates a new instance of ModelEndpointsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewModelEndpointsService(t mockConstructorTestingTNewModelEndpointsService) *ModelEndpointsService {
	mock := &ModelEndpointsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
