// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mlp "github.com/gojek/merlin/mlp"
	mock "github.com/stretchr/testify/mock"

	models "github.com/gojek/merlin/models"

	service "github.com/gojek/merlin/service"
)

// PredictionJobService is an autogenerated mock type for the PredictionJobService type
type PredictionJobService struct {
	mock.Mock
}

type PredictionJobService_CreatePredictionJob struct {
	*mock.Call
}

func (_m PredictionJobService_CreatePredictionJob) Return(_a0 *models.PredictionJob, _a1 error) *PredictionJobService_CreatePredictionJob {
	return &PredictionJobService_CreatePredictionJob{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *PredictionJobService) OnCreatePredictionJob(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, predictionJob *models.PredictionJob) *PredictionJobService_CreatePredictionJob {
	c := _m.On("CreatePredictionJob", ctx, env, model, version, predictionJob)
	return &PredictionJobService_CreatePredictionJob{Call: c}
}

func (_m *PredictionJobService) OnCreatePredictionJobMatch(matchers ...interface{}) *PredictionJobService_CreatePredictionJob {
	c := _m.On("CreatePredictionJob", matchers...)
	return &PredictionJobService_CreatePredictionJob{Call: c}
}

// CreatePredictionJob provides a mock function with given fields: ctx, env, model, version, predictionJob
func (_m *PredictionJobService) CreatePredictionJob(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, predictionJob *models.PredictionJob) (*models.PredictionJob, error) {
	ret := _m.Called(ctx, env, model, version, predictionJob)

	var r0 *models.PredictionJob
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.PredictionJob) *models.PredictionJob); ok {
		r0 = rf(ctx, env, model, version, predictionJob)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PredictionJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.PredictionJob) error); ok {
		r1 = rf(ctx, env, model, version, predictionJob)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type PredictionJobService_GetPredictionJob struct {
	*mock.Call
}

func (_m PredictionJobService_GetPredictionJob) Return(_a0 *models.PredictionJob, _a1 error) *PredictionJobService_GetPredictionJob {
	return &PredictionJobService_GetPredictionJob{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *PredictionJobService) OnGetPredictionJob(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, id models.ID) *PredictionJobService_GetPredictionJob {
	c := _m.On("GetPredictionJob", ctx, env, model, version, id)
	return &PredictionJobService_GetPredictionJob{Call: c}
}

func (_m *PredictionJobService) OnGetPredictionJobMatch(matchers ...interface{}) *PredictionJobService_GetPredictionJob {
	c := _m.On("GetPredictionJob", matchers...)
	return &PredictionJobService_GetPredictionJob{Call: c}
}

// GetPredictionJob provides a mock function with given fields: ctx, env, model, version, id
func (_m *PredictionJobService) GetPredictionJob(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, id models.ID) (*models.PredictionJob, error) {
	ret := _m.Called(ctx, env, model, version, id)

	var r0 *models.PredictionJob
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, models.ID) *models.PredictionJob); ok {
		r0 = rf(ctx, env, model, version, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PredictionJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Environment, *models.Model, *models.Version, models.ID) error); ok {
		r1 = rf(ctx, env, model, version, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type PredictionJobService_ListContainers struct {
	*mock.Call
}

func (_m PredictionJobService_ListContainers) Return(_a0 []*models.Container, _a1 error) *PredictionJobService_ListContainers {
	return &PredictionJobService_ListContainers{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *PredictionJobService) OnListContainers(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, predictionJob *models.PredictionJob) *PredictionJobService_ListContainers {
	c := _m.On("ListContainers", ctx, env, model, version, predictionJob)
	return &PredictionJobService_ListContainers{Call: c}
}

func (_m *PredictionJobService) OnListContainersMatch(matchers ...interface{}) *PredictionJobService_ListContainers {
	c := _m.On("ListContainers", matchers...)
	return &PredictionJobService_ListContainers{Call: c}
}

// ListContainers provides a mock function with given fields: ctx, env, model, version, predictionJob
func (_m *PredictionJobService) ListContainers(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, predictionJob *models.PredictionJob) ([]*models.Container, error) {
	ret := _m.Called(ctx, env, model, version, predictionJob)

	var r0 []*models.Container
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.PredictionJob) []*models.Container); ok {
		r0 = rf(ctx, env, model, version, predictionJob)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.PredictionJob) error); ok {
		r1 = rf(ctx, env, model, version, predictionJob)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type PredictionJobService_ListPredictionJobs struct {
	*mock.Call
}

func (_m PredictionJobService_ListPredictionJobs) Return(_a0 []*models.PredictionJob, _a1 error) *PredictionJobService_ListPredictionJobs {
	return &PredictionJobService_ListPredictionJobs{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *PredictionJobService) OnListPredictionJobs(ctx context.Context, project mlp.Project, query *service.ListPredictionJobQuery) *PredictionJobService_ListPredictionJobs {
	c := _m.On("ListPredictionJobs", ctx, project, query)
	return &PredictionJobService_ListPredictionJobs{Call: c}
}

func (_m *PredictionJobService) OnListPredictionJobsMatch(matchers ...interface{}) *PredictionJobService_ListPredictionJobs {
	c := _m.On("ListPredictionJobs", matchers...)
	return &PredictionJobService_ListPredictionJobs{Call: c}
}

// ListPredictionJobs provides a mock function with given fields: ctx, project, query
func (_m *PredictionJobService) ListPredictionJobs(ctx context.Context, project mlp.Project, query *service.ListPredictionJobQuery) ([]*models.PredictionJob, error) {
	ret := _m.Called(ctx, project, query)

	var r0 []*models.PredictionJob
	if rf, ok := ret.Get(0).(func(context.Context, mlp.Project, *service.ListPredictionJobQuery) []*models.PredictionJob); ok {
		r0 = rf(ctx, project, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PredictionJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mlp.Project, *service.ListPredictionJobQuery) error); ok {
		r1 = rf(ctx, project, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type PredictionJobService_StopPredictionJob struct {
	*mock.Call
}

func (_m PredictionJobService_StopPredictionJob) Return(_a0 *models.PredictionJob, _a1 error) *PredictionJobService_StopPredictionJob {
	return &PredictionJobService_StopPredictionJob{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *PredictionJobService) OnStopPredictionJob(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, id models.ID) *PredictionJobService_StopPredictionJob {
	c := _m.On("StopPredictionJob", ctx, env, model, version, id)
	return &PredictionJobService_StopPredictionJob{Call: c}
}

func (_m *PredictionJobService) OnStopPredictionJobMatch(matchers ...interface{}) *PredictionJobService_StopPredictionJob {
	c := _m.On("StopPredictionJob", matchers...)
	return &PredictionJobService_StopPredictionJob{Call: c}
}

// StopPredictionJob provides a mock function with given fields: ctx, env, model, version, id
func (_m *PredictionJobService) StopPredictionJob(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, id models.ID) (*models.PredictionJob, error) {
	ret := _m.Called(ctx, env, model, version, id)

	var r0 *models.PredictionJob
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, models.ID) *models.PredictionJob); ok {
		r0 = rf(ctx, env, model, version, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PredictionJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Environment, *models.Model, *models.Version, models.ID) error); ok {
		r1 = rf(ctx, env, model, version, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
