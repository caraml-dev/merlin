// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mlp "github.com/caraml-dev/merlin/mlp"
	mock "github.com/stretchr/testify/mock"

	models "github.com/caraml-dev/merlin/models"

	pagination "github.com/caraml-dev/mlp/api/pkg/pagination"

	service "github.com/caraml-dev/merlin/service"
)

// PredictionJobService is an autogenerated mock type for the PredictionJobService type
type PredictionJobService struct {
	mock.Mock
}

// CreatePredictionJob provides a mock function with given fields: ctx, env, model, version, predictionJob
func (_m *PredictionJobService) CreatePredictionJob(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, predictionJob *models.PredictionJob) (*models.PredictionJob, error) {
	ret := _m.Called(ctx, env, model, version, predictionJob)

	if len(ret) == 0 {
		panic("no return value specified for CreatePredictionJob")
	}

	var r0 *models.PredictionJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.PredictionJob) (*models.PredictionJob, error)); ok {
		return rf(ctx, env, model, version, predictionJob)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.PredictionJob) *models.PredictionJob); ok {
		r0 = rf(ctx, env, model, version, predictionJob)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PredictionJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.PredictionJob) error); ok {
		r1 = rf(ctx, env, model, version, predictionJob)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPredictionJob provides a mock function with given fields: ctx, env, model, version, id
func (_m *PredictionJobService) GetPredictionJob(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, id models.ID) (*models.PredictionJob, error) {
	ret := _m.Called(ctx, env, model, version, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPredictionJob")
	}

	var r0 *models.PredictionJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, models.ID) (*models.PredictionJob, error)); ok {
		return rf(ctx, env, model, version, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, models.ID) *models.PredictionJob); ok {
		r0 = rf(ctx, env, model, version, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PredictionJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Environment, *models.Model, *models.Version, models.ID) error); ok {
		r1 = rf(ctx, env, model, version, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContainers provides a mock function with given fields: ctx, env, model, version, predictionJob
func (_m *PredictionJobService) ListContainers(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, predictionJob *models.PredictionJob) ([]*models.Container, error) {
	ret := _m.Called(ctx, env, model, version, predictionJob)

	if len(ret) == 0 {
		panic("no return value specified for ListContainers")
	}

	var r0 []*models.Container
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.PredictionJob) ([]*models.Container, error)); ok {
		return rf(ctx, env, model, version, predictionJob)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.PredictionJob) []*models.Container); ok {
		r0 = rf(ctx, env, model, version, predictionJob)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Container)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.PredictionJob) error); ok {
		r1 = rf(ctx, env, model, version, predictionJob)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPredictionJobs provides a mock function with given fields: ctx, project, query, paginated
func (_m *PredictionJobService) ListPredictionJobs(ctx context.Context, project mlp.Project, query *service.ListPredictionJobQuery, paginated bool) ([]*models.PredictionJob, *pagination.Paging, error) {
	ret := _m.Called(ctx, project, query, paginated)

	if len(ret) == 0 {
		panic("no return value specified for ListPredictionJobs")
	}

	var r0 []*models.PredictionJob
	var r1 *pagination.Paging
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, mlp.Project, *service.ListPredictionJobQuery, bool) ([]*models.PredictionJob, *pagination.Paging, error)); ok {
		return rf(ctx, project, query, paginated)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mlp.Project, *service.ListPredictionJobQuery, bool) []*models.PredictionJob); ok {
		r0 = rf(ctx, project, query, paginated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PredictionJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, mlp.Project, *service.ListPredictionJobQuery, bool) *pagination.Paging); ok {
		r1 = rf(ctx, project, query, paginated)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pagination.Paging)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, mlp.Project, *service.ListPredictionJobQuery, bool) error); ok {
		r2 = rf(ctx, project, query, paginated)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StopPredictionJob provides a mock function with given fields: ctx, env, model, version, id
func (_m *PredictionJobService) StopPredictionJob(ctx context.Context, env *models.Environment, model *models.Model, version *models.Version, id models.ID) (*models.PredictionJob, error) {
	ret := _m.Called(ctx, env, model, version, id)

	if len(ret) == 0 {
		panic("no return value specified for StopPredictionJob")
	}

	var r0 *models.PredictionJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, models.ID) (*models.PredictionJob, error)); ok {
		return rf(ctx, env, model, version, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, models.ID) *models.PredictionJob); ok {
		r0 = rf(ctx, env, model, version, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PredictionJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Environment, *models.Model, *models.Version, models.ID) error); ok {
		r1 = rf(ctx, env, model, version, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPredictionJobService creates a new instance of PredictionJobService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPredictionJobService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PredictionJobService {
	mock := &PredictionJobService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
