// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/gojek/merlin/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// EndpointsService is an autogenerated mock type for the EndpointsService type
type EndpointsService struct {
	mock.Mock
}

// CountEndpoints provides a mock function with given fields: ctx, environment, model
func (_m *EndpointsService) CountEndpoints(ctx context.Context, environment *models.Environment, model *models.Model) (int, error) {
	ret := _m.Called(ctx, environment, model)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model) int); ok {
		r0 = rf(ctx, environment, model)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Environment, *models.Model) error); ok {
		r1 = rf(ctx, environment, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployEndpoint provides a mock function with given fields: ctx, environment, model, version, endpoint
func (_m *EndpointsService) DeployEndpoint(ctx context.Context, environment *models.Environment, model *models.Model, version *models.Version, endpoint *models.VersionEndpoint) (*models.VersionEndpoint, error) {
	ret := _m.Called(ctx, environment, model, version, endpoint)

	var r0 *models.VersionEndpoint
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.VersionEndpoint) *models.VersionEndpoint); ok {
		r0 = rf(ctx, environment, model, version, endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VersionEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.VersionEndpoint) error); ok {
		r1 = rf(ctx, environment, model, version, endpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, endpointUuid
func (_m *EndpointsService) FindByID(ctx context.Context, endpointUuid uuid.UUID) (*models.VersionEndpoint, error) {
	ret := _m.Called(ctx, endpointUuid)

	var r0 *models.VersionEndpoint
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.VersionEndpoint); ok {
		r0 = rf(ctx, endpointUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VersionEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, endpointUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContainers provides a mock function with given fields: ctx, model, version, endpointUuid
func (_m *EndpointsService) ListContainers(ctx context.Context, model *models.Model, version *models.Version, endpointUuid uuid.UUID) ([]*models.Container, error) {
	ret := _m.Called(ctx, model, version, endpointUuid)

	var r0 []*models.Container
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.Version, uuid.UUID) []*models.Container); ok {
		r0 = rf(ctx, model, version, endpointUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Model, *models.Version, uuid.UUID) error); ok {
		r1 = rf(ctx, model, version, endpointUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEndpoints provides a mock function with given fields: ctx, model, version
func (_m *EndpointsService) ListEndpoints(ctx context.Context, model *models.Model, version *models.Version) ([]*models.VersionEndpoint, error) {
	ret := _m.Called(ctx, model, version)

	var r0 []*models.VersionEndpoint
	if rf, ok := ret.Get(0).(func(context.Context, *models.Model, *models.Version) []*models.VersionEndpoint); ok {
		r0 = rf(ctx, model, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.VersionEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Model, *models.Version) error); ok {
		r1 = rf(ctx, model, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UndeployEndpoint provides a mock function with given fields: ctx, environment, model, version, endpoint
func (_m *EndpointsService) UndeployEndpoint(ctx context.Context, environment *models.Environment, model *models.Model, version *models.Version, endpoint *models.VersionEndpoint) (*models.VersionEndpoint, error) {
	ret := _m.Called(ctx, environment, model, version, endpoint)

	var r0 *models.VersionEndpoint
	if rf, ok := ret.Get(0).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.VersionEndpoint) *models.VersionEndpoint); ok {
		r0 = rf(ctx, environment, model, version, endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VersionEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Environment, *models.Model, *models.Version, *models.VersionEndpoint) error); ok {
		r1 = rf(ctx, environment, model, version, endpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEndpointsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewEndpointsService creates a new instance of EndpointsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEndpointsService(t mockConstructorTestingTNewEndpointsService) *EndpointsService {
	mock := &EndpointsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
