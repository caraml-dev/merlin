// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	models "github.com/gojek/merlin/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// EndpointsService is an autogenerated mock type for the EndpointsService type
type EndpointsService struct {
	mock.Mock
}

// CountEndpoints provides a mock function with given fields: environment, model
func (_m *EndpointsService) CountEndpoints(environment *models.Environment, model *models.Model) (int, error) {
	ret := _m.Called(environment, model)

	var r0 int
	if rf, ok := ret.Get(0).(func(*models.Environment, *models.Model) int); ok {
		r0 = rf(environment, model)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Environment, *models.Model) error); ok {
		r1 = rf(environment, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployEndpoint provides a mock function with given fields: environment, model, version, endpoint
func (_m *EndpointsService) DeployEndpoint(environment *models.Environment, model *models.Model, version *models.Version, endpoint *models.VersionEndpoint) (*models.VersionEndpoint, error) {
	ret := _m.Called(environment, model, version, endpoint)

	var r0 *models.VersionEndpoint
	if rf, ok := ret.Get(0).(func(*models.Environment, *models.Model, *models.Version, *models.VersionEndpoint) *models.VersionEndpoint); ok {
		r0 = rf(environment, model, version, endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VersionEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Environment, *models.Model, *models.Version, *models.VersionEndpoint) error); ok {
		r1 = rf(environment, model, version, endpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: uuid2
func (_m *EndpointsService) FindByID(uuid2 uuid.UUID) (*models.VersionEndpoint, error) {
	ret := _m.Called(uuid2)

	var r0 *models.VersionEndpoint
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.VersionEndpoint); ok {
		r0 = rf(uuid2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VersionEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(uuid2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContainers provides a mock function with given fields: model, version, id
func (_m *EndpointsService) ListContainers(model *models.Model, version *models.Version, id uuid.UUID) ([]*models.Container, error) {
	ret := _m.Called(model, version, id)

	var r0 []*models.Container
	if rf, ok := ret.Get(0).(func(*models.Model, *models.Version, uuid.UUID) []*models.Container); ok {
		r0 = rf(model, version, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Model, *models.Version, uuid.UUID) error); ok {
		r1 = rf(model, version, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEndpoints provides a mock function with given fields: model, version
func (_m *EndpointsService) ListEndpoints(model *models.Model, version *models.Version) ([]*models.VersionEndpoint, error) {
	ret := _m.Called(model, version)

	var r0 []*models.VersionEndpoint
	if rf, ok := ret.Get(0).(func(*models.Model, *models.Version) []*models.VersionEndpoint); ok {
		r0 = rf(model, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.VersionEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Model, *models.Version) error); ok {
		r1 = rf(model, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UndeployEndpoint provides a mock function with given fields: environment, model, version, endpoint
func (_m *EndpointsService) UndeployEndpoint(environment *models.Environment, model *models.Model, version *models.Version, endpoint *models.VersionEndpoint) (*models.VersionEndpoint, error) {
	ret := _m.Called(environment, model, version, endpoint)

	var r0 *models.VersionEndpoint
	if rf, ok := ret.Get(0).(func(*models.Environment, *models.Model, *models.Version, *models.VersionEndpoint) *models.VersionEndpoint); ok {
		r0 = rf(environment, model, version, endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VersionEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Environment, *models.Model, *models.Version, *models.VersionEndpoint) error); ok {
		r1 = rf(environment, model, version, endpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
