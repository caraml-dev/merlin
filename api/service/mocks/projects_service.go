// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mlp "github.com/gojek/merlin/mlp"
	mock "github.com/stretchr/testify/mock"
)

// ProjectsService is an autogenerated mock type for the ProjectsService type
type ProjectsService struct {
	mock.Mock
}

type ProjectsService_GetByID struct {
	*mock.Call
}

func (_m ProjectsService_GetByID) Return(_a0 mlp.Project, _a1 error) *ProjectsService_GetByID {
	return &ProjectsService_GetByID{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ProjectsService) OnGetByID(ctx context.Context, projectID int32) *ProjectsService_GetByID {
	c := _m.On("GetByID", ctx, projectID)
	return &ProjectsService_GetByID{Call: c}
}

func (_m *ProjectsService) OnGetByIDMatch(matchers ...interface{}) *ProjectsService_GetByID {
	c := _m.On("GetByID", matchers...)
	return &ProjectsService_GetByID{Call: c}
}

// GetByID provides a mock function with given fields: ctx, projectID
func (_m *ProjectsService) GetByID(ctx context.Context, projectID int32) (mlp.Project, error) {
	ret := _m.Called(ctx, projectID)

	var r0 mlp.Project
	if rf, ok := ret.Get(0).(func(context.Context, int32) mlp.Project); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(mlp.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ProjectsService_GetByName struct {
	*mock.Call
}

func (_m ProjectsService_GetByName) Return(_a0 mlp.Project, _a1 error) *ProjectsService_GetByName {
	return &ProjectsService_GetByName{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ProjectsService) OnGetByName(ctx context.Context, projectName string) *ProjectsService_GetByName {
	c := _m.On("GetByName", ctx, projectName)
	return &ProjectsService_GetByName{Call: c}
}

func (_m *ProjectsService) OnGetByNameMatch(matchers ...interface{}) *ProjectsService_GetByName {
	c := _m.On("GetByName", matchers...)
	return &ProjectsService_GetByName{Call: c}
}

// GetByName provides a mock function with given fields: ctx, projectName
func (_m *ProjectsService) GetByName(ctx context.Context, projectName string) (mlp.Project, error) {
	ret := _m.Called(ctx, projectName)

	var r0 mlp.Project
	if rf, ok := ret.Get(0).(func(context.Context, string) mlp.Project); ok {
		r0 = rf(ctx, projectName)
	} else {
		r0 = ret.Get(0).(mlp.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ProjectsService_List struct {
	*mock.Call
}

func (_m ProjectsService_List) Return(_a0 mlp.Projects, _a1 error) *ProjectsService_List {
	return &ProjectsService_List{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ProjectsService) OnList(ctx context.Context, projectName string) *ProjectsService_List {
	c := _m.On("List", ctx, projectName)
	return &ProjectsService_List{Call: c}
}

func (_m *ProjectsService) OnListMatch(matchers ...interface{}) *ProjectsService_List {
	c := _m.On("List", matchers...)
	return &ProjectsService_List{Call: c}
}

// List provides a mock function with given fields: ctx, projectName
func (_m *ProjectsService) List(ctx context.Context, projectName string) (mlp.Projects, error) {
	ret := _m.Called(ctx, projectName)

	var r0 mlp.Projects
	if rf, ok := ret.Get(0).(func(context.Context, string) mlp.Projects); ok {
		r0 = rf(ctx, projectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mlp.Projects)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
