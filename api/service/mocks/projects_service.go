// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mlp "github.com/caraml-dev/merlin/mlp"
	mock "github.com/stretchr/testify/mock"
)

// ProjectsService is an autogenerated mock type for the ProjectsService type
type ProjectsService struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, projectID
func (_m *ProjectsService) GetByID(ctx context.Context, projectID int32) (mlp.Project, error) {
	ret := _m.Called(ctx, projectID)

	var r0 mlp.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (mlp.Project, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) mlp.Project); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(mlp.Project)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, name
func (_m *ProjectsService) List(ctx context.Context, name string) (mlp.Projects, error) {
	ret := _m.Called(ctx, name)

	var r0 mlp.Projects
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (mlp.Projects, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) mlp.Projects); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mlp.Projects)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProjectsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProjectsService creates a new instance of ProjectsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProjectsService(t mockConstructorTestingTNewProjectsService) *ProjectsService {
	mock := &ProjectsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
