// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mlp "github.com/caraml-dev/merlin/mlp"
	mock "github.com/stretchr/testify/mock"
)

// SecretService is an autogenerated mock type for the SecretService type
type SecretService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, projectID, secret
func (_m *SecretService) Create(ctx context.Context, projectID int32, secret mlp.Secret) (mlp.Secret, error) {
	ret := _m.Called(ctx, projectID, secret)

	var r0 mlp.Secret
	if rf, ok := ret.Get(0).(func(context.Context, int32, mlp.Secret) mlp.Secret); ok {
		r0 = rf(ctx, projectID, secret)
	} else {
		r0 = ret.Get(0).(mlp.Secret)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, mlp.Secret) error); ok {
		r1 = rf(ctx, projectID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, secretID, projectID
func (_m *SecretService) Delete(ctx context.Context, secretID int32, projectID int32) error {
	ret := _m.Called(ctx, secretID, projectID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, secretID, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByIDandProjectID provides a mock function with given fields: ctx, secretID, projectID
func (_m *SecretService) GetByIDandProjectID(ctx context.Context, secretID int32, projectID int32) (mlp.Secret, error) {
	ret := _m.Called(ctx, secretID, projectID)

	var r0 mlp.Secret
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) mlp.Secret); ok {
		r0 = rf(ctx, secretID, projectID)
	} else {
		r0 = ret.Get(0).(mlp.Secret)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, secretID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, projectID
func (_m *SecretService) List(ctx context.Context, projectID int32) (mlp.Secrets, error) {
	ret := _m.Called(ctx, projectID)

	var r0 mlp.Secrets
	if rf, ok := ret.Get(0).(func(context.Context, int32) mlp.Secrets); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mlp.Secrets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, projectID, secret
func (_m *SecretService) Update(ctx context.Context, projectID int32, secret mlp.Secret) (mlp.Secret, error) {
	ret := _m.Called(ctx, projectID, secret)

	var r0 mlp.Secret
	if rf, ok := ret.Get(0).(func(context.Context, int32, mlp.Secret) mlp.Secret); ok {
		r0 = rf(ctx, projectID, secret)
	} else {
		r0 = ret.Get(0).(mlp.Secret)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, mlp.Secret) error); ok {
		r1 = rf(ctx, projectID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSecretService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSecretService creates a new instance of SecretService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSecretService(t mockConstructorTestingTNewSecretService) *SecretService {
	mock := &SecretService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
