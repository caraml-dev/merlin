// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mlp "github.com/gojek/merlin/mlp"
	mock "github.com/stretchr/testify/mock"
)

// SecretService is an autogenerated mock type for the SecretService type
type SecretService struct {
	mock.Mock
}

type SecretService_Create struct {
	*mock.Call
}

func (_m SecretService_Create) Return(_a0 mlp.Secret, _a1 error) *SecretService_Create {
	return &SecretService_Create{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *SecretService) OnCreate(ctx context.Context, projectID int32, secret mlp.Secret) *SecretService_Create {
	c := _m.On("Create", ctx, projectID, secret)
	return &SecretService_Create{Call: c}
}

func (_m *SecretService) OnCreateMatch(matchers ...interface{}) *SecretService_Create {
	c := _m.On("Create", matchers...)
	return &SecretService_Create{Call: c}
}

// Create provides a mock function with given fields: ctx, projectID, secret
func (_m *SecretService) Create(ctx context.Context, projectID int32, secret mlp.Secret) (mlp.Secret, error) {
	ret := _m.Called(ctx, projectID, secret)

	var r0 mlp.Secret
	if rf, ok := ret.Get(0).(func(context.Context, int32, mlp.Secret) mlp.Secret); ok {
		r0 = rf(ctx, projectID, secret)
	} else {
		r0 = ret.Get(0).(mlp.Secret)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, mlp.Secret) error); ok {
		r1 = rf(ctx, projectID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type SecretService_Delete struct {
	*mock.Call
}

func (_m SecretService_Delete) Return(_a0 error) *SecretService_Delete {
	return &SecretService_Delete{Call: _m.Call.Return(_a0)}
}

func (_m *SecretService) OnDelete(ctx context.Context, secretID int32, projectID int32) *SecretService_Delete {
	c := _m.On("Delete", ctx, secretID, projectID)
	return &SecretService_Delete{Call: c}
}

func (_m *SecretService) OnDeleteMatch(matchers ...interface{}) *SecretService_Delete {
	c := _m.On("Delete", matchers...)
	return &SecretService_Delete{Call: c}
}

// Delete provides a mock function with given fields: ctx, secretID, projectID
func (_m *SecretService) Delete(ctx context.Context, secretID int32, projectID int32) error {
	ret := _m.Called(ctx, secretID, projectID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, secretID, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type SecretService_GetByIDandProjectID struct {
	*mock.Call
}

func (_m SecretService_GetByIDandProjectID) Return(_a0 mlp.Secret, _a1 error) *SecretService_GetByIDandProjectID {
	return &SecretService_GetByIDandProjectID{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *SecretService) OnGetByIDandProjectID(ctx context.Context, secretID int32, projectID int32) *SecretService_GetByIDandProjectID {
	c := _m.On("GetByIDandProjectID", ctx, secretID, projectID)
	return &SecretService_GetByIDandProjectID{Call: c}
}

func (_m *SecretService) OnGetByIDandProjectIDMatch(matchers ...interface{}) *SecretService_GetByIDandProjectID {
	c := _m.On("GetByIDandProjectID", matchers...)
	return &SecretService_GetByIDandProjectID{Call: c}
}

// GetByIDandProjectID provides a mock function with given fields: ctx, secretID, projectID
func (_m *SecretService) GetByIDandProjectID(ctx context.Context, secretID int32, projectID int32) (mlp.Secret, error) {
	ret := _m.Called(ctx, secretID, projectID)

	var r0 mlp.Secret
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) mlp.Secret); ok {
		r0 = rf(ctx, secretID, projectID)
	} else {
		r0 = ret.Get(0).(mlp.Secret)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, secretID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type SecretService_List struct {
	*mock.Call
}

func (_m SecretService_List) Return(_a0 mlp.Secrets, _a1 error) *SecretService_List {
	return &SecretService_List{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *SecretService) OnList(ctx context.Context, projectID int32) *SecretService_List {
	c := _m.On("List", ctx, projectID)
	return &SecretService_List{Call: c}
}

func (_m *SecretService) OnListMatch(matchers ...interface{}) *SecretService_List {
	c := _m.On("List", matchers...)
	return &SecretService_List{Call: c}
}

// List provides a mock function with given fields: ctx, projectID
func (_m *SecretService) List(ctx context.Context, projectID int32) (mlp.Secrets, error) {
	ret := _m.Called(ctx, projectID)

	var r0 mlp.Secrets
	if rf, ok := ret.Get(0).(func(context.Context, int32) mlp.Secrets); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mlp.Secrets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type SecretService_Update struct {
	*mock.Call
}

func (_m SecretService_Update) Return(_a0 mlp.Secret, _a1 error) *SecretService_Update {
	return &SecretService_Update{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *SecretService) OnUpdate(ctx context.Context, projectID int32, secret mlp.Secret) *SecretService_Update {
	c := _m.On("Update", ctx, projectID, secret)
	return &SecretService_Update{Call: c}
}

func (_m *SecretService) OnUpdateMatch(matchers ...interface{}) *SecretService_Update {
	c := _m.On("Update", matchers...)
	return &SecretService_Update{Call: c}
}

// Update provides a mock function with given fields: ctx, projectID, secret
func (_m *SecretService) Update(ctx context.Context, projectID int32, secret mlp.Secret) (mlp.Secret, error) {
	ret := _m.Called(ctx, projectID, secret)

	var r0 mlp.Secret
	if rf, ok := ret.Get(0).(func(context.Context, int32, mlp.Secret) mlp.Secret); ok {
		r0 = rf(ctx, projectID, secret)
	} else {
		r0 = ret.Get(0).(mlp.Secret)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, mlp.Secret) error); ok {
		r1 = rf(ctx, projectID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
