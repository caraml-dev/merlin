/*
Merlin

API Guide for accessing Merlin's model management, deployment, and serving functionalities

API version: 0.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PipelineTracingInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipelineTracingInner{}

// PipelineTracingInner struct for PipelineTracingInner
type PipelineTracingInner struct {
	OperationType *string                `json:"operation_type,omitempty"`
	Specs         map[string]interface{} `json:"specs,omitempty"`
	Inputs        map[string]interface{} `json:"inputs,omitempty"`
	Outputs       map[string]interface{} `json:"outputs,omitempty"`
}

// NewPipelineTracingInner instantiates a new PipelineTracingInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineTracingInner() *PipelineTracingInner {
	this := PipelineTracingInner{}
	return &this
}

// NewPipelineTracingInnerWithDefaults instantiates a new PipelineTracingInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineTracingInnerWithDefaults() *PipelineTracingInner {
	this := PipelineTracingInner{}
	return &this
}

// GetOperationType returns the OperationType field value if set, zero value otherwise.
func (o *PipelineTracingInner) GetOperationType() string {
	if o == nil || IsNil(o.OperationType) {
		var ret string
		return ret
	}
	return *o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineTracingInner) GetOperationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OperationType) {
		return nil, false
	}
	return o.OperationType, true
}

// HasOperationType returns a boolean if a field has been set.
func (o *PipelineTracingInner) HasOperationType() bool {
	if o != nil && !IsNil(o.OperationType) {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given string and assigns it to the OperationType field.
func (o *PipelineTracingInner) SetOperationType(v string) {
	o.OperationType = &v
}

// GetSpecs returns the Specs field value if set, zero value otherwise.
func (o *PipelineTracingInner) GetSpecs() map[string]interface{} {
	if o == nil || IsNil(o.Specs) {
		var ret map[string]interface{}
		return ret
	}
	return o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineTracingInner) GetSpecsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Specs) {
		return map[string]interface{}{}, false
	}
	return o.Specs, true
}

// HasSpecs returns a boolean if a field has been set.
func (o *PipelineTracingInner) HasSpecs() bool {
	if o != nil && !IsNil(o.Specs) {
		return true
	}

	return false
}

// SetSpecs gets a reference to the given map[string]interface{} and assigns it to the Specs field.
func (o *PipelineTracingInner) SetSpecs(v map[string]interface{}) {
	o.Specs = v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *PipelineTracingInner) GetInputs() map[string]interface{} {
	if o == nil || IsNil(o.Inputs) {
		var ret map[string]interface{}
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineTracingInner) GetInputsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Inputs) {
		return map[string]interface{}{}, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *PipelineTracingInner) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given map[string]interface{} and assigns it to the Inputs field.
func (o *PipelineTracingInner) SetInputs(v map[string]interface{}) {
	o.Inputs = v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *PipelineTracingInner) GetOutputs() map[string]interface{} {
	if o == nil || IsNil(o.Outputs) {
		var ret map[string]interface{}
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineTracingInner) GetOutputsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Outputs) {
		return map[string]interface{}{}, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *PipelineTracingInner) HasOutputs() bool {
	if o != nil && !IsNil(o.Outputs) {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given map[string]interface{} and assigns it to the Outputs field.
func (o *PipelineTracingInner) SetOutputs(v map[string]interface{}) {
	o.Outputs = v
}

func (o PipelineTracingInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelineTracingInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OperationType) {
		toSerialize["operation_type"] = o.OperationType
	}
	if !IsNil(o.Specs) {
		toSerialize["specs"] = o.Specs
	}
	if !IsNil(o.Inputs) {
		toSerialize["inputs"] = o.Inputs
	}
	if !IsNil(o.Outputs) {
		toSerialize["outputs"] = o.Outputs
	}
	return toSerialize, nil
}

type NullablePipelineTracingInner struct {
	value *PipelineTracingInner
	isSet bool
}

func (v NullablePipelineTracingInner) Get() *PipelineTracingInner {
	return v.value
}

func (v *NullablePipelineTracingInner) Set(val *PipelineTracingInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineTracingInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineTracingInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineTracingInner(val *PipelineTracingInner) *NullablePipelineTracingInner {
	return &NullablePipelineTracingInner{value: val, isSet: true}
}

func (v NullablePipelineTracingInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineTracingInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
