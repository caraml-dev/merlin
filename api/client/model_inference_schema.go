/*
Merlin

API Guide for accessing Merlin's model management, deployment, and serving functionalities

API version: 0.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the InferenceSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InferenceSchema{}

// InferenceSchema struct for InferenceSchema
type InferenceSchema struct {
	Id     *int32  `json:"id,omitempty"`
	Schema *Schema `json:"schema,omitempty"`
}

// NewInferenceSchema instantiates a new InferenceSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInferenceSchema() *InferenceSchema {
	this := InferenceSchema{}
	return &this
}

// NewInferenceSchemaWithDefaults instantiates a new InferenceSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInferenceSchemaWithDefaults() *InferenceSchema {
	this := InferenceSchema{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InferenceSchema) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InferenceSchema) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InferenceSchema) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *InferenceSchema) SetId(v int32) {
	o.Id = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *InferenceSchema) GetSchema() Schema {
	if o == nil || IsNil(o.Schema) {
		var ret Schema
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InferenceSchema) GetSchemaOk() (*Schema, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *InferenceSchema) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given Schema and assigns it to the Schema field.
func (o *InferenceSchema) SetSchema(v Schema) {
	o.Schema = &v
}

func (o InferenceSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InferenceSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	return toSerialize, nil
}

type NullableInferenceSchema struct {
	value *InferenceSchema
	isSet bool
}

func (v NullableInferenceSchema) Get() *InferenceSchema {
	return v.value
}

func (v *NullableInferenceSchema) Set(val *InferenceSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableInferenceSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableInferenceSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInferenceSchema(val *InferenceSchema) *NullableInferenceSchema {
	return &NullableInferenceSchema{value: val, isSet: true}
}

func (v NullableInferenceSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInferenceSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
