/*
Merlin

API Guide for accessing Merlin's model management, deployment, and serving functionalities

API version: 0.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the BinaryClassificationOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BinaryClassificationOutput{}

// BinaryClassificationOutput struct for BinaryClassificationOutput
type BinaryClassificationOutput struct {
	PredictionScoreColumn *string  `json:"prediction_score_column,omitempty"`
	ActualLabelColumn     *string  `json:"actual_label_column,omitempty"`
	PositiveClassLabel    *string  `json:"positive_class_label,omitempty"`
	NegativeClassLabel    *string  `json:"negative_class_label,omitempty"`
	ScoreThreshold        *float32 `json:"score_threshold,omitempty"`
}

// NewBinaryClassificationOutput instantiates a new BinaryClassificationOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBinaryClassificationOutput() *BinaryClassificationOutput {
	this := BinaryClassificationOutput{}
	return &this
}

// NewBinaryClassificationOutputWithDefaults instantiates a new BinaryClassificationOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBinaryClassificationOutputWithDefaults() *BinaryClassificationOutput {
	this := BinaryClassificationOutput{}
	return &this
}

// GetPredictionScoreColumn returns the PredictionScoreColumn field value if set, zero value otherwise.
func (o *BinaryClassificationOutput) GetPredictionScoreColumn() string {
	if o == nil || IsNil(o.PredictionScoreColumn) {
		var ret string
		return ret
	}
	return *o.PredictionScoreColumn
}

// GetPredictionScoreColumnOk returns a tuple with the PredictionScoreColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinaryClassificationOutput) GetPredictionScoreColumnOk() (*string, bool) {
	if o == nil || IsNil(o.PredictionScoreColumn) {
		return nil, false
	}
	return o.PredictionScoreColumn, true
}

// HasPredictionScoreColumn returns a boolean if a field has been set.
func (o *BinaryClassificationOutput) HasPredictionScoreColumn() bool {
	if o != nil && !IsNil(o.PredictionScoreColumn) {
		return true
	}

	return false
}

// SetPredictionScoreColumn gets a reference to the given string and assigns it to the PredictionScoreColumn field.
func (o *BinaryClassificationOutput) SetPredictionScoreColumn(v string) {
	o.PredictionScoreColumn = &v
}

// GetActualLabelColumn returns the ActualLabelColumn field value if set, zero value otherwise.
func (o *BinaryClassificationOutput) GetActualLabelColumn() string {
	if o == nil || IsNil(o.ActualLabelColumn) {
		var ret string
		return ret
	}
	return *o.ActualLabelColumn
}

// GetActualLabelColumnOk returns a tuple with the ActualLabelColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinaryClassificationOutput) GetActualLabelColumnOk() (*string, bool) {
	if o == nil || IsNil(o.ActualLabelColumn) {
		return nil, false
	}
	return o.ActualLabelColumn, true
}

// HasActualLabelColumn returns a boolean if a field has been set.
func (o *BinaryClassificationOutput) HasActualLabelColumn() bool {
	if o != nil && !IsNil(o.ActualLabelColumn) {
		return true
	}

	return false
}

// SetActualLabelColumn gets a reference to the given string and assigns it to the ActualLabelColumn field.
func (o *BinaryClassificationOutput) SetActualLabelColumn(v string) {
	o.ActualLabelColumn = &v
}

// GetPositiveClassLabel returns the PositiveClassLabel field value if set, zero value otherwise.
func (o *BinaryClassificationOutput) GetPositiveClassLabel() string {
	if o == nil || IsNil(o.PositiveClassLabel) {
		var ret string
		return ret
	}
	return *o.PositiveClassLabel
}

// GetPositiveClassLabelOk returns a tuple with the PositiveClassLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinaryClassificationOutput) GetPositiveClassLabelOk() (*string, bool) {
	if o == nil || IsNil(o.PositiveClassLabel) {
		return nil, false
	}
	return o.PositiveClassLabel, true
}

// HasPositiveClassLabel returns a boolean if a field has been set.
func (o *BinaryClassificationOutput) HasPositiveClassLabel() bool {
	if o != nil && !IsNil(o.PositiveClassLabel) {
		return true
	}

	return false
}

// SetPositiveClassLabel gets a reference to the given string and assigns it to the PositiveClassLabel field.
func (o *BinaryClassificationOutput) SetPositiveClassLabel(v string) {
	o.PositiveClassLabel = &v
}

// GetNegativeClassLabel returns the NegativeClassLabel field value if set, zero value otherwise.
func (o *BinaryClassificationOutput) GetNegativeClassLabel() string {
	if o == nil || IsNil(o.NegativeClassLabel) {
		var ret string
		return ret
	}
	return *o.NegativeClassLabel
}

// GetNegativeClassLabelOk returns a tuple with the NegativeClassLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinaryClassificationOutput) GetNegativeClassLabelOk() (*string, bool) {
	if o == nil || IsNil(o.NegativeClassLabel) {
		return nil, false
	}
	return o.NegativeClassLabel, true
}

// HasNegativeClassLabel returns a boolean if a field has been set.
func (o *BinaryClassificationOutput) HasNegativeClassLabel() bool {
	if o != nil && !IsNil(o.NegativeClassLabel) {
		return true
	}

	return false
}

// SetNegativeClassLabel gets a reference to the given string and assigns it to the NegativeClassLabel field.
func (o *BinaryClassificationOutput) SetNegativeClassLabel(v string) {
	o.NegativeClassLabel = &v
}

// GetScoreThreshold returns the ScoreThreshold field value if set, zero value otherwise.
func (o *BinaryClassificationOutput) GetScoreThreshold() float32 {
	if o == nil || IsNil(o.ScoreThreshold) {
		var ret float32
		return ret
	}
	return *o.ScoreThreshold
}

// GetScoreThresholdOk returns a tuple with the ScoreThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinaryClassificationOutput) GetScoreThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.ScoreThreshold) {
		return nil, false
	}
	return o.ScoreThreshold, true
}

// HasScoreThreshold returns a boolean if a field has been set.
func (o *BinaryClassificationOutput) HasScoreThreshold() bool {
	if o != nil && !IsNil(o.ScoreThreshold) {
		return true
	}

	return false
}

// SetScoreThreshold gets a reference to the given float32 and assigns it to the ScoreThreshold field.
func (o *BinaryClassificationOutput) SetScoreThreshold(v float32) {
	o.ScoreThreshold = &v
}

func (o BinaryClassificationOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BinaryClassificationOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PredictionScoreColumn) {
		toSerialize["prediction_score_column"] = o.PredictionScoreColumn
	}
	if !IsNil(o.ActualLabelColumn) {
		toSerialize["actual_label_column"] = o.ActualLabelColumn
	}
	if !IsNil(o.PositiveClassLabel) {
		toSerialize["positive_class_label"] = o.PositiveClassLabel
	}
	if !IsNil(o.NegativeClassLabel) {
		toSerialize["negative_class_label"] = o.NegativeClassLabel
	}
	if !IsNil(o.ScoreThreshold) {
		toSerialize["score_threshold"] = o.ScoreThreshold
	}
	return toSerialize, nil
}

type NullableBinaryClassificationOutput struct {
	value *BinaryClassificationOutput
	isSet bool
}

func (v NullableBinaryClassificationOutput) Get() *BinaryClassificationOutput {
	return v.value
}

func (v *NullableBinaryClassificationOutput) Set(val *BinaryClassificationOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableBinaryClassificationOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableBinaryClassificationOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinaryClassificationOutput(val *BinaryClassificationOutput) *NullableBinaryClassificationOutput {
	return &NullableBinaryClassificationOutput{value: val, isSet: true}
}

func (v NullableBinaryClassificationOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinaryClassificationOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
