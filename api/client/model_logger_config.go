/*
Merlin

API Guide for accessing Merlin's model management, deployment, and serving functionalities

API version: 0.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the LoggerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoggerConfig{}

// LoggerConfig struct for LoggerConfig
type LoggerConfig struct {
	Enabled *bool       `json:"enabled,omitempty"`
	Mode    *LoggerMode `json:"mode,omitempty"`
}

// NewLoggerConfig instantiates a new LoggerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoggerConfig() *LoggerConfig {
	this := LoggerConfig{}
	return &this
}

// NewLoggerConfigWithDefaults instantiates a new LoggerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggerConfigWithDefaults() *LoggerConfig {
	this := LoggerConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *LoggerConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggerConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *LoggerConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *LoggerConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *LoggerConfig) GetMode() LoggerMode {
	if o == nil || IsNil(o.Mode) {
		var ret LoggerMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggerConfig) GetModeOk() (*LoggerMode, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *LoggerConfig) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given LoggerMode and assigns it to the Mode field.
func (o *LoggerConfig) SetMode(v LoggerMode) {
	o.Mode = &v
}

func (o LoggerConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoggerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	return toSerialize, nil
}

type NullableLoggerConfig struct {
	value *LoggerConfig
	isSet bool
}

func (v NullableLoggerConfig) Get() *LoggerConfig {
	return v.value
}

func (v *NullableLoggerConfig) Set(val *LoggerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggerConfig(val *LoggerConfig) *NullableLoggerConfig {
	return &NullableLoggerConfig{value: val, isSet: true}
}

func (v NullableLoggerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
