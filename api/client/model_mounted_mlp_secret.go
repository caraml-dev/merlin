/*
Merlin

API Guide for accessing Merlin's model management, deployment, and serving functionalities

API version: 0.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the MountedMLPSecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MountedMLPSecret{}

// MountedMLPSecret struct for MountedMLPSecret
type MountedMLPSecret struct {
	MlpSecretName *string `json:"mlp_secret_name,omitempty"`
	EnvVarName    *string `json:"env_var_name,omitempty"`
}

// NewMountedMLPSecret instantiates a new MountedMLPSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMountedMLPSecret() *MountedMLPSecret {
	this := MountedMLPSecret{}
	return &this
}

// NewMountedMLPSecretWithDefaults instantiates a new MountedMLPSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountedMLPSecretWithDefaults() *MountedMLPSecret {
	this := MountedMLPSecret{}
	return &this
}

// GetMlpSecretName returns the MlpSecretName field value if set, zero value otherwise.
func (o *MountedMLPSecret) GetMlpSecretName() string {
	if o == nil || IsNil(o.MlpSecretName) {
		var ret string
		return ret
	}
	return *o.MlpSecretName
}

// GetMlpSecretNameOk returns a tuple with the MlpSecretName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MountedMLPSecret) GetMlpSecretNameOk() (*string, bool) {
	if o == nil || IsNil(o.MlpSecretName) {
		return nil, false
	}
	return o.MlpSecretName, true
}

// HasMlpSecretName returns a boolean if a field has been set.
func (o *MountedMLPSecret) HasMlpSecretName() bool {
	if o != nil && !IsNil(o.MlpSecretName) {
		return true
	}

	return false
}

// SetMlpSecretName gets a reference to the given string and assigns it to the MlpSecretName field.
func (o *MountedMLPSecret) SetMlpSecretName(v string) {
	o.MlpSecretName = &v
}

// GetEnvVarName returns the EnvVarName field value if set, zero value otherwise.
func (o *MountedMLPSecret) GetEnvVarName() string {
	if o == nil || IsNil(o.EnvVarName) {
		var ret string
		return ret
	}
	return *o.EnvVarName
}

// GetEnvVarNameOk returns a tuple with the EnvVarName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MountedMLPSecret) GetEnvVarNameOk() (*string, bool) {
	if o == nil || IsNil(o.EnvVarName) {
		return nil, false
	}
	return o.EnvVarName, true
}

// HasEnvVarName returns a boolean if a field has been set.
func (o *MountedMLPSecret) HasEnvVarName() bool {
	if o != nil && !IsNil(o.EnvVarName) {
		return true
	}

	return false
}

// SetEnvVarName gets a reference to the given string and assigns it to the EnvVarName field.
func (o *MountedMLPSecret) SetEnvVarName(v string) {
	o.EnvVarName = &v
}

func (o MountedMLPSecret) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MountedMLPSecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MlpSecretName) {
		toSerialize["mlp_secret_name"] = o.MlpSecretName
	}
	if !IsNil(o.EnvVarName) {
		toSerialize["env_var_name"] = o.EnvVarName
	}
	return toSerialize, nil
}

type NullableMountedMLPSecret struct {
	value *MountedMLPSecret
	isSet bool
}

func (v NullableMountedMLPSecret) Get() *MountedMLPSecret {
	return v.value
}

func (v *NullableMountedMLPSecret) Set(val *MountedMLPSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableMountedMLPSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableMountedMLPSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountedMLPSecret(val *MountedMLPSecret) *NullableMountedMLPSecret {
	return &NullableMountedMLPSecret{value: val, isSet: true}
}

func (v NullableMountedMLPSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountedMLPSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
