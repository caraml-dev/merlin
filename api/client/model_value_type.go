/*
Merlin

API Guide for accessing Merlin's model management, deployment, and serving functionalities

API version: 0.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ValueType the model 'ValueType'
type ValueType string

// List of ValueType
const (
	VALUETYPE_FLOAT64 ValueType = "float64"
	VALUETYPE_INT64   ValueType = "int64"
	VALUETYPE_BOOLEAN ValueType = "boolean"
	VALUETYPE_STRING  ValueType = "string"
)

// All allowed values of ValueType enum
var AllowedValueTypeEnumValues = []ValueType{
	"float64",
	"int64",
	"boolean",
	"string",
}

func (v *ValueType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValueType(value)
	for _, existing := range AllowedValueTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValueType", value)
}

// NewValueTypeFromValue returns a pointer to a valid ValueType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValueTypeFromValue(v string) (*ValueType, error) {
	ev := ValueType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValueType: valid values are %v", v, AllowedValueTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValueType) IsValid() bool {
	for _, existing := range AllowedValueTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValueType value
func (v ValueType) Ptr() *ValueType {
	return &v
}

type NullableValueType struct {
	value *ValueType
	isSet bool
}

func (v NullableValueType) Get() *ValueType {
	return v.value
}

func (v *NullableValueType) Set(val *ValueType) {
	v.value = val
	v.isSet = true
}

func (v NullableValueType) IsSet() bool {
	return v.isSet
}

func (v *NullableValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueType(val *ValueType) *NullableValueType {
	return &NullableValueType{value: val, isSet: true}
}

func (v NullableValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
