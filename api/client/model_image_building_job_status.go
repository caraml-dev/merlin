/*
Merlin

API Guide for accessing Merlin's model management, deployment, and serving functionalities

API version: 0.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ImageBuildingJobStatus the model 'ImageBuildingJobStatus'
type ImageBuildingJobStatus string

// List of ImageBuildingJobStatus
const (
	IMAGEBUILDINGJOBSTATUS_ACTIVE    ImageBuildingJobStatus = "active"
	IMAGEBUILDINGJOBSTATUS_SUCCEEDED ImageBuildingJobStatus = "succeeded"
	IMAGEBUILDINGJOBSTATUS_FAILED    ImageBuildingJobStatus = "failed"
	IMAGEBUILDINGJOBSTATUS_UNKNOWN   ImageBuildingJobStatus = "unknown"
)

// All allowed values of ImageBuildingJobStatus enum
var AllowedImageBuildingJobStatusEnumValues = []ImageBuildingJobStatus{
	"active",
	"succeeded",
	"failed",
	"unknown",
}

func (v *ImageBuildingJobStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageBuildingJobStatus(value)
	for _, existing := range AllowedImageBuildingJobStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageBuildingJobStatus", value)
}

// NewImageBuildingJobStatusFromValue returns a pointer to a valid ImageBuildingJobStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageBuildingJobStatusFromValue(v string) (*ImageBuildingJobStatus, error) {
	ev := ImageBuildingJobStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageBuildingJobStatus: valid values are %v", v, AllowedImageBuildingJobStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageBuildingJobStatus) IsValid() bool {
	for _, existing := range AllowedImageBuildingJobStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageBuildingJobStatus value
func (v ImageBuildingJobStatus) Ptr() *ImageBuildingJobStatus {
	return &v
}

type NullableImageBuildingJobStatus struct {
	value *ImageBuildingJobStatus
	isSet bool
}

func (v NullableImageBuildingJobStatus) Get() *ImageBuildingJobStatus {
	return v.value
}

func (v *NullableImageBuildingJobStatus) Set(val *ImageBuildingJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableImageBuildingJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableImageBuildingJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageBuildingJobStatus(val *ImageBuildingJobStatus) *NullableImageBuildingJobStatus {
	return &NullableImageBuildingJobStatus{value: val, isSet: true}
}

func (v NullableImageBuildingJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageBuildingJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
