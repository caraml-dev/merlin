/*
Merlin

API Guide for accessing Merlin's model management, deployment, and serving functionalities

API version: 0.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Schema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schema{}

// Schema struct for Schema
type Schema struct {
	PredictionIdColumn    *string                `json:"prediction_id_column,omitempty"`
	ModelPredictionOutput *ModelPredictionOutput `json:"model_prediction_output,omitempty"`
	TagColumns            []string               `json:"tag_columns,omitempty"`
	FeatureTypes          *map[string]ValueType  `json:"feature_types,omitempty"`
}

// NewSchema instantiates a new Schema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchema() *Schema {
	this := Schema{}
	return &this
}

// NewSchemaWithDefaults instantiates a new Schema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaWithDefaults() *Schema {
	this := Schema{}
	return &this
}

// GetPredictionIdColumn returns the PredictionIdColumn field value if set, zero value otherwise.
func (o *Schema) GetPredictionIdColumn() string {
	if o == nil || IsNil(o.PredictionIdColumn) {
		var ret string
		return ret
	}
	return *o.PredictionIdColumn
}

// GetPredictionIdColumnOk returns a tuple with the PredictionIdColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetPredictionIdColumnOk() (*string, bool) {
	if o == nil || IsNil(o.PredictionIdColumn) {
		return nil, false
	}
	return o.PredictionIdColumn, true
}

// HasPredictionIdColumn returns a boolean if a field has been set.
func (o *Schema) HasPredictionIdColumn() bool {
	if o != nil && !IsNil(o.PredictionIdColumn) {
		return true
	}

	return false
}

// SetPredictionIdColumn gets a reference to the given string and assigns it to the PredictionIdColumn field.
func (o *Schema) SetPredictionIdColumn(v string) {
	o.PredictionIdColumn = &v
}

// GetModelPredictionOutput returns the ModelPredictionOutput field value if set, zero value otherwise.
func (o *Schema) GetModelPredictionOutput() ModelPredictionOutput {
	if o == nil || IsNil(o.ModelPredictionOutput) {
		var ret ModelPredictionOutput
		return ret
	}
	return *o.ModelPredictionOutput
}

// GetModelPredictionOutputOk returns a tuple with the ModelPredictionOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetModelPredictionOutputOk() (*ModelPredictionOutput, bool) {
	if o == nil || IsNil(o.ModelPredictionOutput) {
		return nil, false
	}
	return o.ModelPredictionOutput, true
}

// HasModelPredictionOutput returns a boolean if a field has been set.
func (o *Schema) HasModelPredictionOutput() bool {
	if o != nil && !IsNil(o.ModelPredictionOutput) {
		return true
	}

	return false
}

// SetModelPredictionOutput gets a reference to the given ModelPredictionOutput and assigns it to the ModelPredictionOutput field.
func (o *Schema) SetModelPredictionOutput(v ModelPredictionOutput) {
	o.ModelPredictionOutput = &v
}

// GetTagColumns returns the TagColumns field value if set, zero value otherwise.
func (o *Schema) GetTagColumns() []string {
	if o == nil || IsNil(o.TagColumns) {
		var ret []string
		return ret
	}
	return o.TagColumns
}

// GetTagColumnsOk returns a tuple with the TagColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetTagColumnsOk() ([]string, bool) {
	if o == nil || IsNil(o.TagColumns) {
		return nil, false
	}
	return o.TagColumns, true
}

// HasTagColumns returns a boolean if a field has been set.
func (o *Schema) HasTagColumns() bool {
	if o != nil && !IsNil(o.TagColumns) {
		return true
	}

	return false
}

// SetTagColumns gets a reference to the given []string and assigns it to the TagColumns field.
func (o *Schema) SetTagColumns(v []string) {
	o.TagColumns = v
}

// GetFeatureTypes returns the FeatureTypes field value if set, zero value otherwise.
func (o *Schema) GetFeatureTypes() map[string]ValueType {
	if o == nil || IsNil(o.FeatureTypes) {
		var ret map[string]ValueType
		return ret
	}
	return *o.FeatureTypes
}

// GetFeatureTypesOk returns a tuple with the FeatureTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetFeatureTypesOk() (*map[string]ValueType, bool) {
	if o == nil || IsNil(o.FeatureTypes) {
		return nil, false
	}
	return o.FeatureTypes, true
}

// HasFeatureTypes returns a boolean if a field has been set.
func (o *Schema) HasFeatureTypes() bool {
	if o != nil && !IsNil(o.FeatureTypes) {
		return true
	}

	return false
}

// SetFeatureTypes gets a reference to the given map[string]ValueType and assigns it to the FeatureTypes field.
func (o *Schema) SetFeatureTypes(v map[string]ValueType) {
	o.FeatureTypes = &v
}

func (o Schema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PredictionIdColumn) {
		toSerialize["prediction_id_column"] = o.PredictionIdColumn
	}
	if !IsNil(o.ModelPredictionOutput) {
		toSerialize["model_prediction_output"] = o.ModelPredictionOutput
	}
	if !IsNil(o.TagColumns) {
		toSerialize["tag_columns"] = o.TagColumns
	}
	if !IsNil(o.FeatureTypes) {
		toSerialize["feature_types"] = o.FeatureTypes
	}
	return toSerialize, nil
}

type NullableSchema struct {
	value *Schema
	isSet bool
}

func (v NullableSchema) Get() *Schema {
	return v.value
}

func (v *NullableSchema) Set(val *Schema) {
	v.value = val
	v.isSet = true
}

func (v NullableSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchema(val *Schema) *NullableSchema {
	return &NullableSchema{value: val, isSet: true}
}

func (v NullableSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
