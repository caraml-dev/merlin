/*
 * Merlin
 *
 * API Guide for accessing Merlin's model management, deployment, and serving functionalities
 *
 * API version: 0.14.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package client

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type LogApiService service

/*
LogApiService Retrieve log from a container
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cluster
 * @param namespace
 * @param componentType
 * @param optional nil or *LogApiLogsGetOpts - Optional Parameters:
     * @param "ProjectName" (optional.String) -
     * @param "ModelId" (optional.String) -
     * @param "ModelName" (optional.String) -
     * @param "VersionId" (optional.String) -
     * @param "PredictionJobId" (optional.String) -
     * @param "ContainerName" (optional.String) -
     * @param "Prefix" (optional.String) -
     * @param "Follow" (optional.String) -
     * @param "Previous" (optional.String) -
     * @param "SinceSeconds" (optional.String) -
     * @param "SinceTime" (optional.String) -
     * @param "Timestamps" (optional.String) -
     * @param "TailLines" (optional.String) -
     * @param "LimitBytes" (optional.String) -

*/

type LogApiLogsGetOpts struct {
	ProjectName     optional.String
	ModelId         optional.String
	ModelName       optional.String
	VersionId       optional.String
	PredictionJobId optional.String
	ContainerName   optional.String
	Prefix          optional.String
	Follow          optional.String
	Previous        optional.String
	SinceSeconds    optional.String
	SinceTime       optional.String
	Timestamps      optional.String
	TailLines       optional.String
	LimitBytes      optional.String
}

func (a *LogApiService) LogsGet(ctx context.Context, cluster string, namespace string, componentType string, localVarOptionals *LogApiLogsGetOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/logs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ProjectName.IsSet() {
		localVarQueryParams.Add("project_name", parameterToString(localVarOptionals.ProjectName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModelId.IsSet() {
		localVarQueryParams.Add("model_id", parameterToString(localVarOptionals.ModelId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModelName.IsSet() {
		localVarQueryParams.Add("model_name", parameterToString(localVarOptionals.ModelName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VersionId.IsSet() {
		localVarQueryParams.Add("version_id", parameterToString(localVarOptionals.VersionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PredictionJobId.IsSet() {
		localVarQueryParams.Add("prediction_job_id", parameterToString(localVarOptionals.PredictionJobId.Value(), ""))
	}
	localVarQueryParams.Add("cluster", parameterToString(cluster, ""))
	localVarQueryParams.Add("namespace", parameterToString(namespace, ""))
	localVarQueryParams.Add("component_type", parameterToString(componentType, ""))
	if localVarOptionals != nil && localVarOptionals.ContainerName.IsSet() {
		localVarQueryParams.Add("container_name", parameterToString(localVarOptionals.ContainerName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Prefix.IsSet() {
		localVarQueryParams.Add("prefix", parameterToString(localVarOptionals.Prefix.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Follow.IsSet() {
		localVarQueryParams.Add("follow", parameterToString(localVarOptionals.Follow.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Previous.IsSet() {
		localVarQueryParams.Add("previous", parameterToString(localVarOptionals.Previous.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SinceSeconds.IsSet() {
		localVarQueryParams.Add("since_seconds", parameterToString(localVarOptionals.SinceSeconds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SinceTime.IsSet() {
		localVarQueryParams.Add("since_time", parameterToString(localVarOptionals.SinceTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Timestamps.IsSet() {
		localVarQueryParams.Add("timestamps", parameterToString(localVarOptionals.Timestamps.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TailLines.IsSet() {
		localVarQueryParams.Add("tail_lines", parameterToString(localVarOptionals.TailLines.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LimitBytes.IsSet() {
		localVarQueryParams.Add("limit_bytes", parameterToString(localVarOptionals.LimitBytes.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
