apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kserve-controller-manager
  namespace: kserve
spec:
  template:
    spec:
      containers:
      - name: manager
        image: kserve/kserve-controller:latest
        resources:
          limits:
            cpu: 1
            memory: 300Mi
          requests:
            cpu: 25m
            memory: 64Mi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: inferenceservice-config
  namespace: kserve
data:
  agent: |-
    {
        "image" : "kserve/agent:v0.8.0",
        "memoryRequest": "50Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "10m",
        "cpuLimit": "1"
    }
  batcher: |-
    {
        "image" : "kserve/agent:v0.8.0",
        "memoryRequest": "50Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "10m",
        "cpuLimit": "1"
    }
  credentials: |-
    {
       "gcs": {
           "gcsCredentialFileName": "gcloud-application-credentials.json"
       },
       "s3": {
           "s3AccessKeyIDName": "AWS_ACCESS_KEY_ID",
           "s3SecretAccessKeyName": "AWS_SECRET_ACCESS_KEY"
       }
    }
  deploy: |-
    {
      "defaultDeploymentMode": "Serverless"
    }
  explainers: |-
    {
        "alibi": {
            "image" : "kserve/alibi-explainer",
            "defaultImageVersion": "latest"
        },
        "aix": {
            "image" : "kserve/aix-explainer",
            "defaultImageVersion": "latest"
        },
        "art": {
            "image" : "kserve/art-explainer",
            "defaultImageVersion": "latest"
        }
    }
  ingress: |-
    {
        "ingressGateway" : "knative-serving/knative-ingress-gateway",
        "ingressService" : "istio-ingressgateway.istio-system.svc.cluster.local",
        "localGateway" : "knative-serving/knative-local-gateway",
        "localGatewayService" : "knative-local-gateway.istio-system.svc.cluster.local",
        "ingressDomain"  : "127.0.0.1.nip.io",
        "ingressClassName" : "istio",
        "domainTemplate": "{{ .Name }}.{{ .Namespace }}.{{ .IngressDomain }}"
    }
  logger: |-
    {
        "image" : "kserve/agent:v0.8.0",
        "memoryRequest": "100Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "10m",
        "cpuLimit": "1",
        "defaultUrl": "http://default-broker"
    }
  predictors: |-
    {
        "tensorflow": {
            "image": "tensorflow/serving",
            "defaultImageVersion": "2.6.2",
            "defaultGpuImageVersion": "2.6.2-gpu",
            "defaultTimeout": "60",
            "supportedFrameworks": [
              "tensorflow"
            ],
            "multiModelServer": false
        },
        "onnx": {
            "image": "mcr.microsoft.com/onnxruntime/server",
            "defaultImageVersion": "v1.0.0",
            "supportedFrameworks": [
              "onnx"
            ],
            "multiModelServer": false
        },
        "sklearn": {
          "v1": {
            "image": "kserve/sklearnserver",
            "defaultImageVersion": "v0.8.0",
            "supportedFrameworks": [
              "sklearn"
            ],
            "multiModelServer": true
          },
          "v2": {
            "image": "docker.io/seldonio/mlserver",
            "defaultImageVersion": "0.5.3",
            "supportedFrameworks": [
              "sklearn"
            ],
            "multiModelServer": true
          }
        },
        "xgboost": {
          "v1": {
            "image": "kserve/xgbserver",
            "defaultImageVersion": "v0.8.0",
            "supportedFrameworks": [
              "xgboost"
            ],
            "multiModelServer": true
          },
          "v2": {
            "image": "docker.io/seldonio/mlserver",
            "defaultImageVersion": "0.5.3",
            "supportedFrameworks": [
              "xgboost"
            ],
            "multiModelServer": true
          }
        },
        "pytorch": {
          "v1" : {
            "image": "kserve/torchserve-kfs",
            "defaultImageVersion": "0.5.3",
            "defaultGpuImageVersion": "0.5.3-gpu",
            "supportedFrameworks": [
              "pytorch"
            ],
            "multiModelServer": false
          },
          "v2" : {
            "image": "kserve/torchserve-kfs",
            "defaultImageVersion": "0.5.3",
            "defaultGpuImageVersion": "0.5.3-gpu",
            "supportedFrameworks": [
              "pytorch"
            ],
            "multiModelServer": false
          }
        },
        "triton": {
            "image": "nvcr.io/nvidia/tritonserver",
            "defaultImageVersion": "21.09-py3",
            "supportedFrameworks": [
              "tensorrt",
              "tensorflow",
              "onnx",
              "pytorch"
            ],
            "multiModelServer": true
        },
        "pmml": {
            "image": "kserve/pmmlserver",
            "defaultImageVersion": "v0.8.0",
            "supportedFrameworks": [
              "pmml"
            ],
            "multiModelServer": false
        },
        "lightgbm": {
            "image": "kserve/lgbserver",
            "defaultImageVersion": "v0.8.0",
            "supportedFrameworks": [
              "lightgbm"
            ],
            "multiModelServer": false
        },
        "paddle": {
            "image": "kserve/paddleserver",
            "defaultImageVersion": "v0.8.0",
            "supportedFrameworks": [
              "paddle"
            ],
            "multiModelServer": false
        }
    }
  storageInitializer: |-
    {
        "image" : "ghcr.io/ariefrahmansyah/kfserving-storage-init:latest",
        "memoryRequest": "50Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "20m",
        "cpuLimit": "1"
    }
  transformers: |-
    {
    }

---
# Temporary solution until kserve release 0.9.0
# This is required due to https://github.com/kserve/kserve/pull/2088

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kserve-manager-role
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.istio.io
  resources:
  - virtualservices
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.istio.io
  resources:
  - virtualservices/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.istio.io
  resources:
  - virtualservices/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.knative.dev
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.knative.dev
  resources:
  - services/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.knative.dev
  resources:
  - services/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - serving.kserve.io
  resources:
  - clusterservingruntimes
  - clusterservingruntimes/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.kserve.io
  resources:
  - clusterservingruntimes/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - serving.kserve.io
  resources:
  - inferenceservices
  - inferenceservices/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.kserve.io
  resources:
  - inferenceservices/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - serving.kserve.io
  resources:
  - servingruntimes
  - servingruntimes/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.kserve.io
  resources:
  - servingruntimes/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - serving.kserve.io
  resources:
  - trainedmodels
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.kserve.io
  resources:
  - trainedmodels/status
  verbs:
  - get
  - patch
  - update
